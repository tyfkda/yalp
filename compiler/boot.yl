(declaim
 (inline not)
 (inline caar cdar cadr cddr
         cadar caddr cdddr
         cadddr cddddr)
 )

;;; Basic read macros.

;; Line comment
(set-macro-character #\;
  (^(stream ch)
    (until (member (read-char stream) '(#\nl nil)))
    (values)))

;; 'x => (quote x)
(set-macro-character #\'
  (^(stream ch)
    `(quote ,(read stream))))

;; Creates simple 1 parameter function with bracket notation.
;; [...] => (^(_) ...)
(set-macro-character #\[
  (^(stream ch)
    `(^ (_) ,(read-delimited-list #\] stream))))

;;; Basic functions and macros.

(defmacro defun (name vars &body body)
  `(def ,name (^ ,vars ,@body)))

(defun not (x) (if x nil t))

;; Macro definitions needed only compile time.
#.(do (defmacro gen-cxxr (cxxr)
        `(defun ,cxxr (x)
           ,(let1 s (string cxxr)
              (alet ((i (- (length s) 2))
                     (acc 'x))
                (if (>= i 1)
                    (case (char-at s i)
                      (#\a (loop (- i 1) (list 'car acc)))
                      (#\d (loop (- i 1) (list 'cdr acc))))
                  acc)))))

      ;; Generates `type-name?` function which checks type.
      (defmacro gen-type-checker (type-name)
        `(def ,(intern (string type-name #\?))
              [eq? (type _) ',type-name]))

      ;; Generates macro which converts
      ;;   (FOOs args...) => (do (FOO arg1) (FOO arg2) ...)
      (defmacro gen-multiple-definitions (macro-name &rest args)
        `(defmacro ,(intern (string macro-name #\s)) (&rest args)
           `(do ,@(map (^(arg)
                         `(,',macro-name ,arg))
                       args))))

      (values))  ; Empty result.
;; Need to split, because any expressions are evaluted from tail to top...
;; TODO: Evaluate macro definition from top to tail.
#.(do (gen-multiple-definitions gen-cxxr)
      (gen-multiple-definitions gen-type-checker)

      (values))  ; Empty result.

(gen-cxxrs caar cdar cadr cddr
           cadar caddr cdddr
           cadddr cddddr
           caddddr cdddddr)

(gen-type-checkers int pair symbol string flonum)

(defun any? (f ls)
  (if (pair? ls)
      (if (f (car ls))
          ls
        (any? f (cdr ls)))
    nil))

(defun all? (fn ls)
  (if ls
      (if (fn (car ls))
          (all? fn (cdr ls))
        nil)
    t))

(defun map (f ls &rest rest)
  (if rest
      ;; mapn
      (alet ((lss (cons ls rest))
             (acc '()))
        (if (any? not lss)
            (reverse! acc)
          (loop (map cdr lss)
                (cons (apply f (map car lss))
                      acc))))
    ;; map1
    (alet ((ls ls)
           (acc '()))
      (if (pair? ls)
          (loop (cdr ls)
                (cons (f (car ls)) acc))
        (let1 result (reverse! acc)
          (if ls
              (if acc
                  (do (set-cdr! acc (f ls))
                      result)
                (f ls))
            result))))))

(defmacro do (&body body)
  `((^() ,@body)))

(defmacro when (test &body body)
  `(if ,test (do ,@body)))

(defmacro unless (test &body body)
  `(if ,test (do) (do ,@body)))

(defmacro set! (var val &rest rest)
  (if rest
      `(do (set! ,var ,val)
           (set! ,@rest))
    `(set! ,var ,val)))

(defmacro and (&rest args)
  (if args
      (if (cdr args)
          `(if ,(car args)
               (and ,@(cdr args))
             'nil)
        (car args))
    't))  ; (and) = true

(defmacro let1 (var val &body body)
  `((^(,var) ,@body) ,val))

(defmacro let (parms &body body)
  (if (and (symbol? parms)
           parms)
      ;; Named let.
      (let ((name parms)
            (parms (car body))
            (body (cdr body)))
        `(let1 ,name nil
           (set! ,name (^ ,(map car parms)
                          ,@body))
           (,name ,@(map cadr parms))))
    `((^ ,(map car parms)
         ,@body)
      ,@(map [do (when (and (pair? _)
                            (not (single? (cdr _))))
                   (compile-error "malformed let: %@" _))
                 (cadr _)] parms))))

(defmacro let* (parms &body body)
  (if parms
      `(let1 ,@(car parms)
         (let* ,(cdr parms) ,@body))
    `(do ,@body)))

;; Anapholic-let macro.
;; Like let macro, but captures "loop" variable to make loop syntax.
;; This is similar to named-let syntax in Scheme.
(defmacro alet (parms &body body)
  `(let loop ,parms ,@body))

(defun cond-template (clauses f)
  (if clauses
      (let ((clause (car clauses))
            (next (cdr clauses)))
        (let ((pred (car clause))
              (body (cdr clause)))
          (if (eq? pred 't)
              (if next
                  (compile-error "else clause must comes at last in cond")
                `(do ,@body))
            (f pred body next))))
    nil))

(defmacro cond (&rest clauses)
  (cond-template clauses
                 (^(pred body next)
                   `(if ,pred
                        (do ,@body)
                      (cond ,@next)))))

(defmacro acond (&rest clauses)
  (cond-template clauses
                 (^(pred body next)
                   (let-gensym sym
                     `(let1 ,sym ,pred
                        (if ,sym
                            (let1 it ,sym ,@body)
                          (acond ,@next)))))))

(defmacro aif (expr &rest rest)
  `(let1 it ,expr
     (if it ,@rest)))

(defmacro awhen (expr &body body)
  `(aif ,expr
     (do ,@body)))

(defmacro let-gensym (names &body body)
  (if (pair? names)
      ;; (let-gensym (a b c) ...) => (let ((a (gensym)) (b (gensym)) (c (gensym)) ...)
      `(let ,(map [list _ '(gensym)]
                  names)
         ,@body)
    ;; (let-gensym a ...) => (let1 a (gensym) ...)
    `(let1 ,names (gensym) ,@body)))

(defmacro while (test &body body)
  (let-gensym next
    `(let ,next ()
       (when ,test
         ,@body
         (,next)))))

(defmacro awhile (test &body body)
  (let-gensym next
    `(let ,next ()
       (awhen ,test
         ,@body
         (,next)))))

(defmacro until (test &body body)
  (let-gensym next
    `(let ,next ()
       (unless ,test
         ,@body
         (,next)))))

(defmacro or (&rest args)
  (and args
       (let-gensym g
         `(let1 ,g ,(car args)
            (if ,g ,g (or ,@(cdr args)))))))

(defmacro case (expr &rest args)
  (let-gensym var
    `(let1 ,var ,expr
       (cond ,@(map (^(clause)
                      (let ((value (car clause))
                            (body (cdr clause)))
                        (cond ((eq? value 't)
                               clause)
                              ((pair? value)
                               `((member ,var ',value)
                                 ,@body))
                              (t
                               `((eq? ,var ',value)
                                 ,@body)))))
                    args)))))

(defmacro dolist (vars &body body)
  (let ((x (car vars))
        (ls (cadr vars)))
    (let-gensym (p next)
      `(let ,next ((,p ,ls))
         (when (pair? ,p)
           (let1 ,x (car ,p)
             ,@body
             (,next (cdr ,p))))))))

(defmacro for0-n (var times &body body)
  (let-gensym (n next)
    `(let1 ,n ,times
       (let ,next ((,var 0))
         (when (< ,var ,n)
           ,@body
           (,next (+ ,var 1)))))))

(defun length (x)
  (case (type x)
    (pair (alet ((x x)
                 (n 0))
            (if (pair? x)
                (loop (cdr x) (+ n 1))
              n)))
    (string (string-length x))
    (vector (vector-length x))
    (t 0)))

;; Returns last pair
(defun last (ls)
  (if (pair? (cdr ls))
      (last (cdr ls))
    ls))

(defun reverse (ls)
  (alet ((ls ls)
         (acc '()))
    (if (pair? ls)
        (loop (cdr ls) (cons (car ls) acc))
      acc)))

(defun maplist (f ls)
  (alet ((ls ls)
         (acc '()))
    (if (pair? ls)
        (loop (cdr ls)
              (cons (f ls) acc))
      (let1 result (reverse! acc)
        (if ls
            (if acc
                (do (set-cdr! acc (f ls))
                    result)
              (f ls))
          result)))))

(defun member (x ls)
  (any? [eq? x _] ls))

(defun assoc (key alist)
  (if alist
      (if (eq? (caar alist) key)
          (car alist)
        (assoc key (cdr alist)))
    nil))

(defun acons (key obj alist)
  (cons (cons key obj) alist))

(defun union (s1 s2)
  (if s1
      (union (cdr s1)
             (let1 x (car s1)
               (if (member x s2)
                   s2
                 (cons x s2))))
    s2))

(defun intersection (s1 s2)
  (if s1
      (if (member (car s1) s2)
          (cons (car s1) (intersection (cdr s1) s2))
        (intersection (cdr s1) s2))
    '()))

(defun single? (ls)
  (and (pair? ls)
       (not (cdr ls))))

;; Reverse list and concatenate tail destructively.
(defun nreconc (ls tail)
  (let1 top (reverse! ls)
    (set-cdr! ls tail)
    top))

;; Write shared structure.
(defun write/ss (s &rest rest)
  (let1 stream (if rest (car rest) *stdout*)
    (write/ss-print s (create-ss-table s) stream)
    s))

;; Construct table which contains object appear index for more than 2 times.
(let1 index-key (gensym)
  (defun create-ss-table (obj)
    (let ((h (table 'eq?))
          ;; Assign index for the object appeared more than 1 time.
          (assign-index (^(h key index-key)
                          (unless (table-get h key)
                            (let1 index (table-get h index-key)
                              (table-put! h key index)
                              (table-put! h index-key (+ 1 index)))))))
      (table-put! h index-key 0)
      (alet ((obj obj))
        (let1 typ (type obj)
          (when (member typ '(pair vector))
            (if (table-exists? h obj)
                (assign-index h obj index-key)
              ;; Put nil for the first appeared object.
              (do (table-put! h obj nil)
                  ;; And check children recursively.
                  (case typ
                    (pair (loop (car obj))
                          (loop (cdr obj)))
                    (vector (for0-n i (length obj)
                                    (loop (vector-get obj i))))))))))
      h)))

(defun write/ss-print (obj h stream)
  (let1 index (table-get h obj)
    (if (and index (< index 0))
        ;; Print structure after second time or later.
        (format stream "#%@#" (- -1 index))
      (do (when index
            ;; Print structure at first time.
            (format stream "#%@=" index)
            (table-put! h obj (- -1 index)))
          (case (type obj)
            (pair (aif (and (single? (cdr obj))
                            (not (table-get h (cdr obj)))
                            (assoc (car obj) '((quote . "'")
                                             (quasiquote . "`")
                                             (unquote . ",")
                                             (unquote-splicing . ",@"))))
                       ;; Write abbreviated form.
                       (do (display (cdr it) stream)
                           (write (cadr obj) stream))
                    (do (alet ((c "(")
                               (ls obj))
                          (when ls
                            (display c stream)
                            (write/ss-print (car ls) h stream)
                            (let1 ds (cdr ls)
                              (if (or (and ds
                                           (not (pair? ds)))
                                      (table-get h ds))
                                  (do (display " . " stream)
                                      (write/ss-print ds h stream))
                                (loop " " ds)))))
                        (display ")" stream))))
            (vector (let1 n (vector-length obj)
                      (alet ((c "#(")
                             (i 0))
                        (when (< i n)
                          (display c stream)
                          (write/ss-print (vector-get obj i) h stream)
                          (loop " " (+ i 1))))
                      (display ")" stream)))
            (t (write obj stream)))))))

;; Take first n elements from the list.
(defun take (n ls)
  (alet ((n n)
         (acc '())
         (ls ls))
    (if (and ls (> n 0))
        (loop (- n 1) (cons (car ls) acc) (cdr ls))
      (reverse! acc))))

;; Drop first n elements from the list (nthcdr).
(defun drop (n ls)
  (if ls
      (if (> n 0)
          (drop (- n 1) (cdr ls))
        ls)))

(defun elt (ls n)
  (car (drop n ls)))

(defun position-if (f seq)
  (alet ((p seq)
         (i 0))
    (if p
        (if (f (car p))
            i
          (loop (cdr p) (+ i 1)))
      nil)))

(defun position (item seq)
  (position-if [eq? _ item] seq))

(defun list? (ls)
  ;; Nil, or not dotted list
  (or (not ls)
      (and (pair? ls)
           (not (cdr (last ls))))))

(defun copy-pair! (dst src)
  (set-car! dst (car src))
  (set-cdr! dst (cdr src)))

(defun remove-if (test seq)
  (alet ((p seq)
         (acc '()))
    (if p
        (loop (cdr p)
              (if (test (car p))
                  acc
                (cons (car p) acc)))
      (reverse! acc))))

(defun remove-if-not (test seq)
  (remove-if [not (test _)] seq))

(defun copy-list (ls)
  (if (pair? ls)
      (cons (copy-list (car ls))
            (copy-list (cdr ls)))
    ls))

(defun bit? (x flag)
  (not (eq? (logand x flag)
            0)))

(defmacro with-open-file (params &rest body)
  (let ((var (car params))
        (file-name (cadr params)))
    `(let1 ,var (open ,file-name)
       (let1 result ,@body
         (close ,var)
         result))))
