;(load-binary "../../boot.bin")
(load "./test.yl")

(test-section "functions")
;; no
(test "no-nil" t (no nil))
(test "no-t" nil (no t))

;; map
(test "map 1" '(1 4 9) (map (^(x) (* x x)) '(1 2 3)))
(test "map 3" '(111 222 333) (map + '(1 2 3) '(10 20 30) '(100 200 300)))

;; cxxr
(test "cadr" 2 (cadr '(1 2 3 4)))
(test "cddr" '(3 4) (cddr '(1 2 3 4)))

;; do
(test "do" 3 (do 1 2 3))

;; when
(test "when t" 3 (when 1 2 3))
(test "when nil" nil (when nil 2 3))

;; unless
(test "unless t" nil (unless 1 2 3))
(test "unless nil" 3 (unless nil 2 3))

;; set!
(test "set!" 2 ((^(x) (set! x 2) x) 1))
(test "set! result" 2 ((^(x) (set! x 2)) 1))
(test "multi set! result" '(3 4) ((^(x y)
                                    (set! x 3
                                          y 4)
                                    (list x y))
                                  1 2))

;; let1
(test "let1" 123 (let1 x 123 x))

;; let
(test "let" 3 (let ((x 1) (y 2)) (+ x y)))

;; let*
(test "let*" 12321 (let* ((x 111) (x (* x x))) x))

;; named let
(test "named let" 15 (let loop ((x 5) (acc 0))
                       (if (> x 0)
                           (loop (- x 1) (+ acc x))
                         acc)))
;; let without parameter
(test "let empty" 123 (let () 123))

;; bracket
(test "[...]" '(1 4 9) (map [* _ _] '(1 2 3)))

;; awith
(test "alet" 55 (alet ((i 10)
                       (acc 0))
                  (if (< i 0)
                      acc
                    (loop (- i 1) (+ acc i)))))

;; aif
(test "aif true" 1 (aif 1 it 2))
(test "aif false" 2 (aif nil it 2))

;; awhile
(test "awhile" 3 (let ((x '(1 2 nil 4 5))
                       (acc 0))
                   (awhile (car x)
                     (set! acc (+ acc it))
                     (set! x (cdr x)))
                   acc))

;; and
(test "and" 3 (and 1 2 3))
(test "and" nil (and 1 nil 3))

;; or
(test "or" 2 (or nil 2 3))
(test "or" nil (or nil nil nil))

;; length
(test "length" 3 (length '(1 2 3)))
(test "length dotted" 3 (length '(1 2 3 . 4)))

;; last
(test "last" '(3) (last '(1 2 3)))
(test "last dotted" '(3 . 4) (last '(1 2 3 . 4)))

;; reverse
(test "reverse" '(3 2 1) (reverse '(1 2 3)))
(test "reverse dotted" '(3 2 1) (reverse '(1 2 3 . 4)))

;; any?
(test "any?" '(x 3) (any? symbol? '(1 x 3)))
(test "any? fail" nil (any? symbol? '(1 2 3)))

;; assoc
(test "assoc" '(b . 2) (assoc 'b '((a . 1) (b . 2) (c . 3))))
(test "assoc-fail" nil (assoc 'x '((a . 1) (b . 2) (c . 3))))

;; acons
(test "acons" '((1 . ONE) (2 . TWO)) (acons 1 'ONE (acons 2 'TWO '())))

;; member
(test "member" '(y z) (member 'y '(x y z)))
(test "member fail" nil (member 'a '(x y z)))

;; union
(test "union" '(c a b d x) (union '(a b c) '(b d x)))

;; intersection
(test "intersect" '(b d) (intersection '(a b c d) '(b d x)))

(test-complete)
