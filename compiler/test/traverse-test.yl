;(load-binary "../../boot.bin")
(load "./test.yl")

(test-section "find-free")
(test "check-parameters" '(x y z) (check-parameters '(x y z)))
(test "check-parameters-rest" '(x y z) (check-parameters '(x y &rest z)))

(test-section "macroexpand")
(test "macroexpand-1" '(x y . z) (macroexpand-1 '(x y . z)))

(test-section "direct-invoke?")
(test "direct-invoke?" t (direct-invoke? '(^(x y))))
(test "direct-invoke?-false" nil (direct-invoke? 'func))

(test-section "scope")
(test "merge-scope-sets" '((y 2) (x 1 3) (z 4)) (merge-scope-sets '((x 1) (y 2)) '((x 3) (z 4))))
(let ((scope (create-scope '(x) nil)))
  (register-set! 'x 1 scope)
  (register-set! 'y 2 scope)
  (register-set! 'x 3 scope)
  (test "register-set!" '((y 2) (x 3 1)) (scope-sets scope)))
(let* ((outer-scope (create-scope '(x) nil))
       (inner-scope (create-scope '(y) outer-scope)))
  (register-set! 'x 1 inner-scope)
  (register-set! 'y 2 inner-scope)
  (propagate-scope-sets outer-scope inner-scope (scope-local inner-scope))
  (test "propagate-scope-sets to-outer" '((x 1)) (scope-sets outer-scope)))
(let* ((outer-scope (create-scope '(x) nil))
       (inner-scope (create-scope '(y) outer-scope)))
  (register-set! 'x 1 outer-scope)
  (register-set! 'y 2 outer-scope)
  (propagate-scope-sets inner-scope outer-scope (scope-local inner-scope))
  (test "propagate-scope-sets to-inner" '((x 1)) (scope-sets inner-scope)))
(let* ((outer-scope (create-scope '(x) nil))
       (inner-scope (create-scope '(y) outer-scope)))
  (register-fref 'x inner-scope)
  (register-fref 'z inner-scope)
  (propagate-scope inner-scope (scope-local inner-scope) outer-scope)
  (test "propagate-scope" '(z) (scope-frees outer-scope)))

(test-complete)
