;(load-binary "../../boot.bin")
(load "./test.yl")

(defun alist->table (alist)
  (let1 ht (table)
    (dolist (kv alist)
      (table-put! ht (car kv) (cdr kv)))
    ht))

(defun table->alist (ht)
  (map (^(key) (cons key (table-get ht key)))
       (table-keys ht)))

(test-section "find-free")
(test "check-parameters" '(x y z) (check-parameters '(x y z)))
(test "check-parameters-rest" '(x y z) (check-parameters '(x y &rest z)))

(test-section "macroexpand")
(test "macroexpand-1" '(x y . z) (macroexpand-1 '(x y . z)))

(test-section "direct-invoke?")
(test "direct-invoke?" t (direct-invoke? '(^(x y))))
(test "direct-invoke?-false" nil (direct-invoke? 'func))

(test-section "scope")
;(test "append-scope-sets!" '((z 4) (y 2) (x 1 3)) (let1 ht (alist->table '((x 3) (z 4)))
;                                                    (append-scope-sets! ht 'x '(1))
;                                                    (append-scope-sets! ht 'y '(2))
;                                                    (table->alist ht)))
;(let ((scope (create-scope '(x) nil)))
;  (register-set! scope 'x 1)
;  (register-set! scope 'y 2)
;  (register-set! scope 'x 3)
;  (test "register-set!" '((y 2) (x 3 1)) (table->alist (scope-sets scope))))
;(let* ((outer-scope (create-scope '(x) nil))
;       (inner-scope (create-scope '(y) outer-scope)))
;  (register-set! inner-scope 'x 1)
;  (register-set! inner-scope 'y 2)
;  (propagate-scope-sets outer-scope inner-scope (scope-local inner-scope))
;  (test "propagate-scope-sets to-outer" '((x 1)) (table->alist (scope-sets outer-scope))))
;(let* ((outer-scope (create-scope '(x) nil))
;       (inner-scope (create-scope '(y) outer-scope)))
;  (register-set! outer-scope 'x 1)
;  (register-set! outer-scope 'y 2)
;  (propagate-scope-sets inner-scope outer-scope (scope-local inner-scope))
;  (test "propagate-scope-sets to-inner" '((x 1)) (table->alist (scope-sets inner-scope))))
(let* ((outer-scope (create-scope '(x) nil))
       (inner-scope (create-scope '(y) outer-scope)))
  (register-fref inner-scope 'x)
  (register-fref inner-scope 'z)
  (propagate-scope-to-upper outer-scope inner-scope (scope-local inner-scope))
  (test "propagate-scope-to-upper" '(z) (scope-frees outer-scope)))

(test-section "loop")
(test "nested loop with free variable" 456
      (let1 h 123
        (let recur ((code '(FRAME (HALT) HALT)))
             h  ; <- needed for make h free variable.
             (alet ((c code))
               (if c
                   (do (when (pair? (car c))
                         (recur (car c)))
                       (loop (cdr c)))
                 456)))))
(test "set after call" 2
      ((^(f)
         (let1 x (f)
           (set! f (^() 1))
           x))
       (^() 2)))
(test "set in lambda but not called" -1
      (let1 n 10
        ((^(loop)
           (let1 f (^() (set! loop (^(i acc)
                                     (if (<= i n)
                                         (loop (+ i 1) (+ acc i))
                                       acc))))
             (loop 0 0)))
         (^(i acc) -1))))

(test-complete)
