;(load-binary "../../boot.bin")
(load "./test.yl")

(test-section "find-free")
(test "check-parameters" '(x y z) (check-parameters '(x y z)))
(test "check-parameters-rest" '(x y z) (check-parameters '(x y &rest z)))
(test "check-parameters-body" '(x y z) (check-parameters '(x y &body z)))

(test-section "macroexpand")
(test "macroexpand-1" '(x y . z) (macroexpand-1 '(x y . z)))

(test-section "lambda-expression?")
(test "lambda-expression?" t (lambda-expression? '(^(x y))))
(test "lambda-expression?-false" nil (lambda-expression? 'func))

(test-section "embed function")
(test "shadow embed function with local" '(1 . 2)
      (let1 + (^(x y) (cons x y))
        (+ 1 2)))
(test "shadow embed function with free" '((1 2))
      (let1 car [list _]
        (let1 f (^(x) (car x))
          (f '(1 2)))))

(test-section "loop")
(test "tail recursion is loop" 55
      (let1 n 10
        (alet ((i 0)
               (acc 0))
          (if (<= i n)
              (loop (+ i 1) (+ acc i))
            acc))))
(test "non tail recursion is not loop" 55
      (let1 n 10
        (alet ((i 0))
          (if (<= i n)
              (+ i (loop (+ i 1)))
            0))))
(test "non tail loop start is loop" 55
      (let1 n 10
        (+ 0 (alet ((i 0)
                    (acc 0))
               (if (<= i n)
                   (loop (+ i 1) (+ acc i))
                 acc)))))
(test "call from outside of self scope is not loop" 55
      (let1 n 10
        (alet ((i 0)
               (acc 0))
          (let1 f (^(i acc) (loop i acc))
            (if (<= i n)
                (f (+ i 1) (+ acc i))
              acc)))))
(test "set after call" 2
      ((^(f)
         (let1 x (f)
           (set! f (^() 1))
           x))
       (^() 2)))
(test "set in lambda but not called" -1
      (let1 n 10
        ((^(loop)
           (let1 f (^() (set! loop (^(i acc)
                                     (if (<= i n)
                                         (loop (+ i 1) (+ acc i))
                                       acc))))
             (loop 0 0)))
         (^(i acc) -1))))
(test "nested loop with free variable" 456
      (let1 h 123
        (let recur ((code '(FRAME (HALT) HALT)))
             h  ; <- needed for make h free variable.
             (alet ((c code))
               (if c
                   (do (when (pair? (car c))
                         (recur (car c)))
                       (loop (cdr c)))
                 456)))))
(test "use set result" 55
      (let1 n 10
        ((^(loop)
           ((set! loop (^(i acc)
                         (if (<= i n)
                             (loop (+ i 1) (+ acc i))
                           acc)))
            0 0))
         nil)))
(test "replace scope for receive values" '((+ 456) (+ 456))
      (let1 exp '(123 + 456)
        (alet ((subexp (cdr exp)))  ;; <= Needed alet, not let
          (receive (subexp2)
                   (when t  ;; <= Needed
                     (values subexp))
            (list subexp2 subexp)))))
(test "replace scope for invoke args" '(+ -)
      ((let ((ops '(+ -))
             (func 999))
         (^(exp)
           func
           (receive (lval subexp)
                    (values (car exp) (cdr exp))
             (alet ((subexp2 subexp))
               (aif (let1 op (car subexp2)
                      ops)
                    it
                 nil)))))
       '(123 + 456)))

(test-section "call/cc")
(test "free variable" 123
      (let1 x 123
        (call/cc
         (^(cc)
           (cc x)))))
(test "set! call/cc var" 12321
      (call/cc
       (^(cc)
         (set! cc (^(x) (* x x)))
         (cc 111))))
(test "direct jump" '(nil 4 5)
      (call/cc
       (^(break)
         (alet ((ls '(1 2 nil 4 5))
                (acc 0))
           (if ls
               (do (unless (int? (car ls))
                     (break ls))
                   (loop (cdr ls)
                         (+ acc (car ls))))
             acc)))))
(test "frame, conti and loop" (+ 123 15)
      (let1 x 123  ;; For expand frame.
        (+ (call/cc
            (^(break)
              (alet ((ls '(1 2 3 4 5))
                     (acc 0))
                (if ls
                    (do (unless (int? (car ls))
                          (break ls))
                        (loop (cdr ls) (+ (car ls) acc)))
                  acc))))
           x)))

(test-complete)
