#.(do (load "compiler/opcodes.yl")
      (define-opcode-symbols)
      (values))

(def instructions
    `((,#.PUSH $next)
      (,#.LREF (n . $next))
      (,#.GREF (sym . $next))
      (,#.FRAME ($cont . $ret))
      (,#.APPLY (n))
      (,#.CONST (v . $next))
      (,#.LOCAL (offset . $next))
      (,#.TEST ($then . $else))
      (,#.TAPPLY (n))
      (,#.CLOSE (nparam nfree $body . $next))
      (,#.HALT ())
      (,#.VOID $next)
      (,#.FREF (n . $next))
      (,#.LSET (n . $next))
      (,#.FSET (n . $next))
      (,#.GSET (sym . $next))
      (,#.DEF (sym . $next))
      (,#.RET ())
      (,#.UNFRAME ())
      (,#.LOOP (offset n . $next))
      (,#.BOX (n . $next))
      (,#.UNBOX $next)
      (,#.CONTI (tail . $next))
      (,#.SETJMP (offset $body . $next))
      (,#.LONGJMP ())
      (,#.MACRO (name nparam nfree $body . $next))
      (,#.ADDSP (n . $next))
      (,#.VALS (n . $next))
      (,#.RECV (offset n . $next))
      (,#.NIL $next)
      (,#.CAR $next)
      (,#.CDR $next)
      (,#.ADD (n . $next))
      (,#.SUB (n . $next))
      (,#.NEG $next)
      (,#.MUL (n . $next))
      (,#.DIV (n . $next))
      (,#.INV $next)
      (,#.EQ $next)
      (,#.LT (n . $next))
      (,#.LE (n . $next))
      (,#.GT (n . $next))
      (,#.GE (n . $next))
      ))

(def *opcode-table* (table))
(dolist (inst instructions)
  (table-put! *opcode-table* (car inst)
              (map [eq? (char-at (string _) 0) #\$]
                   (cadr inst))))

(defun vm-walker (code f)
  (let1 h (create-ss-table code)
    (let recur ((code code))
      (let1 index (table-get h code)
        (when (or (not index) (>= index 0))
          (table-put! h code -1)
          (let1 op (car code)
            (aif (f code recur)
                 (recur it)
              (alet ((p (table-get *opcode-table* op))
                     (c (cdr code)))
                (if (pair? p)
                    (do (when (car p)
                          (recur (car c)))
                        (loop (cdr p) (cdr c)))
                  (when p
                    (recur c)))))))))))
