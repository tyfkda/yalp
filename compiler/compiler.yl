;; Yalp traversal compiler

; Stack usage:
;    c   ... closure
;    s   ... stack pointer
;    f   ... frame pointer (stack index)
;    ret ... next code
;
; * Initial
;   f = s = 0
;
; * Function call
;   1. Use FRAME opcode to create new frame on stack:
;     f[c][f][ret]s
;   2. Push function arguments to stack on reverse order:
;     f[c][f][ret][a3][a2][a1]s
;   3. Use APPLY opcode to apply function,
;      then argument number is pushed to stack:
;     [c][f][ret][a3][a2][a1]f[argnum]s
;
; * Return
;   1. Get called argument number from stack:
;     [c][f][ret][a3][a2][a1]f
;   2. Put back previous frame:
;     f = s = 0
; * Shift
;   1. Put next function arguments:
;     [c][f][ret][a3][a2][a1]f[argnum][b1]s
;   2. Use SHIFT opcode to remove previous function arguments:
;     [c][f][ret][b1]s
;   4. Use APPLY opcode to apply function,
;      then argument number is pushed to stack:
;     [c][f][ret][b1]f[argnum]s

;(load "./boot.yl")
;(load "./util.yl")

;;;;

(def VAR-ARG 1)              ; is used for argument (or return value).
(def VAR-FREE 2)             ; is captured for free variable.
(def VAR-SET 4)              ; is set.
(def VAR-SELF-TAIL-RECUR 8)  ; is used for function for self tail recursion.
(def VAR-CALL-IN-BASE1 16)   ; is used for function in base position.
(def VAR-CALL-IN-BASE2 32)   ; is used for function in base position, more than 1 time.
(def VAR-CALL-OTHER 64)      ; is used for function.

;; Traverses lisp code and generate intermediate AST.
;;   x : code to be compiled.
;;   scope : code scope.
;;   tail : whether this node is at tail position.
;;   @result : AST.
(defun traverse (x scope tail)
  (cond ((symbol? x)
         (add-var-info scope x VAR-ARG)
         (traverse-refer x scope))
        ((pair? x)
         (let1 expanded (expand-macro x scope)
           (if (pair? expanded)
               (traverse-list expanded scope tail)
             (traverse expanded scope tail))))
        (t (list ':CONST x))))

(defun traverse-list (x scope tail)
  (record-case x
               ;; Special forms.
               (quote (obj) (list ':CONST obj))
               (^ (vars &body body)
                  (traverse-lambda vars body scope))
               (if (test then &rest rest)
                   (traverse-if test then rest scope tail))
               (set! (var val)
                     (traverse-set! var val scope))
               (def (var val)
                    (traverse-def var val scope))
               (call/cc (func)
                        (traverse-call/cc func scope tail))
               (defmacro (name vars &body body)
                 (traverse-defmacro name vars body scope))
               (values (&rest args)
                       (traverse-values args scope tail))
               (receive (vars vals &body body)
                        (traverse-receive vars vals body scope tail))
               ;; Other: normal forms.
               (t (let ((func (car x))
                        (args (cdr x)))
                    (cond ((direct-invoke? func)
                           (traverse-apply-direct (cadr func) (cddr func) args scope tail))
                          ((inline-function? func)
                           (traverse-inline-apply func args scope))
                          (t (traverse-apply func args scope tail)))))))

(defun traverse-refer (x scope)
  (when (and (not (scope-local-has? scope x))
             (scope-upper-vars-has? scope x))  ; Free variable
    (register-fref scope x))
  (list ':REF x))

(defun traverse-set! (var val scope)
  (unless (symbol? var)
    (compile-error "`set!` requires symbol, but `%@`" var))
  (let ((is-local (scope-local-has? scope var))
        (is-free (scope-upper-vars-has? scope var)))
    (when (and (not is-local) is-free)
      (register-fref scope var))

    (if (lambda-expression? val)
        ;; Set lambda expression: Need to register lambda node before compiling
        ;; its body to detect self recursion.
        (let ((vars (cadr val))
              (body (cddr val)))
          (let1 lambda-node (prepare-lambda-node vars body scope)
            (when (or is-local is-free)
              (register-set! scope var lambda-node))
            (traverse-lambda-exec lambda-node body scope)
            (list ':SET var lambda-node)))
      ;; Otherwise, do normal registration.
      (let ((val-node (traverse val scope nil)))
        (when (or is-local is-free)
          (register-set! scope var val-node))
        (list ':SET var val-node)))))

(defun traverse-def (var val scope)
  (unless (symbol? var)
    (compile-error "`def` requires symbol, but `%@`" var))
  (when (and (inline-function? var)
             (lambda-expression? val))
    (register-inline-function var val))
  (let1 val-node (traverse val scope nil)
    (register-set! scope var val-node)
    (list ':DEF var val-node)))

(defun traverse-if (test then rest scope tail)
  (when (and rest (cdr rest))
    (compile-error "malformed if"))
  (list ':IF (traverse test scope nil)
        (traverse then scope tail)
        (if rest
            (traverse (car rest) scope tail)
          '(:VOID))))

(defun traverse-call/cc (func scope tail)
  (list ':CONTI (traverse func scope tail)))

(defun prepare-lambda-node (vars body scope)
  (let ((proper-vars (check-parameters vars))
        (body-node (cons nil nil)))
    (let ((inner-scope (create-scope proper-vars scope))
          (varnum (if (eq? vars proper-vars)
                      (length vars)
                    (list (- (length proper-vars) 1)
                          -1))))
      (create-lambda-node inner-scope proper-vars varnum body-node))))

(defun traverse-lambda-exec (lambda-node body scope)
  (let ((inner-scope (lambda-scope-get lambda-node))
        (proper-vars (lambda-vars-get lambda-node))
        (tmp-body-node (lambda-body-node-get lambda-node)))
    (copy-pair! tmp-body-node (traverse-body body inner-scope t))
    ;; Propagate to upper scope
    (propagate-scope-to-upper scope inner-scope proper-vars)
    lambda-node))

(defun traverse-lambda (vars body scope)
  (traverse-lambda-exec (prepare-lambda-node vars body scope)
                        body scope))

(defun traverse-body (body scope tail)
  (maplist [traverse (car _) scope (and (not (cdr _))
                                        tail)]
           body))

(defun upper-scope-id-is? (scope expected-id)
  (let1 id (scope-id scope)
    (alet ((pscope scope))
      (if pscope
          (let1 pid (scope-id pscope)
            (if (eq? pid id)
                (loop (scope-outer-scope pscope))
              (eq? pid expected-id)))
        nil))))

(defun detect-call-type (func-name calling-scope tail)
  (let1 sets (var-is-set? calling-scope func-name)
    (if (and sets
             (single? sets)
             (lambda-node? (car sets)))
        (cond ((scope-local-has? calling-scope func-name)
               (if (var-has-attr? calling-scope func-name VAR-CALL-IN-BASE1)
                   VAR-CALL-IN-BASE2
                 VAR-CALL-IN-BASE1))
              (tail
               (receive (_ defined-scope)
                        (get-var-info calling-scope func-name)
                 (if (upper-scope-id-is? calling-scope
                                         (scope-id defined-scope))
                     VAR-SELF-TAIL-RECUR
                   VAR-CALL-OTHER)))
              (t VAR-CALL-OTHER))
      VAR-CALL-OTHER)))

(defun traverse-apply (func args scope tail)
  (let ((call-type (detect-call-type func scope tail))
        (func-node (if (symbol? func)
                       (traverse-refer func scope)
                     (traverse func scope nil))))
    (add-var-info scope func call-type)
    (list ':APPLY
          call-type
          func-node
          (map [traverse _ scope nil] args))))

(defun traverse-inline-apply (sym args scope tail)
  (let1 lambda (get-inline-function-body sym)
    (traverse `(,lambda ,@args)
              scope tail)))

(defun traverse-apply-direct (vars body args scope tail)
  (let1 proper-vars (check-parameters vars)
    (let ((argnum (length args))
          (varnum (- (length proper-vars)
                     (if (eq? proper-vars vars) 0 1))))
      (if (not (eq? vars proper-vars))  ;; Has rest param.
          ;; Tweak arguments.
          (cond ((< argnum varnum)  ;; Error handled in the below.
                 (traverse-apply-direct proper-vars body args scope tail))
                ;; ((^(x y &rest z) ...) 1 2 3 4) => ((^(x y z) ...) 1 2 (list 3 4))
                ((> argnum varnum)
                 (traverse `((^ ,proper-vars ,@body)
                             ,@(take varnum args)
                             (list ,@(drop varnum args)))
                           scope tail))
                ;; ((^(x y &rest z) ...) 1 2) => ((^(x y z) ...) 1 2 '())
                (t (traverse-apply-direct proper-vars body (append args '(()))
                                          scope tail)))
        (if (eq? argnum varnum)
            (let1 args-node (map [traverse _ scope nil]
                                 args)
              (let* ((expanded-scope (expand-scope proper-vars scope))
                     (body-node (traverse-body body expanded-scope tail)))
                (propagate-scope-to-upper scope expanded-scope proper-vars)
                ;; Returns lambda node
                (list ':INVOKE
                      expanded-scope
                      proper-vars
                      args-node
                      body-node)))
          (let1 which (if (< argnum varnum) "few" "many")
            (compile-error "Too %@ arguments, %@ for %@" which argnum varnum)))))))

(defun traverse-defmacro (name vars body scope)
  (let* ((proper-vars (check-parameters vars))
         (inner-scope (create-scope proper-vars scope))
         (body-node (traverse-body body inner-scope t)))
    (let1 varnum (if (eq? vars proper-vars)
                     (length vars)
                   (list (- (length proper-vars) 1)
                         -1))
      (propagate-scope-to-upper scope inner-scope (scope-local inner-scope))
      ;; Returns macro node
      (list ':MACRO
            inner-scope
            name
            varnum
            body-node))))

(defun traverse-values (args scope tail)
  (list ':VALS (maplist [traverse (car _) scope (and (cdr args)
                                                     tail)]
                        args)))

(defun traverse-receive (vars vals body scope tail)
  (let1 proper-vars (check-parameters vars)
    (let ((varnum (if (eq? vars proper-vars)
                      (length vars)
                    (list (- (length proper-vars) 1)
                          -1)))
          (val-node (traverse vals scope nil)))
      (let* ((expanded-scope (expand-scope proper-vars scope))
             (body-node (traverse-body body expanded-scope tail)))
        (propagate-scope-to-upper scope expanded-scope proper-vars)
        ;; Returns receive node
        (list ':RECV
              expanded-scope
              proper-vars
              varnum
              val-node
              body-node)))))

;; Check function parameters are valid and returns proper vars.
(defun check-parameters (vars)
  (unless (list? vars)
    (compile-error "parameters must be list, but %@" vars))
  (let1 proper-vars (aif (position-if [or (eq? _ '&rest) (eq? _ '&body)] vars)
                         (let ((required (take it vars))
                               (rest (drop (+ it 1) vars)))
                           (unless (single? rest)
                             (compile-error "&rest requires only 1 name, but %@" rest))
                           (append! required rest))
                      vars)
    (awhen (any? [not (symbol? _)] vars)
      (compile-error "parameter must be symbol, but `%@`" (car it)))
    (alet ((p proper-vars))
      (when p
        (when (member (car p) (cdr p))
          (compile-error "Duplicated parameter `%@`" (car p)))
        (loop (cdr p))))
    proper-vars))

(defun direct-invoke? (func)
  (and (pair? func)
       (eq? '^ (car func))))

(defun expand-macro (x scope)
  (let1 f (car x)
    (if (or (not (symbol? f))
            (scope-local-has? scope f)
            (scope-upper-vars-has? scope f))
        x
      (macroexpand x))))

(defun macroexpand (exp)
  (let1 expanded (macroexpand-1 exp)
    (if (equal? expanded exp)
        exp
      (macroexpand expanded))))

;;;;
;; Scope
;;   var-info: #0=var-info, #1=set-value

(defun create-scope (local-vars outer-scope)
  (let ((scope-id (gensym))
        (infos (map (^(_) (vector 0 nil)) local-vars)))
    (vector local-vars
            infos
            '()
            scope-id
            outer-scope)))

(defun expand-scope (local oscope)
  (expand-scope2 local
                 (map [vector 0 nil] local)
                 oscope))

(defun expand-scope2 (local infos oscope)
  (let ((expanded-vars (append local (scope-local oscope)))
        (expanded-var-infos (append infos (scope-local-info oscope))))
    (vector expanded-vars
            expanded-var-infos
            (scope-frees oscope)
            (scope-id oscope)
            oscope)))

(defun scope-local (scope)        (vector-get scope 0))
(defun scope-local-info (scope)   (vector-get scope 1))
(defun scope-frees (scope)        (vector-get scope 2))
(defun scope-id (scope)           (vector-get scope 3))
(defun scope-outer-scope (scope)  (vector-get scope 4))

(defun scope-frees-set! (scope v) (vector-set! scope 2 v))

;; Returns index if the scope has the symbol.
(defun scope-local-has? (scope sym)  (position sym (scope-local scope)))
(defun scope-upper-vars-has? (scope sym)
  (alet ((pscope (scope-outer-scope scope)))
    (if pscope
        (aif (scope-local-has? pscope sym)
             it
          (loop (scope-outer-scope pscope)))
      nil)))

(defun propagate-scope-to-upper (scope inner-scope vars)
  (when scope
    (scope-frees-set! scope
                      (union (scope-frees scope)
                             (set-minus (scope-frees inner-scope) (scope-local scope))))))

(defun get-var-info (scope var)
  (if (symbol? var)
      (alet ((pscope scope))
        (if pscope
            (aif (scope-local-has? pscope var)
                 (values (elt (scope-local-info pscope) it)
                         pscope)
              (loop (scope-outer-scope pscope)))
          (values nil nil)))
    (values nil nil)))

(defun add-var-info (scope var val)
  (receive (info _)
           (get-var-info scope var)
    (when info
      (vector-set! info 0 (logior (vector-get info 0)
                                  val))
      info)))

(defun var-has-attr? (scope var flag)
  (receive (info _)
           (get-var-info scope var)
    (and info
         (bit? (vector-get info 0) flag)
         info)))

(defun var-is-set? (scope sym)
  (aif (var-has-attr? scope sym VAR-SET)
       (vector-get it 1)
    nil))

;; Registers free variable into scope and returns its index number.
(defun register-fref (scope x)
  (add-var-info scope x VAR-FREE)
  (let1 frees (scope-frees scope)
    (if frees
        (aif (position x frees)
             it
          (let1 index (length frees)
            (set-cdr! (last frees) (cons x nil))
            index))
      (do (scope-frees-set! scope (cons x nil))
          0))))

(defun register-set! (scope x v)
  (add-var-info scope x VAR-SET)
  (receive (info defined-scope)
           (get-var-info scope x)
    (if info
        (let1 val (if (eq? (scope-id defined-scope)
                           (scope-id scope))
                      v   ;; Keep value only when set! is on same scope with variable defined scope.
                    nil)  ;; Otherwise, use dummy value.
          (vector-set! info 1 (cons val (vector-get info 1)))))))

;;;;
;; Lambda node

(defun create-lambda-node (scope proper-vars varnum body-node)
  (list ':LAMBDA
        scope
        (cons nil nil)  ; body-slot
        proper-vars
        varnum
        body-node))

(defun lambda-node? (node)
  (eq? (car node) ':LAMBDA))

(def lambda-scope-get      cadr)
(def lambda-body-slot-get  caddr)
(def lambda-vars-get       cadddr)
(def lambda-varnum-get     caddddr)
(defun lambda-body-node-get (node)  (elt node 5))

(defun lambda-scope-set! (node scope)
  (set-car! (cdr node) scope))

;;;;

(defun compile-recur (node scope next)
  (record-case node
               (:CONST (x)
                       (list* 'CONST x next))
               (:VOID ()
                      (list* 'VOID next))
               (:REF (sym)
                     (receive (op i)
                              (acond ((scope-local-has? scope sym)
                                      (values 'LREF it))
                                     ((position sym (scope-frees scope))
                                      (values 'FREF it))
                                     (t (values 'GREF sym)))
                       (list* op i
                              (if (and (not (eq? op 'GREF))
                                       (var-is-set? scope sym))
                                  (list* 'UNBOX next)
                                next))))
               (:SET (var val)
                     (compile-set! var val scope next))
               (:DEF (var val)
                     (compile-recur val scope
                                    (list* 'DEF var next)))
               (:IF (test then else)
                    (compile-recur test scope
                                   (list* 'TEST
                                          (compile-recur then scope next)
                                          (compile-recur else scope next))))
               (:LAMBDA (inner-scope body-slot proper-vars varnum body)
                        (let ((frees (scope-frees inner-scope)))
                          ;; Set compiled body code to body-slot.
                          (copy-pair! body-slot
                                      (compile-body (scope-local inner-scope) body inner-scope (list 'RET)))
                          (collect-free frees scope
                                        (list* 'CLOSE varnum (length frees)
                                               body-slot
                                               next))))
               (:INVOKE (expanded-scope proper-vars args-node body)
                        (let ((tail (tail? next))
                              (vars (scope-local expanded-scope))
                              (frees (scope-frees expanded-scope)))
                          (compile-args args-node scope
                                        (if proper-vars
                                            (let1 varnum (length proper-vars)
                                              (list* 'EXPND varnum
                                                     (compile-body proper-vars body expanded-scope
                                                                   (if tail
                                                                       next
                                                                     (list* 'SHRNK varnum next)))))
                                          (compile-body '() body expanded-scope next)))))
               (:MACRO (inner-scope name varnum body)
                       (let ((vars (scope-local inner-scope))
                             (frees (scope-frees inner-scope)))
                         (collect-free frees scope
                                       (list* 'MACRO name varnum (length frees)
                                              (compile-body (scope-local inner-scope) body inner-scope (list 'RET))
                                              next))))
               (:APPLY (call-type f args)
                       (compile-apply f args call-type scope next))
               (:CONTI (func)
                       (let* ((tail (tail? next))
                              (c (list* 'CONTI tail
                                        'PUSH
                                        (compile-recur func scope
                                                       (if tail
                                                           '(TAPPLY 1)  ;(SHIFT 1 APPLY 1)
                                                         '(APPLY 1))))))
                         (if tail
                             c
                           (list* 'FRAME c next))))
               (:VALS (args)
                      (let1 argnum (length args)
                        (if (eq? argnum 0)
                            (list* 'VOID next)
                          (compile-args args scope
                                        (list* 'VALS argnum next)))))
               (:RECV (expanded-scope proper-vars varnum vals body)
                      (let ((tail (tail? next))
                            (frees (scope-frees expanded-scope)))
                        (compile-recur vals scope
                                       (list* 'RECV varnum
                                              (compile-body (scope-local expanded-scope) body expanded-scope
                                                            (if tail
                                                                next
                                                              (list* 'SHRNK (if (pair? varnum)
                                                                                (+ (car varnum) 1)
                                                                              varnum)
                                                                     next)))))))
               (t (compile-error "Unknown [%@]" node))))

(defun can-eliminate-lambda-node? (scope func-name)
  (receive (info _)
           (get-var-info scope func-name)
    (and info
         (let1 type (vector-get info 0)
           (and (not (bit? type (logior VAR-ARG
                                        VAR-CALL-OTHER
                                        VAR-CALL-IN-BASE2)))
                (bit? type VAR-CALL-IN-BASE1))))))

(defun reexpand-scope! (expanded-scope proper-vars outer-scope)
  (let ((expanded-vars (append proper-vars (scope-local outer-scope)))
        (expanded-var-infos (append (take (length proper-vars) (scope-local-info expanded-scope))
                                    (scope-local-info outer-scope)))
        (frees (scope-frees expanded-scope)))
    (copy-pair! (scope-local expanded-scope) expanded-vars)
    (copy-pair! (scope-local-info expanded-scope) expanded-var-infos)
    ;; Free variables are not shared with outer or inner scope,
    ;; so it can be safely modified.
    (scope-frees-set! expanded-scope (scope-frees outer-scope))
    (vector-set! expanded-scope 4 outer-scope)))

(defun replace-outer-scope! (node scope)
  (record-case node
               (:LAMBDA (inner-scope body-slot proper-vars varnum body)
                        ;; Scope replacement is just 1 level, and no need to replace body nodes,
                        ;; because this scope replacement is destructive.
                        (vector-set! inner-scope 4 scope))
               (:INVOKE (expanded-scope proper-vars args-node body)
                        ;; Proper-vars might be shared with scope local
                        ;; variables, and local variables are modified in
                        ;; reexpand-scope! function, so it is needed to copy.
                        (let1 copied-proper-vars (copy-list proper-vars)
                          (set-car! (cddr node) copied-proper-vars)
                          (reexpand-scope! expanded-scope proper-vars scope)
                          (replace-body-scope! body expanded-scope)))
               (:RECV (expanded-scope proper-vars varnum vals body)
                      (let1 copied-proper-vars (copy-list proper-vars)
                        (set-car! (cddr node) copied-proper-vars)
                        (reexpand-scope! expanded-scope proper-vars scope)
                        (replace-body-scope! body expanded-scope)))
               (:SET (var val)
                    (replace-outer-scope! val scope))
               (:DEF (var val)
                    (replace-outer-scope! val scope))
               (:IF (test then else)
                    (replace-outer-scope! test scope)
                    (replace-outer-scope! then scope)
                    (replace-outer-scope! else scope))
               (:APPLY (call-type f args)
                       (replace-outer-scope! f scope)
                       (replace-body-scope! args scope))
               (:CONTI (func)
                       (replace-outer-scope! func scope))
               (:VALS (args)
                      (replace-body-scope! args scope))
               ))

(defun replace-lambda-scope! (lambda-node scope)
  (lambda-scope-set! lambda-node scope)
  (replace-body-scope! (lambda-body-node-get lambda-node) scope))

(defun replace-body-scope! (body scope)
  (dolist (node body)
    (replace-outer-scope! node scope)))

(defun compile-apply (f args call-type scope next)
  (let1 lambda-node (apply-func-can-be-loop? f scope)
    (cond (;; Start loop?
           (and lambda-node
                (bit? call-type VAR-CALL-IN-BASE1)
                (can-eliminate-lambda-node? scope (cadr f)))
           (compile-apply-loop lambda-node f args scope next))
          (;; Self tail recursion?
           (and lambda-node
                (bit? call-type VAR-SELF-TAIL-RECUR))
           (compile-apply-self-recur lambda-node f args scope))
          ;; Normal function call.
          (t (compile-apply-normal f args scope next)))))

(defun compile-apply-normal (f args scope next)
  (let ((tail (tail? next))
        (argnum (length args)))
    (let1 code (compile-args args scope
                             (compile-recur f scope
                                            (if tail
                                                (list 'TAPPLY argnum)
                                              (list 'APPLY argnum))))
      (if tail
          code
        (list* 'FRAME code next)))))

;; Beginning of loop using self-recursion function.
(defun compile-apply-loop (lambda-node f args scope next)
  (let1 lambda-scope (lambda-scope-get lambda-node)
    (let ((lambda-local-vars (scope-local lambda-scope))
          (lambda-local-infos (scope-local-info lambda-scope)))
      (let ((expanded-scope (expand-scope2 lambda-local-vars lambda-local-infos scope))
            (varnum (lambda-varnum-get lambda-node))
            (body-slot (lambda-body-slot-get lambda-node))
            (next-tail (tail? next))
            (argnum (length args)))
        (when (pair? varnum)
          (compile-error "Not implemented: rest param for loop"))
        (unless (eq? argnum varnum)
          (compile-error "Illegal argnum, `%@` requires %@, but %@"
                         (cadr f) varnum argnum))
        (replace-lambda-scope! lambda-node expanded-scope)
        (copy-pair! body-slot
                    (compile-body lambda-local-vars
                                  (lambda-body-node-get lambda-node)
                                  expanded-scope
                                  (if (or next-tail
                                          (eq? varnum 0))
                                      next
                                    (list* 'SHRNK varnum next))))
        (compile-args args scope
                      (if (eq? varnum 0)
                          body-slot
                        (list* 'EXPND varnum
                               body-slot)))))))

;; Output direct jump for self tail call.
(defun compile-apply-self-recur (lambda-node f args scope)
  (let ((argnum (length args))
        (varnum (lambda-varnum-get lambda-node))
        (outer-varnum (if (can-eliminate-lambda-node? scope (cadr f))
                          (length (scope-local (scope-outer-scope (lambda-scope-get lambda-node))))
                        0)))
    (when (pair? varnum)
      (compile-error "Not implemented: rest param for loop"))
    (unless (eq? argnum varnum)
      (compile-error "Illegal argnum, `%@` requires %@, but %@"
                     (cadr f) varnum argnum))
    (compile-args args scope
                  (list* 'LOOP argnum outer-varnum
                         (lambda-body-slot-get lambda-node)))))

(defun compile-set! (var val scope next)
  ;; Check whether the set! value is lambda and it is used for local loop.
  (if (and (lambda-node? val)
           (can-eliminate-lambda-node? scope var))
      ;; This function is used for loop only, and can be eliminated set!.
      next
    ;; Normal set!
    (receive (op i)
             (acond ((scope-local-has? scope var)
                     (values 'LSET it))
                    ((position var (scope-frees scope))
                     (values 'FSET it))
                    (t (values 'GSET var)))
      (compile-recur val scope
                     (list* op i
                            next)))))

(defun compile-body (vars body scope next)
  (if body
      (make-boxes scope vars
                  (alet ((body body))
                    (if body
                        (compile-recur (car body) scope
                                       (loop (cdr body)))
                      next)))
    (list* 'VOID next)))

(defun make-boxes (scope locals next)
  (alet ((vars locals)
         (n 0))
    (if vars
        (let ((var (car vars))
              (tail (cdr vars)))
          (if (and (var-is-set? scope var)
                   (not (and (symbol-can-be-loop? var scope)
                             (can-eliminate-lambda-node? scope var))))
              (list* 'BOX n
                     (loop tail (+ n 1)))
            (loop tail (+ n 1))))
      next)))

(defun compile-args (args scope next)
  (if args
      (compile-args (cdr args) scope
                    (compile-recur (car args) scope
                                   (list* 'PUSH next)))
    next))

(defun collect-free (vars scope next)
  (if vars
      (collect-free (cdr vars) scope
                    (let1 x (car vars)
                      (aif (scope-local-has? scope x)
                           (list* 'LREF it 'PUSH next)
                        (aif (position x (scope-frees scope))
                             (list* 'FREF it 'PUSH next)
                          (compile-error "something wrong in collect-free [%@](%@)" x scope)))))
    next))

;; If a function call can be loop, returns the loop lambda node.
(defun apply-func-can-be-loop? (fn scope)
  (and (eq? (car fn) ':REF)                     ; Function is simple reference.
       (symbol-can-be-loop? (cadr fn) scope)))  ; Symbol for the reference.
(defun symbol-can-be-loop? (sym scope)
  (aif (var-is-set? scope sym)
       (and (single? it)                        ; Just 1 time assignment.
            (let1 node (car it)
              (and (lambda-node? node)          ; Lambda node.
                   node)))))

(defun tail? (next)
  (eq? (car next) 'RET))

;;;;
;; Declaim

(defmacro declaim (&rest defs)
  `(do ,@(map (^(sentence)
                (when (pair? sentence)
                  (case (car sentence)
                    (inline (do (dolist (sym (cdr sentence))
                                  (declaim-inline sym))
                                '(values)))
                    )))
              defs)))

(let1 *inline-functions* (table)
  (defun declaim-inline (sym)
    (table-put! *inline-functions* sym t))

  (defun inline-function? (sym)
    (and (symbol? sym)
         (table-exists? *inline-functions* sym)))

  (defun register-inline-function (sym func)
    (table-put! *inline-functions* sym func))

  (defun get-inline-function-body (sym)
    (table-get *inline-functions* sym))
  )

(defun lambda-expression? (exp)
  (and (pair? exp)
       (eq? (car exp) '^)))

;;;;

(let1 exit-compile nil
  (defun compile-error (&rest args)
    (apply format *stderr* args)
    (display "\n" *stderr*)
    (exit-compile nil))

  (defun compile (x)
    (call/cc
     (^(cc)
       (set! exit-compile cc)
       (let* ((scope (create-scope '() nil))
              (tree (traverse x scope nil)))
         (compile-recur tree scope (list 'HALT)))))))

(defun eval (x)
  (run-binary (compile x)))
