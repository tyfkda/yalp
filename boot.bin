(CLOSE (1 1) 0 (LREF 0 (TEST (GREF nil #0=(RET)) (GREF t #0#))) (GSET null (HALT)))
(CLOSE (1 1) 0 (LREF 0 (TEST (GREF nil #0=(RET)) (GREF t #0#))) (GSET no (HALT)))
(CLOSE (2 2) 0 (LREF 1 (TEST (FRAME (PUSH (FRAME (PUSH (GREF cons (SHIFT 2 (APPLY 2)))) (FRAME (PUSH (LREF 0 (APPLY 1))) (LREF 1 (PUSH (GREF car (APPLY 1))))))) (FRAME (PUSH (LREF 0 (PUSH (GREF map (APPLY 2))))) (LREF 1 (PUSH (GREF cdr (APPLY 1)))))) (CONST () (RET)))) (GSET map (HALT)))
(CLOSE (1 1) 0 (FRAME (TEST (GREF nil (RET)) (FRAME (TEST (FRAME (PUSH (GREF list (SHIFT 1 (APPLY 1)))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (FRAME (PUSH (FRAME (PUSH (GREF cons (SHIFT 2 (APPLY 2)))) (FRAME (PUSH (FRAME (PUSH (GREF list (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (LREF 0 (PUSH (GREF cadr (APPLY 1))))))) (FRAME (PUSH (GREF pair (APPLY 1))) (LREF 0 (PUSH (GREF cddr (APPLY 1))))))) (FRAME (PUSH (GREF no (APPLY 1))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (GSET pair (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (GREF car (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (GSET cadr (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (GREF cdr (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (GSET cddr (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (GREF car (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF cadr (APPLY 1))))) (GSET caadr (HALT)))
(CONST quasiquote (HALT))
(CONST def (HALT))
(CONST defn (HALT))
(CONST with (HALT))
(CONST let (HALT))
(CONST do (HALT))
(CONST when (HALT))
(CONST unless (HALT))
(CONST aif (HALT))
(CONST w/uniq (HALT))
(CONST and (HALT))
(CONST or (HALT))
(CONST afn (HALT))
(CONST caselet (HALT))
(CONST case (HALT))
(CLOSE (2 2) 0 (FRAME (PUSH (GREF no (SHIFT 1 (APPLY 1)))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (GSET isnt (HALT)))
(CLOSE (1 1) 0 (CONST 0 (PUSH (LREF 0 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (CLOSE (1 1) 0 (BOX 0 (LREF 0 (PUSH (CLOSE (2 2) 1 (FRAME (TEST (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (CONST 1 (PUSH (LREF 1 (PUSH (GREF + (APPLY 2))))))) (LREF 1 (RET))) (LREF 0 (PUSH (GREF consp (APPLY 1))))) (LSET 0 (RET)))))) (APPLY 1))))))))) (GSET len (HALT)))
(CLOSE (1 1) 0 (FRAME (TEST (FRAME (PUSH (GREF last-pair (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (LREF 0 (RET))) (FRAME (PUSH (GREF consp (APPLY 1))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (GSET last-pair (HALT)))
(CLOSE (1 1) 0 (CONST () (PUSH (LREF 0 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (CLOSE (1 1) 0 (BOX 0 (LREF 0 (PUSH (CLOSE (2 2) 1 (FRAME (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 3 (FRAME (FRAME (TEST (FREF 1 (PUSH (LREF 0 (PUSH (FREF 2 (UNBOX (SHIFT 2 (APPLY 2)))))))) (FREF 1 (RET))) (LREF 0 (PUSH (GREF consp (APPLY 1))))) (FREF 0 (PUSH (FREF 1 (PUSH (GREF rplacd (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (LSET 0 (RET)))))) (APPLY 1))))))))) (GSET reverse! (HALT)))
(CONST record (HALT))
(CONST record-case (HALT))
(CLOSE (1 1) 0 (FRAME (TEST (LREF 0 (RET)) (GREF nil (PUSH (LREF 0 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (CLOSE (1 1) 0 (BOX 0 (LREF 0 (PUSH (CLOSE (2 2) 1 (FRAME (TEST (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF cons (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1)))))))) (FRAME (PUSH (GREF reverse! (SHIFT 1 (APPLY 1)))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF cons (APPLY 2)))))))) (LREF 0 (PUSH (GREF consp (APPLY 1))))) (LSET 0 (RET)))))) (APPLY 1)))))))))) (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (LREF 0 (TEST (LREF 0 (RET)) (FRAME (PUSH (CLOSE (1 1) 0 (LREF 0 (TEST (LREF 0 #0=(RET)) (CONST () #0#))) (SHIFT 1 (APPLY 1)))) (FRAME (PUSH (GREF no (APPLY 1))) (FRAME (PUSH (GREF cdr (APPLY 1))) (FREF 0 (PUSH (GREF last-pair (APPLY 1))))))))) (APPLY 1))))) (LREF 0 (PUSH (GREF no (APPLY 1)))))) (GSET dotted->proper (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (GREF nil #0=(RET)) (FRAME (TEST (GREF t #0#) (FRAME (PUSH (LREF 0 (PUSH (GREF set-member? (SHIFT 2 (APPLY 2)))))) (LREF 1 (PUSH (GREF cdr (APPLY 1)))))) (FRAME (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))) (LREF 1 (PUSH (GREF car (APPLY 1))))))) (LREF 1 (PUSH (GREF no (APPLY 1))))) (GSET set-member? (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (LREF 1 (RET)) (LREF 1 (PUSH (LREF 0 (PUSH (GREF cons (SHIFT 2 (APPLY 2)))))))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF set-member? (APPLY 2))))))) (GSET set-cons (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (LREF 1 (RET)) (FRAME (PUSH (FRAME (PUSH (GREF set-union (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-cons (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (GSET set-union (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (CONST () (RET)) (FRAME (TEST (LREF 1 (PUSH (FRAME (PUSH (GREF set-minus (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))) (FRAME (PUSH (FRAME (PUSH (GREF cons (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-minus (APPLY 2))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-member? (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (GSET set-minus (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (CONST () (RET)) (FRAME (TEST (FRAME (PUSH (FRAME (PUSH (GREF cons (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-intersect (APPLY 2))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-intersect (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-member? (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (GSET set-intersect (HALT)))
(CLOSE (1 1) 0 (CONST (HALT) (PUSH (CONST () (PUSH (CONST (()) (PUSH (LREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4))))))))))) (GSET compile (HALT)))
(CLOSE (4 4) 0 (FRAME (TEST (FRAME (TEST (FRAME #0=(PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF compile-refer (SHIFT 3 (APPLY 3)))))))) (LREF 3 (PUSH (CONST UNBOX (PUSH (GREF list (APPLY 2))))))) (LREF 3 #0#)) (LREF 2 (PUSH (LREF 0 (PUSH (GREF set-member? (APPLY 2))))))) (FRAME (TEST (LREF 0 (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (CLOSE (1 1) 4 (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 5 (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (CONST CONST (PUSH (GREF list (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (1 -1) 3 (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF compile-lambda (SHIFT 5 (APPLY 5))))))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (2 -1) 3 (FRAME (TEST (FRAME #1=(PUSH (FRAME (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 3 (FRAME (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))))))))) (LREF 1 (PUSH (LREF 0 (PUSH (CONST TEST (PUSH (GREF list (APPLY 3))))))))) (SHIFT 2 (APPLY 2)))))))))) (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 1 (PUSH (GREF compile-recur (APPLY 4)))))))))))) (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (GREF compile-undef (APPLY 3))))))))) (FRAME (TEST (FRAME #1# (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FRAME (PUSH (GREF compile-recur (APPLY 4))) (LREF 2 (PUSH (GREF car (APPLY 1)))))))))))) (FRAME #1# (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FRAME (PUSH (GREF compile-recur (APPLY 4))) (LREF 2 (PUSH (CONST (if) (PUSH (GREF append (APPLY 2))))))))))))))) (FRAME (PUSH (GREF no (APPLY 1))) (LREF 2 (PUSH (GREF cdr (APPLY 1))))))) (LREF 2 (PUSH (GREF no (APPLY 1))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (2 2) 3 (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 4 (FRAME (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (FREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))))))))) (FREF 1 (PUSH (LREF 0 (PUSH (CONST GSET (PUSH (GREF list (APPLY 3))))))))) (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 4 (FRAME (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (FREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))))))))) (FREF 1 (PUSH (LREF 0 (PUSH (CONST FSET (PUSH (GREF list (APPLY 3))))))))) (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 4 (FRAME (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (FREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))))))))) (FREF 1 (PUSH (LREF 0 (PUSH (CONST LSET (PUSH (GREF list (APPLY 3))))))))) (PUSH (FREF 2 (PUSH (LREF 0 (PUSH (GREF compile-lookup (SHIFT 5 (APPLY 5))))))))))))))))))))))))))))))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (1 1) 3 (FRAME (PUSH (FREF 0 (PUSH (CLOSE (1 1) 1 (FRAME (TEST (LREF 0 (RET)) (LREF 0 (PUSH (FREF 0 (PUSH (CONST FRAME (PUSH (GREF list (SHIFT 3 (APPLY 3)))))))))) (FREF 0 (PUSH (GREF tail? (APPLY 1))))) (SHIFT 1 (APPLY 1)))))) (FRAME (PUSH (CONST CONTI (PUSH (GREF list (APPLY 2))))) (FRAME (PUSH (CONST PUSH (PUSH (GREF list (APPLY 2))))) (FRAME (TEST (FRAME #2=(PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 0 (PUSH (GREF compile-recur (APPLY 4))))))))) (CONST (APPLY 1) (PUSH (CONST 1 (PUSH (CONST SHIFT (PUSH (GREF list (APPLY 3))))))))) (CONST (APPLY 1) #2#)) (FREF 0 (PUSH (GREF tail? (APPLY 1)))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (2 -1) 3 (FRAME (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FRAME (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))) (FRAME (PUSH (CONST (quote) (PUSH (GREF append (APPLY 2))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))))))))) (LREF 2 (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF register-macro (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (PUSH (FRAME (PUSH (FREF 4 (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (2 2) 4 (FRAME (TEST (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (GREF compile-apply-macro (SHIFT 4 (APPLY 4))))))))))) (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF compile-apply (SHIFT 5 (APPLY 5)))))))))))))) (LREF 0 (PUSH (GREF macro? (APPLY 1))))) (SHIFT 2 (APPLY 2)))))))))))) (FREF 4 (PUSH (GREF car (APPLY 1)))))) (FREF 4 (PUSH (GREF cdr (APPLY 1)))))) (CONST defmacro (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST call/cc (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST set! (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST if (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST ^ (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST quote (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))))))) (LREF 0 (PUSH (GREF car (APPLY 1))))) (SHIFT 1 (APPLY 1))))))))))))) (LREF 3 (PUSH (LREF 0 (PUSH (CONST CONST (PUSH (GREF list (SHIFT 3 (APPLY 3)))))))))) (LREF 0 (PUSH (GREF consp (APPLY 1)))))) (LREF 0 (PUSH (GREF symbolp (APPLY 1))))) (GSET compile-recur (HALT)))
(CLOSE (3 3) 0 (LREF 2 (PUSH (CONST UNDEF (PUSH (GREF list (SHIFT 2 (APPLY 2))))))) (GSET compile-undef (HALT)))
(CLOSE (5 5) 0 (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (LREF 4 (PUSH (CLOSE (1 1) 5 (FRAME (PUSH (FREF 3 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (CLOSE (1 1) 3 (BOX 0 (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 4 (FRAME (TEST (FRAME (TEST (LREF 1 (RET)) (LREF 1 (PUSH (FREF 1 (PUSH (CONST FRAME (PUSH (GREF list (SHIFT 3 (APPLY 3)))))))))) (FREF 1 (PUSH (GREF tail? (APPLY 1))))) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (FRAME (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (FRAME (PUSH (GREF compile-recur (APPLY 4))) (LREF 0 (PUSH (GREF car (APPLY 1)))))))))) (LREF 1 (PUSH (CONST PUSH (PUSH (GREF list (APPLY 2))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))))))) (APPLY 1)))))))))))))) (FRAME (TEST (FRAME #0=(PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FREF 4 (PUSH (GREF compile-recur (APPLY 4))))))))) (FRAME (PUSH (FRAME (PUSH (CONST (SHIFT) (PUSH (GREF append (APPLY 3))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (APPLY) (PUSH (GREF append (APPLY 2))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))))) (FRAME #0# (FRAME (PUSH (CONST (APPLY) (PUSH (GREF append (APPLY 2))))) (LREF 0 (PUSH (GREF list (APPLY 1))))))) (FREF 0 (PUSH (GREF tail? (APPLY 1)))))) (SHIFT 1 (APPLY 1)))))))))))))) (LREF 1 (PUSH (GREF len (APPLY 1))))) (GSET compile-apply (HALT)))
(CLOSE (5 5) 0 (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (LREF 4 (PUSH (CLOSE (1 1) 5 (FRAME (TEST (FRAME #0=(PUSH (FRAME (PUSH (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (3 3) 5 (FRAME (PUSH (FREF 3 (PUSH (LREF 0 (PUSH (GREF collect-free (SHIFT 3 (APPLY 3)))))))) (FREF 1 (PUSH (FRAME (PUSH (FRAME (PUSH (LREF 2 (PUSH (CONST CLOSE (PUSH (GREF list (APPLY 5))))))) (LREF 0 (PUSH (GREF len (APPLY 1)))))) (FRAME (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (GREF make-boxes (APPLY 3))))))) (FREF 2 (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (FREF 4 (PUSH (FREF 0 (PUSH (GREF compile-lambda-bodies (APPLY 5))))))))))))))))) (SHIFT 3 (APPLY 3)))))))))))))) (FRAME (PUSH (FRAME (PUSH (GREF set-intersect (APPLY 2))) (FRAME (PUSH (FRAME (PUSH (GREF set-union (APPLY 2))) (FREF 2 (PUSH (GREF car (APPLY 1)))))) (FREF 2 (PUSH (GREF cdr (APPLY 1))))))) (LREF 0 (PUSH (CONST () (PUSH (FREF 3 (PUSH (GREF find-frees (APPLY 3))))))))))) (FRAME (PUSH (FREF 3 (PUSH (GREF find-setses (APPLY 2))))) (LREF 0 (PUSH (GREF dotted->proper (APPLY 1))))))) (FRAME (PUSH (FRAME (PUSH (GREF list (APPLY 2))) (FREF 4 (PUSH (GREF len (APPLY 1)))))) (FREF 4 (PUSH (GREF len (APPLY 1)))))) (FRAME #0# (CONST -1 (PUSH (FRAME (PUSH (GREF list (APPLY 2))) (CONST 1 (PUSH (FRAME (PUSH (GREF - (APPLY 2))) (LREF 0 (PUSH (GREF len (APPLY 1)))))))))))) (LREF 0 (PUSH (FREF 4 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))))))) (LREF 0 (PUSH (GREF dotted->proper (APPLY 1))))) (GSET compile-lambda (HALT)))
(CLOSE (5 5) 0 (FRAME (PUSH (FRAME (PUSH (FRAME (PUSH (LREF 1 (PUSH (CLOSE (3 3) 1 (FREF 0 (PUSH (FRAME (SHIFT 1 (APPLY 1)) (CONST () (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (CLOSE (1 1) 3 (BOX 0 (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 4 (FRAME (TEST (FREF 1 (RET)) (FRAME (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (FRAME (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))) (LREF 0 (PUSH (GREF car (APPLY 1)))))))))) (FRAME (PUSH (FREF 0 (UNBOX (APPLY 1)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))))))) (APPLY 1))))))))))))) (SHIFT 3 (APPLY 3)))))) (LREF 2 (PUSH (LREF 0 (PUSH (GREF cons (APPLY 2)))))))) (FRAME (PUSH (LREF 3 (PUSH (GREF set-union (APPLY 2))))) (LREF 2 (PUSH (LREF 4 (PUSH (GREF set-intersect (APPLY 2))))))))) (CONST RET (PUSH (GREF list (APPLY 1))))) (GSET compile-lambda-bodies (HALT)))
(CLOSE (3 3) 0 (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (CONST () (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (BOX 0 (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 2 (FRAME (TEST (LREF 0 (RET)) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (FRAME (PUSH (LREF 0 (PUSH (GREF set-union (APPLY 2))))) (FREF 1 (PUSH (FRAME (PUSH (GREF find-free (APPLY 2))) (LREF 1 (PUSH (GREF car (APPLY 1)))))))))) (LREF 1 (PUSH (GREF cdr (APPLY 1)))))) (LREF 1 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))) (APPLY 1))))))))))) (SHIFT 1 (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-union (APPLY 2))) (LREF 2 (PUSH (GREF dotted->proper (APPLY 1)))))))) (GSET find-frees (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (FRAME (TEST (CONST () #0=(RET)) (LREF 0 (PUSH (GREF list (SHIFT 1 (APPLY 1)))))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF set-member? (APPLY 2))))))) (FRAME (TEST (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 2 (FRAME (TEST (LREF 0 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 2 (FRAME (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 3 (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (1 -1) 1 (LREF 0 (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (CLOSE (1 1) 0 (CONST () (RET)) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (0 -1) 1 (CONST () (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (0 -1) 1 (CONST () (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (0 -1) 1 (CONST () (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (2 -1) 1 (LREF 1 (PUSH (FREF 0 (PUSH (LREF 2 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (CONST () (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3)))))))))) (CONST defmacro (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST call/cc (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST set! (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST if (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST quote (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST ^ (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))) (LREF 0 (PUSH (GREF car (APPLY 1))))) (SHIFT 1 (APPLY 1))))))))) (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-free (SHIFT 2 (APPLY 2)))))))) (FREF 1 (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))) (LREF 0 (PUSH (GREF expand-macro-if-so (APPLY 1))))) (CONST () #0#)) (LREF 0 (PUSH (GREF consp (APPLY 1)))))) (LREF 0 (PUSH (GREF symbolp (APPLY 1))))) (GSET find-free (HALT)))
(CLOSE (3 3) 0 (FRAME (TEST (LREF 2 (RET)) (FRAME (PUSH (LREF 1 (PUSH (FRAME (PUSH (GREF collect-free (SHIFT 3 (APPLY 3)))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))))) (FRAME (PUSH (LREF 1 (PUSH (FRAME (PUSH (GREF compile-refer (APPLY 3))) (LREF 0 (PUSH (GREF car (APPLY 1)))))))) (LREF 2 (PUSH (CONST PUSH (PUSH (GREF list (APPLY 2))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (GSET collect-free (HALT)))
(CLOSE (2 2) 0 (LREF 0 (PUSH (CONST () (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (LREF 1 (PUSH (CLOSE (1 1) 1 (BOX 0 (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 2 (FRAME (TEST (LREF 0 (RET)) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (FRAME (PUSH (LREF 0 (PUSH (GREF set-union (APPLY 2))))) (FREF 1 (PUSH (FRAME (PUSH (GREF find-sets (APPLY 2))) (LREF 1 (PUSH (GREF car (APPLY 1)))))))))) (LREF 1 (PUSH (GREF cdr (APPLY 1)))))) (LREF 1 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))) (APPLY 1))))))))))) (GSET find-setses (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 2 (FRAME (TEST (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-sets (SHIFT 2 (APPLY 2))))))) (FREF 1 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (CLOSE (1 1) 2 (FRAME (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 3 (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (2 2) 1 (FRAME (PUSH (FRAME (TEST (FRAME #0=(PUSH (GREF set-union (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF list (APPLY 1))))) (CONST () #0#)) (FREF 0 (PUSH (LREF 0 (PUSH (GREF set-member? (APPLY 2)))))))) (FREF 0 (PUSH (LREF 1 (PUSH (GREF find-sets (APPLY 2))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (1 -1) 1 (FRAME (PUSH (LREF 1 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FREF 0 (PUSH (GREF set-minus (APPLY 2))))) (LREF 0 (PUSH (GREF dotted->proper (APPLY 1)))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (CLOSE (0 -1) 0 (CONST () (RET)) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (0 -1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (0 -1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (2 -1) 1 (FRAME (PUSH (LREF 2 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FREF 0 (PUSH (GREF set-minus (APPLY 2))))) (LREF 1 (PUSH (GREF dotted->proper (APPLY 1)))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FREF 1 (PUSH (FREF 2 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2)))))))) (CONST defmacro (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST call/cc (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST if (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST quote (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST ^ (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST set! (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))) (LREF 0 (PUSH (GREF car (APPLY 1))))) (SHIFT 1 (APPLY 1)))))))))) (FREF 1 (PUSH (LREF 0 (PUSH (GREF isnt (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))) (LREF 0 (PUSH (GREF expand-macro-if-so (APPLY 1))))) (CONST () (RET))) (LREF 0 (PUSH (GREF consp (APPLY 1))))) (GSET find-sets (HALT)))
(CLOSE (3 3) 0 (CONST 0 (PUSH (LREF 1 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (LREF 0 (PUSH (LREF 2 (PUSH (CLOSE (1 1) 2 (BOX 0 (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 3 (FRAME (TEST (FREF 1 (RET)) (FRAME (TEST (FRAME (PUSH (LREF 1 (PUSH (CONST BOX (PUSH (GREF list (SHIFT 3 (APPLY 3)))))))) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (APPLY 2)))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (CONST 1 (PUSH (LREF 1 (PUSH (GREF + (APPLY 2)))))))) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (CONST 1 (PUSH (LREF 1 (PUSH (GREF + (APPLY 2)))))))) (FREF 2 (PUSH (FRAME (PUSH (GREF set-member? (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))))) (APPLY 1))))))))))))) (GSET make-boxes (HALT)))
(CLOSE (3 3) 0 (LREF 2 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (CONST GREF (PUSH (GREF list (SHIFT 3 (APPLY 3))))))))) (PUSH (LREF 2 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (CONST FREF (PUSH (GREF list (SHIFT 3 (APPLY 3))))))))) (PUSH (LREF 2 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (CONST LREF (PUSH (GREF list (SHIFT 3 (APPLY 3))))))))) (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF compile-lookup (SHIFT 5 (APPLY 5))))))))))))))))))) (GSET compile-refer (HALT)))
(CLOSE (2 2) 0 (CONST 0 (PUSH (LREF 1 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (BOX 0 (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 2 (FRAME (TEST (GREF nil #0=(RET)) (FRAME (TEST (LREF 1 #0#) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (CONST 1 (PUSH (LREF 1 (PUSH (GREF + (APPLY 2)))))))) (FREF 1 (PUSH (FRAME (PUSH (GREF is (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))) (APPLY 1))))))))))) (GSET find-index (HALT)))
(CLOSE (5 5) 0 (FRAME (PUSH (FRAME (PUSH (LREF 0 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (LREF 4 (PUSH (CLOSE (2 2) 4 (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 5 (LREF 0 (TEST (LREF 0 (PUSH (FREF 3 (SHIFT 1 (APPLY 1))))) (FRAME (PUSH (FREF 4 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (1 1) 3 (LREF 0 (TEST (LREF 0 (PUSH (FREF 1 (SHIFT 1 (APPLY 1))))) (FREF 2 (PUSH (FREF 0 (SHIFT 1 (APPLY 1))))))) (SHIFT 1 (APPLY 1)))))))))) (FREF 0 (PUSH (FREF 4 (PUSH (GREF find-index (APPLY 2))))))))) (SHIFT 1 (APPLY 1)))))))))))))) (LREF 0 (PUSH (FREF 3 (PUSH (GREF find-index (APPLY 2))))))) (SHIFT 2 (APPLY 2)))))))))))) (LREF 1 (PUSH (GREF car (APPLY 1)))))) (LREF 1 (PUSH (GREF cdr (APPLY 1))))) (GSET compile-lookup (HALT)))
(CLOSE (1 1) 0 (CONST RET (PUSH (FRAME (PUSH (GREF is (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF car (APPLY 1))))))) (GSET tail? (HALT)))
(FRAME (GSET *macro-table* (HALT)) (GREF make-hash-table (APPLY 0)))
(CLOSE (3 3) 0 (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (LREF 0 (PUSH (FREF 0 (PUSH (GREF *macro-table* (PUSH (GREF hash-table-put! (SHIFT 3 (APPLY 3))))))))) (SHIFT 1 (APPLY 1)))))) (FRAME (PUSH (GREF eval (APPLY 1))) (LREF 2 (PUSH (FRAME (PUSH (CONST (^) (PUSH (GREF append (APPLY 3))))) (LREF 1 (PUSH (GREF list (APPLY 1))))))))) (GSET register-macro (HALT)))
(CLOSE (1 1) 0 (LREF 0 (PUSH (GREF *macro-table* (PUSH (GREF hash-table-exists? (SHIFT 2 (APPLY 2))))))) (GSET macro? (HALT)))
(CLOSE (4 4) 0 (FRAME (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (CLOSE (1 1) 3 (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4))))))))))) (SHIFT 1 (APPLY 1)))))))))) (LREF 0 (PUSH (GREF macroexpand (APPLY 1))))) (GSET compile-apply-macro (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (FRAME (PUSH (CLOSE (2 2) 0 (FRAME (PUSH (LREF 1 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (GREF apply (SHIFT 2 (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))) (LREF 0 (PUSH (GREF *macro-table* (PUSH (GREF hash-table-get (APPLY 2))))))) (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (GSET macroexpand (HALT)))
(CLOSE (1 1) 0 (FRAME (TEST (FRAME #0=(TEST (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (FRAME (TEST (FREF 0 (RET)) (LREF 0 (PUSH (GREF expand-macro-if-so (SHIFT 1 (APPLY 1)))))) (FREF 0 (PUSH (LREF 0 (PUSH (GREF iso (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))) (LREF 0 (PUSH (GREF macroexpand (APPLY 1))))) (LREF 0 (RET))) (FRAME (PUSH (GREF macro? (APPLY 1))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (UNDEF #0#)) (LREF 0 (PUSH (GREF consp (APPLY 1))))) (GSET expand-macro-if-so (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (GREF run-binary (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF compile (APPLY 1))))) (GSET eval (HALT)))
