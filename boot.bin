(FRAME (DEF *macro-table* (HALT)) (GREF make-hash-table (APPLY 0)))
(CLOSE (2 2) 0 (LREF 1 (PUSH (LREF 0 (PUSH (GREF *macro-table* (PUSH (GREF hash-table-put! (SHIFT 3 (APPLY 3))))))))) (DEF register-macro (HALT)))
(CLOSE (1 1) 0 (LREF 0 (PUSH (GREF *macro-table* (PUSH (GREF hash-table-exists? (SHIFT 2 (APPLY 2))))))) (DEF macro? (HALT)))
(CLOSE (1 1) 0 (LREF 0 (TEST (GREF nil #0=(RET)) (GREF t #0#))) (DEF no (HALT)))
(CLOSE (2 2) 0 (LREF 1 (TEST (FRAME (PUSH (FRAME (PUSH (GREF cons (SHIFT 2 (APPLY 2)))) (FRAME (PUSH (LREF 0 (APPLY 1))) (LREF 1 (PUSH (GREF car (APPLY 1))))))) (FRAME (PUSH (LREF 0 (PUSH (GREF map (APPLY 2))))) (LREF 1 (PUSH (GREF cdr (APPLY 1)))))) (CONST () (RET)))) (DEF map (HALT)))
(CLOSE (1 1) 0 (FRAME (TEST (GREF nil (RET)) (FRAME (TEST (FRAME (PUSH (GREF list (SHIFT 1 (APPLY 1)))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (FRAME (PUSH (FRAME (PUSH (GREF cons (SHIFT 2 (APPLY 2)))) (FRAME (PUSH (FRAME (PUSH (GREF list (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (LREF 0 (PUSH (GREF cadr (APPLY 1))))))) (FRAME (PUSH (GREF pair (APPLY 1))) (LREF 0 (PUSH (GREF cddr (APPLY 1))))))) (FRAME (PUSH (GREF no (APPLY 1))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (DEF pair (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (GREF car (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (DEF cadr (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (GREF cdr (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (DEF cddr (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (GREF car (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF cadr (APPLY 1))))) (DEF caadr (HALT)))
(CLOSE (1 1) 0 (FRAME (TEST (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (FRAME (TEST (FREF 0 (PUSH (GREF cadr (SHIFT 1 (APPLY 1))))) (FRAME (TEST (CONST "Illegal" (PUSH (GREF error (SHIFT 1 (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (GREF qq-expand (SHIFT 1 (APPLY 1)))) (FRAME (PUSH (GREF qq-expand (APPLY 1))) (FREF 0 (PUSH (GREF cadr (APPLY 1)))))) (FRAME (PUSH (FRAME (PUSH (CONST append (PUSH (GREF list (SHIFT 3 (APPLY 3)))))) (FRAME (PUSH (GREF qq-expand-list (APPLY 1))) (FREF 0 (PUSH (GREF car (APPLY 1))))))) (FRAME (PUSH (GREF qq-expand (APPLY 1))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))))) (CONST quasiquote (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST unquote-splicing (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST unquote (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))) (LREF 0 (PUSH (GREF car (APPLY 1))))) (LREF 0 (PUSH (CONST quote (PUSH (GREF list (SHIFT 2 (APPLY 2)))))))) (LREF 0 (PUSH (GREF pair? (APPLY 1))))) (DEF qq-expand (HALT)))
(CLOSE (1 1) 0 (FRAME (TEST (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (FRAME (TEST (FRAME (PUSH (CONST list (PUSH (GREF list (SHIFT 2 (APPLY 2)))))) (FREF 0 (PUSH (GREF cadr (APPLY 1))))) (FRAME (TEST (FREF 0 (PUSH (GREF cadr (SHIFT 1 (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (GREF qq-expand-list (SHIFT 1 (APPLY 1)))) (FRAME (PUSH (GREF qq-expand (APPLY 1))) (FREF 0 (PUSH (GREF cadr (APPLY 1)))))) (FRAME (PUSH (CONST list (PUSH (GREF list (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FRAME (PUSH (CONST append (PUSH (GREF list (APPLY 3))))) (FRAME (PUSH (GREF qq-expand-list (APPLY 1))) (FREF 0 (PUSH (GREF car (APPLY 1))))))) (FRAME (PUSH (GREF qq-expand (APPLY 1))) (FREF 0 (PUSH (GREF cdr (APPLY 1)))))))) (CONST quasiquote (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST unquote-splicing (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST unquote (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))) (LREF 0 (PUSH (GREF car (APPLY 1))))) (FRAME (PUSH (CONST quote (PUSH (GREF list (SHIFT 2 (APPLY 2)))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (LREF 0 (PUSH (GREF pair? (APPLY 1))))) (DEF qq-expand-list (HALT)))
(MACRO quasiquote (1 1) (LREF 0 (PUSH (GREF qq-expand (SHIFT 1 (APPLY 1))))) (HALT))
(MACRO def (1 -1) (FRAME (TEST (FRAME (PUSH (CONST (def) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 0 (PUSH (GREF car (APPLY 1))))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (^) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))) (CONST () (PUSH (LREF 1 (PUSH (GREF append (APPLY 2)))))))))))))) (FRAME (PUSH (CONST (def) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (CONST () (PUSH (LREF 1 (PUSH (GREF append (APPLY 2))))))))) (LREF 0 (PUSH (GREF pair? (APPLY 1))))) (HALT))
(MACRO with (1 -1) (FRAME (PUSH (FRAME (PUSH (GREF append (SHIFT 2 (APPLY 2)))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (^) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (GREF car (PUSH (GREF map (APPLY 2))))) (LREF 0 (PUSH (GREF pair (APPLY 1)))))))) (CONST () (PUSH (LREF 1 (PUSH (GREF append (APPLY 2))))))))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF cadr (PUSH (GREF map (APPLY 2))))) (LREF 0 (PUSH (GREF pair (APPLY 1))))))))) (HALT))
(MACRO let (2 -1) (FRAME (PUSH (FRAME (PUSH (GREF append (SHIFT 2 (APPLY 2)))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (^) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1)))))))))) (CONST () (PUSH (LREF 2 (PUSH (GREF append (APPLY 2))))))))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 1 (PUSH (GREF list (APPLY 1)))))))) (HALT))
(MACRO do (0 -1) (CONST () (PUSH (FRAME (PUSH (GREF append (SHIFT 2 (APPLY 2)))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (^) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (CONST (()) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (LREF 0 (PUSH (GREF append (APPLY 2)))))))))))) (HALT))
(MACRO when (1 -1) (FRAME (PUSH (CONST (if) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (do) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (LREF 1 (PUSH (GREF append (APPLY 2))))))))))))) (HALT))
(MACRO unless (1 -1) (FRAME (PUSH (CONST (if) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (not) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1))))))))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (do) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (LREF 1 (PUSH (GREF append (APPLY 2))))))))))))) (HALT))
(MACRO aif (1 -1) (FRAME (TEST (LREF 0 (RET)) (FRAME (PUSH (CONST (let) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (CONST (it) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (if) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (CONST (it) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (FRAME (TEST (FRAME #0=(PUSH (GREF append (APPLY 2))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 1 (PUSH (GREF car (APPLY 1))))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (aif) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 1 (PUSH (GREF cdr (APPLY 1)))))))))))))) (LREF 1 #0#)) (LREF 1 (PUSH (GREF cdr (APPLY 1))))))))))))))))) (LREF 1 (PUSH (GREF no (APPLY 1))))) (HALT))
(MACRO w/uniq (1 -1) (FRAME (TEST (FRAME (PUSH (CONST (with) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST () (PUSH (GREF + (PUSH (GREF apply (APPLY 3))))))) (LREF 0 (PUSH (CLOSE (1 1) 0 (CONST (uniq) (PUSH (LREF 0 (PUSH (GREF list (SHIFT 2 (APPLY 2))))))) (PUSH (GREF map (APPLY 2)))))))))) (CONST () (PUSH (LREF 1 (PUSH (GREF append (APPLY 2)))))))) (FRAME (PUSH (CONST (let) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (CONST () (PUSH (CONST (uniq) (PUSH (GREF append (APPLY 2))))))))) (CONST () (PUSH (LREF 1 (PUSH (GREF append (APPLY 2)))))))))) (LREF 0 (PUSH (GREF pair? (APPLY 1))))) (HALT))
(MACRO and (0 -1) (LREF 0 (TEST (FRAME (TEST (FRAME (PUSH (CONST (if) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 0 (PUSH (GREF car (APPLY 1))))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (and) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))))))))))) (LREF 0 (PUSH (GREF car (SHIFT 1 (APPLY 1)))))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (CONST t (RET)))) (HALT))
(MACRO or (0 -1) (LREF 0 (TEST (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (FRAME (PUSH (CONST (let) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FREF 0 (PUSH (GREF car (APPLY 1))))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (if) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (or) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FREF 0 (PUSH (GREF cdr (APPLY 1)))))))))))))))))))))) (SHIFT 1 (APPLY 1)))))) (GREF uniq (APPLY 0))) (UNDEF (RET)))) (HALT))
(MACRO afn (1 -1) (FRAME (PUSH (CONST (let) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (CONST (self) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (CONST (()) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (set!) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (CONST (self) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (^) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (CONST () (PUSH (LREF 1 (PUSH (GREF append (APPLY 2))))))))))))))))))))) (HALT))
(MACRO caselet (2 -1) (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (CLOSE (1 1) 3 (FRAME (PUSH (CONST (let) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FREF 2 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FREF 1 (PUSH (GREF list (APPLY 1)))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FREF 0 (PUSH (LREF 0 (APPLY 1))))))))))) (SHIFT 1 (APPLY 1)))))))))) (CONST () (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (BOX 0 (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 2 (FRAME (TEST (CONST () (RET)) (FRAME (TEST (LREF 0 (PUSH (GREF car (SHIFT 1 (APPLY 1))))) (FRAME (PUSH (CONST (if) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (is) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FREF 1 (PUSH (GREF list (APPLY 1)))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (quote) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 0 (PUSH (GREF car (APPLY 1)))))))))))))))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 0 (PUSH (GREF cadr (APPLY 1))))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (FREF 0 (UNBOX (APPLY 1)))) (LREF 0 (PUSH (GREF cddr (APPLY 1))))))))))))) (FRAME (PUSH (GREF no (APPLY 1))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))) (APPLY 1))))))) (HALT))
(MACRO case (1 -1) (FRAME (PUSH (CONST (caselet) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (GREF uniq (APPLY 0))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (CONST () (PUSH (LREF 1 (PUSH (GREF append (APPLY 2))))))))) (HALT))
(CLOSE (2 2) 0 (FRAME (PUSH (GREF no (SHIFT 1 (APPLY 1)))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (DEF isnt (HALT)))
(CLOSE (1 1) 0 (CONST 0 (PUSH (LREF 0 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (CLOSE (1 1) 0 (BOX 0 (LREF 0 (PUSH (CLOSE (2 2) 1 (FRAME (TEST (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (CONST 1 (PUSH (LREF 1 (PUSH (GREF + (APPLY 2))))))) (LREF 1 (RET))) (LREF 0 (PUSH (GREF pair? (APPLY 1))))) (LSET 0 (RET)))))) (APPLY 1))))))))) (DEF len (HALT)))
(CLOSE (1 1) 0 (FRAME (TEST (FRAME (PUSH (GREF last (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (LREF 0 (RET))) (FRAME (PUSH (GREF pair? (APPLY 1))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (DEF last (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (0 0) 2 (FRAME (TEST (FREF 0 (RET)) (FRAME (PUSH (FREF 1 (PUSH (GREF member (SHIFT 2 (APPLY 2)))))) (FREF 0 (PUSH (GREF cdr (APPLY 1)))))) (FRAME (PUSH (FREF 1 (PUSH (GREF is (APPLY 2))))) (FREF 0 (PUSH (GREF car (APPLY 1)))))) (SHIFT 0 (APPLY 0))))))) (UNDEF (RET))) (LREF 1 (PUSH (GREF pair? (APPLY 1))))) (DEF member (HALT)))
(CLOSE (1 1) 0 (FRAME (TEST (CONST () (PUSH (LREF 0 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (CLOSE (1 1) 0 (BOX 0 (LREF 0 (PUSH (CLOSE (2 2) 1 (FRAME (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 3 (FRAME (FRAME (TEST (FREF 1 (PUSH (LREF 0 (PUSH (FREF 2 (UNBOX (SHIFT 2 (APPLY 2)))))))) (FREF 1 (RET))) (LREF 0 (PUSH (GREF pair? (APPLY 1))))) (FREF 0 (PUSH (FREF 1 (PUSH (GREF set-cdr! (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (LSET 0 (RET)))))) (APPLY 1))))))))) (LREF 0 (RET))) (LREF 0 (PUSH (GREF pair? (APPLY 1))))) (DEF reverse! (HALT)))
(CLOSE (0 0) 0 (CONST "\n" (PUSH (GREF display (SHIFT 1 (APPLY 1))))) (DEF newline (HALT)))
(CLOSE (1 1) 0 (FRAME (FRAME (LREF 0 (RET)) (GREF newline (APPLY 0))) (LREF 0 (PUSH (GREF display (APPLY 1))))) (DEF print (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (FRAME (FRAME (PUSH (FREF 0 (PUSH (GREF write/ss-print (SHIFT 2 (APPLY 2)))))) (LREF 0 (PUSH (FREF 0 (PUSH (GREF write/ss-loop (APPLY 2))))))) (CONST 0 (PUSH (CONST index (PUSH (LREF 0 (PUSH (GREF hash-table-put! (APPLY 3))))))))) (SHIFT 1 (APPLY 1)))))) (GREF make-hash-table (APPLY 0))) (DEF write/ss (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (FRAME (TEST (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (0 0) 2 (FRAME (FRAME (PUSH (FRAME (PUSH (GREF write/ss-loop (SHIFT 2 (APPLY 2)))) (FREF 1 (PUSH (GREF car (APPLY 1)))))) (FREF 0 (PUSH (FRAME (PUSH (GREF write/ss-loop (APPLY 2))) (FREF 1 (PUSH (GREF cdr (APPLY 1)))))))) (GREF nil (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (GREF hash-table-put! (APPLY 3))))))))) (SHIFT 0 (APPLY 0))))))) (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (0 0) 2 (FRAME (TEST (FRAME #0=(FREF 0 (RET)) (FREF 1 (PUSH (FREF 0 (PUSH (CLOSE (0 0) 2 (FRAME (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (CLOSE (1 1) 2 (FRAME (FRAME (PUSH (CONST index (PUSH (FREF 0 (PUSH (GREF hash-table-put! (SHIFT 3 (APPLY 3)))))))) (LREF 0 (PUSH (CONST 1 (PUSH (GREF + (APPLY 2))))))) (LREF 0 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (GREF hash-table-put! (APPLY 3))))))))) (SHIFT 1 (APPLY 1)))))))) (CONST index (PUSH (FREF 0 (PUSH (GREF hash-table-get (APPLY 2))))))) (APPLY 0))))))) (UNDEF #0#)) (FRAME (PUSH (GREF no (APPLY 1))) (FREF 1 (PUSH (FREF 0 (PUSH (GREF hash-table-get (APPLY 2)))))))) (SHIFT 0 (APPLY 0)))))))) (FRAME (PUSH (GREF no (APPLY 1))) (LREF 0 (PUSH (LREF 1 (PUSH (GREF hash-table-exists? (APPLY 2)))))))) (LREF 1 (RET))) (LREF 0 (PUSH (GREF pair? (APPLY 1))))) (DEF write/ss-loop (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 2 (LREF 0 (TEST (FRAME #0=(TEST (LREF 0 (PUSH (CLOSE (0 0) 1 (FRAME (FRAME (CONST "#" (PUSH (GREF display (SHIFT 1 (APPLY 1))))) (FRAME (PUSH (GREF display (APPLY 1))) (FREF 0 (PUSH (CONST -1 (PUSH (GREF - (APPLY 2)))))))) (CONST "#" (PUSH (GREF display (APPLY 1))))) (SHIFT 0 (APPLY 0))))) (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (0 0) 3 (FREF 0 (TEST (FRAME #1=(FREF 2 (PUSH (CONST "(" (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (FREF 1 (PUSH (CLOSE (1 1) 1 (BOX 0 (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 2 (FRAME (TEST (CONST ")" (PUSH (GREF display (SHIFT 1 (APPLY 1))))) (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (0 0) 4 (FRAME (FRAME (FRAME (TEST (FRAME (PUSH (CONST " " (PUSH (FREF 2 (UNBOX (SHIFT 2 (APPLY 2))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FREF 3 (PUSH (FREF 0 (PUSH (CLOSE (0 0) 2 (FRAME (FRAME (CONST ")" (PUSH (GREF display (SHIFT 1 (APPLY 1))))) (FREF 1 (PUSH (FRAME (PUSH (GREF write/ss-print (APPLY 2))) (FREF 0 (PUSH (GREF cdr (APPLY 1)))))))) (CONST " . " (PUSH (GREF display (APPLY 1))))) (SHIFT 0 (APPLY 0)))))))) (FRAME (TEST (FRAME #2=(PUSH (FREF 0 (PUSH (CLOSE (1 1) 1 (LREF 0 (TEST (LREF 0 (RET)) (FRAME (PUSH (CLOSE (1 1) 0 (LREF 0 (TEST (LREF 0 #3=(RET)) (CONST () #3#))) (SHIFT 1 (APPLY 1)))) (FRAME (PUSH (GREF no (APPLY 1))) (FREF 0 (PUSH (GREF cdr (APPLY 1)))))))) (APPLY 1))))) (FRAME (PUSH (GREF no (APPLY 1))) (FRAME (PUSH (FREF 3 (PUSH (GREF hash-table-get (APPLY 2))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))))) (UNDEF #2#)) (FRAME (PUSH (GREF pair? (APPLY 1))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))))) (FREF 3 (PUSH (FRAME (PUSH (GREF write/ss-print (APPLY 2))) (FREF 0 (PUSH (GREF car (APPLY 1)))))))) (FREF 1 (PUSH (GREF display (APPLY 1))))) (SHIFT 0 (APPLY 0)))))))))))) (LREF 1 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))) (APPLY 1))))))))))) (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (CLOSE (0 0) 3 (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (CLOSE (0 0) 3 (FRAME (FRAME (FRAME (FRAME (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (GREF hash-table-put! (SHIFT 3 (APPLY 3)))))))) (FREF 0 (PUSH (CONST -1 (PUSH (GREF - (APPLY 2))))))) (CONST "=" (PUSH (GREF display (APPLY 1))))) (FREF 0 (PUSH (GREF display (APPLY 1))))) (CONST "#" (PUSH (GREF display (APPLY 1))))) (SHIFT 0 (APPLY 0))))))))) (APPLY 0))))))))) (UNDEF #1#))) (SHIFT 0 (APPLY 0)))))))))) (CONST 0 (PUSH (LREF 0 (PUSH (GREF < (APPLY 2))))))) (UNDEF #0#))) (SHIFT 1 (APPLY 1)))))))) (LREF 0 (PUSH (LREF 1 (PUSH (GREF hash-table-get (APPLY 2))))))) (LREF 0 (PUSH (GREF write (SHIFT 1 (APPLY 1)))))) (LREF 0 (PUSH (GREF pair? (APPLY 1))))) (DEF write/ss-print (HALT)))
(MACRO record (2 -1) (FRAME (PUSH (CONST (apply) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (^) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 1 (PUSH (GREF list (APPLY 1)))))) (CONST () (PUSH (LREF 2 (PUSH (GREF append (APPLY 2))))))))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1))))))))) (HALT))
(MACRO record-case (1 -1) (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 2 (FRAME (PUSH (CONST (let) (PUSH (GREF append (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FREF 1 (PUSH (GREF list (APPLY 1)))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (case) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (car) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1))))))))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FREF 0 (PUSH (FRAME (APPLY 1) (CONST () (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (BOX 0 (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 2 (LREF 0 (TEST (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (0 0) 3 (FRAME (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (CLOSE (1 1) 3 (FRAME (PUSH (FRAME (PUSH (FRAME (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (3 3) 4 (FRAME (TEST (FREF 0 (PUSH (GREF cdr (SHIFT 1 (APPLY 1))))) (FRAME (PUSH (FRAME (PUSH (GREF append (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (record) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (cdr) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FREF 3 (PUSH (GREF list (APPLY 1))))))))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 1 (PUSH (GREF list (APPLY 1)))))) (CONST () (PUSH (LREF 2 (PUSH (GREF append (APPLY 2)))))))))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (FREF 2 (UNBOX (APPLY 1)))) (FREF 1 (PUSH (GREF cdr (APPLY 1))))))))))) (CONST else (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 3 (APPLY 3)))))))))))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (LREF 0 (PUSH (GREF cadr (APPLY 1)))))) (LREF 0 (PUSH (GREF cddr (APPLY 1))))) (SHIFT 1 (APPLY 1)))))))))) (FREF 0 (PUSH (GREF car (APPLY 1))))) (SHIFT 0 (APPLY 0))))))))) (UNDEF (RET)))) (LSET 0 (RET)))))))) (APPLY 1))))))))))))))))))))) (SHIFT 1 (APPLY 1)))))))) (GREF uniq (APPLY 0))) (HALT))
(CLOSE (1 1) 0 (FRAME (TEST (LREF 0 (RET)) (CONST () (PUSH (LREF 0 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (CLOSE (1 1) 0 (BOX 0 (LREF 0 (PUSH (CLOSE (2 2) 1 (FRAME (TEST (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF cons (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1)))))))) (FRAME (PUSH (GREF reverse! (SHIFT 1 (APPLY 1)))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF cons (APPLY 2)))))))) (LREF 0 (PUSH (GREF pair? (APPLY 1))))) (LSET 0 (RET)))))) (APPLY 1)))))))))) (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (LREF 0 (TEST (LREF 0 (RET)) (FRAME (TEST (FRAME #0=(PUSH (CLOSE (1 1) 0 (LREF 0 (TEST (LREF 0 #1=(RET)) (CONST () #1#))) (SHIFT 1 (APPLY 1)))) (FRAME (PUSH (GREF no (APPLY 1))) (FRAME (PUSH (GREF cdr (APPLY 1))) (FREF 0 (PUSH (GREF last (APPLY 1))))))) (UNDEF #0#)) (FREF 0 (PUSH (GREF pair? (APPLY 1))))))) (APPLY 1))))) (LREF 0 (PUSH (GREF no (APPLY 1)))))) (DEF dotted->proper (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (GREF nil #0=(RET)) (FRAME (TEST (GREF t #0#) (FRAME (PUSH (LREF 0 (PUSH (GREF set-member? (SHIFT 2 (APPLY 2)))))) (LREF 1 (PUSH (GREF cdr (APPLY 1)))))) (FRAME (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))) (LREF 1 (PUSH (GREF car (APPLY 1))))))) (LREF 1 (PUSH (GREF no (APPLY 1))))) (DEF set-member? (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (LREF 1 (RET)) (LREF 1 (PUSH (LREF 0 (PUSH (GREF cons (SHIFT 2 (APPLY 2)))))))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF set-member? (APPLY 2))))))) (DEF set-cons (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (LREF 1 (RET)) (FRAME (PUSH (FRAME (PUSH (GREF set-union (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-cons (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (DEF set-union (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (CONST () (RET)) (FRAME (TEST (LREF 1 (PUSH (FRAME (PUSH (GREF set-minus (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))) (FRAME (PUSH (FRAME (PUSH (GREF cons (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-minus (APPLY 2))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-member? (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (DEF set-minus (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (CONST () (RET)) (FRAME (TEST (FRAME (PUSH (FRAME (PUSH (GREF cons (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-intersect (APPLY 2))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-intersect (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-member? (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (DEF set-intersect (HALT)))
(CLOSE (1 1) 0 (CONST (HALT) (PUSH (CONST () (PUSH (CONST (()) (PUSH (LREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4))))))))))) (DEF compile (HALT)))
(CLOSE (4 4) 0 (FRAME (TEST (FRAME (TEST (FRAME #0=(PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF compile-refer (SHIFT 3 (APPLY 3)))))))) (LREF 3 (PUSH (CONST UNBOX (PUSH (GREF list (APPLY 2))))))) (LREF 3 #0#)) (LREF 2 (PUSH (LREF 0 (PUSH (GREF set-member? (APPLY 2))))))) (FRAME (TEST (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (CLOSE (1 1) 4 (FRAME (TEST (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4))))))))))) (FREF 3 (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (CLOSE (1 1) 4 (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 5 (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (CONST CONST (PUSH (GREF list (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (1 -1) 3 (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF compile-lambda (SHIFT 5 (APPLY 5))))))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (2 -1) 3 (FRAME (TEST (FRAME #1=(PUSH (FRAME (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 3 (FRAME (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))))))))) (LREF 1 (PUSH (LREF 0 (PUSH (CONST TEST (PUSH (GREF list (APPLY 3))))))))) (SHIFT 2 (APPLY 2)))))))))) (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 1 (PUSH (GREF compile-recur (APPLY 4)))))))))))) (FREF 0 (PUSH (GREF compile-undef (APPLY 1))))) (FRAME (TEST (FRAME #1# (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FRAME (PUSH (GREF compile-recur (APPLY 4))) (LREF 2 (PUSH (GREF car (APPLY 1)))))))))))) (FRAME #1# (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FRAME (PUSH (GREF compile-recur (APPLY 4))) (FRAME (PUSH (CONST (if) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (LREF 2 (PUSH (GREF append (APPLY 2)))))))))))))))) (FRAME (PUSH (GREF no (APPLY 1))) (LREF 2 (PUSH (GREF cdr (APPLY 1))))))) (LREF 2 (PUSH (GREF no (APPLY 1))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (2 2) 3 (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (0 0) 5 (FRAME (PUSH (FREF 3 (PUSH (FREF 4 (PUSH (FREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))))))))) (FREF 2 (PUSH (FREF 1 (PUSH (CONST GSET (PUSH (GREF list (APPLY 3))))))))) (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 4 (FRAME (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (FREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))))))))) (FREF 1 (PUSH (LREF 0 (PUSH (CONST FSET (PUSH (GREF list (APPLY 3))))))))) (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 4 (FRAME (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (FREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))))))))) (FREF 1 (PUSH (LREF 0 (PUSH (CONST LSET (PUSH (GREF list (APPLY 3))))))))) (PUSH (FREF 2 (PUSH (LREF 0 (PUSH (GREF compile-lookup (SHIFT 5 (APPLY 5))))))))))))))))))))))))))))))))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (2 2) 3 (FRAME (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 1 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))))))))) (FREF 0 (PUSH (LREF 0 (PUSH (CONST DEF (PUSH (GREF list (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (1 1) 3 (FRAME (PUSH (FREF 0 (PUSH (CLOSE (1 1) 1 (GREF nil (TEST (LREF 0 (RET)) (LREF 0 (PUSH (FREF 0 (PUSH (CONST FRAME (PUSH (GREF list (SHIFT 3 (APPLY 3))))))))))) (SHIFT 1 (APPLY 1)))))) (FRAME (PUSH (CONST CONTI (PUSH (GREF list (APPLY 2))))) (FRAME (PUSH (CONST PUSH (PUSH (GREF list (APPLY 2))))) (GREF nil (TEST (FRAME #2=(PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 0 (PUSH (GREF compile-recur (APPLY 4))))))))) (CONST (APPLY 1) (PUSH (CONST 1 (PUSH (CONST SHIFT (PUSH (GREF list (APPLY 3))))))))) (CONST (APPLY 1) #2#)))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (2 -1) 1 (FREF 0 (PUSH (LREF 2 (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF compile-defmacro (SHIFT 4 (APPLY 4))))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (PUSH (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (2 2) 3 (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF compile-apply (SHIFT 5 (APPLY 5))))))))))))) (SHIFT 2 (APPLY 2)))))))))) (FREF 4 (PUSH (GREF car (APPLY 1)))))) (FREF 4 (PUSH (GREF cdr (APPLY 1)))))) (CONST defmacro (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST call/cc (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST def (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST set! (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST if (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST ^ (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST quote (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))))))) (LREF 0 (PUSH (GREF car (APPLY 1))))) (SHIFT 1 (APPLY 1)))))))))))))) (FRAME (PUSH (GREF no (APPLY 1))) (FREF 3 (PUSH (LREF 0 (PUSH (GREF iso (APPLY 2)))))))) (SHIFT 1 (APPLY 1)))))))))))) (FRAME (PUSH (LREF 0 (PUSH (GREF expand-macro (APPLY 2))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 1 (PUSH (GREF car (APPLY 1)))))) (LREF 1 (PUSH (GREF cdr (APPLY 1))))))) (LREF 3 (PUSH (LREF 0 (PUSH (CONST CONST (PUSH (GREF list (SHIFT 3 (APPLY 3)))))))))) (LREF 0 (PUSH (GREF pair? (APPLY 1)))))) (LREF 0 (PUSH (GREF symbol? (APPLY 1))))) (DEF compile-recur (HALT)))
(CLOSE (1 1) 0 (LREF 0 (PUSH (CONST UNDEF (PUSH (GREF list (SHIFT 2 (APPLY 2))))))) (DEF compile-undef (HALT)))
(CLOSE (5 5) 0 (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (LREF 4 (PUSH (CLOSE (1 1) 5 (FRAME (PUSH (FREF 3 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (CLOSE (1 1) 3 (BOX 0 (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 4 (FRAME (TEST (FRAME (TEST (LREF 1 (RET)) (LREF 1 (PUSH (FREF 1 (PUSH (CONST FRAME (PUSH (GREF list (SHIFT 3 (APPLY 3)))))))))) (FREF 1 (PUSH (GREF tail? (APPLY 1))))) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (FRAME (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (FRAME (PUSH (GREF compile-recur (APPLY 4))) (LREF 0 (PUSH (GREF car (APPLY 1)))))))))) (LREF 1 (PUSH (CONST PUSH (PUSH (GREF list (APPLY 2))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))))))) (APPLY 1)))))))))))))) (FRAME (TEST (FRAME #0=(PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FREF 4 (PUSH (GREF compile-recur (APPLY 4))))))))) (FRAME (PUSH (CONST (SHIFT) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (APPLY) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1))))))))))))))) (FRAME #0# (FRAME (PUSH (CONST (APPLY) (PUSH (GREF append (APPLY 2))))) (CONST () (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (LREF 0 (PUSH (GREF list (APPLY 1)))))))))) (FREF 0 (PUSH (GREF tail? (APPLY 1)))))) (SHIFT 1 (APPLY 1)))))))))))))) (LREF 1 (PUSH (GREF len (APPLY 1))))) (DEF compile-apply (HALT)))
(CLOSE (5 5) 0 (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (LREF 4 (PUSH (CLOSE (1 1) 5 (FRAME (TEST (FRAME #0=(PUSH (FRAME (PUSH (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (3 3) 5 (FRAME (PUSH (FREF 3 (PUSH (LREF 0 (PUSH (GREF collect-free (SHIFT 3 (APPLY 3)))))))) (FREF 1 (PUSH (FRAME (PUSH (FRAME (PUSH (LREF 2 (PUSH (CONST CLOSE (PUSH (GREF list (APPLY 5))))))) (LREF 0 (PUSH (GREF len (APPLY 1)))))) (FRAME (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (GREF make-boxes (APPLY 3))))))) (FREF 2 (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (FREF 4 (PUSH (FREF 0 (PUSH (GREF compile-lambda-bodies (APPLY 5))))))))))))))))) (SHIFT 3 (APPLY 3)))))))))))))) (FRAME (PUSH (FRAME (PUSH (GREF set-intersect (APPLY 2))) (FRAME (PUSH (FRAME (PUSH (GREF set-union (APPLY 2))) (FREF 2 (PUSH (GREF car (APPLY 1)))))) (FREF 2 (PUSH (GREF cdr (APPLY 1))))))) (LREF 0 (PUSH (CONST () (PUSH (FREF 3 (PUSH (GREF find-frees (APPLY 3))))))))))) (FRAME (PUSH (FREF 3 (PUSH (GREF find-setses (APPLY 2))))) (LREF 0 (PUSH (GREF dotted->proper (APPLY 1))))))) (FRAME (PUSH (FRAME (PUSH (GREF list (APPLY 2))) (FREF 4 (PUSH (GREF len (APPLY 1)))))) (FREF 4 (PUSH (GREF len (APPLY 1)))))) (FRAME #0# (CONST -1 (PUSH (FRAME (PUSH (GREF list (APPLY 2))) (CONST 1 (PUSH (FRAME (PUSH (GREF - (APPLY 2))) (LREF 0 (PUSH (GREF len (APPLY 1)))))))))))) (LREF 0 (PUSH (FREF 4 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))))))) (LREF 0 (PUSH (GREF dotted->proper (APPLY 1))))) (DEF compile-lambda (HALT)))
(CLOSE (5 5) 0 (FRAME (PUSH (FRAME (PUSH (FRAME (PUSH (LREF 1 (PUSH (CLOSE (3 3) 1 (FRAME (TEST (LREF 2 (PUSH (GREF compile-undef (SHIFT 1 (APPLY 1))))) (FREF 0 (PUSH (FRAME (SHIFT 1 (APPLY 1)) (CONST () (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (CLOSE (1 1) 3 (BOX 0 (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 4 (FRAME (TEST (FREF 1 (RET)) (FRAME (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (FRAME (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))) (LREF 0 (PUSH (GREF car (APPLY 1)))))))))) (FRAME (PUSH (FREF 0 (UNBOX (APPLY 1)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))))))) (APPLY 1)))))))))))))) (FREF 0 (PUSH (GREF no (APPLY 1))))) (SHIFT 3 (APPLY 3)))))) (LREF 2 (PUSH (LREF 0 (PUSH (GREF cons (APPLY 2)))))))) (FRAME (PUSH (LREF 3 (PUSH (GREF set-union (APPLY 2))))) (LREF 2 (PUSH (LREF 4 (PUSH (GREF set-intersect (APPLY 2))))))))) (CONST RET (PUSH (GREF list (APPLY 1))))) (DEF compile-lambda-bodies (HALT)))
(CLOSE (3 3) 0 (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (CONST () (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (BOX 0 (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 2 (FRAME (TEST (LREF 0 (RET)) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (FRAME (PUSH (LREF 0 (PUSH (GREF set-union (APPLY 2))))) (FREF 1 (PUSH (FRAME (PUSH (GREF find-free (APPLY 2))) (LREF 1 (PUSH (GREF car (APPLY 1)))))))))) (LREF 1 (PUSH (GREF cdr (APPLY 1)))))) (LREF 1 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))) (APPLY 1))))))))))) (SHIFT 1 (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-union (APPLY 2))) (LREF 2 (PUSH (GREF dotted->proper (APPLY 1)))))))) (DEF find-frees (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (FRAME (TEST (CONST () #0=(RET)) (LREF 0 (PUSH (GREF list (SHIFT 1 (APPLY 1)))))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF set-member? (APPLY 2))))))) (FRAME (TEST (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 2 (FRAME (TEST (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-free (SHIFT 2 (APPLY 2))))))) (LREF 0 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 2 (FRAME (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 3 (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (1 -1) 1 (LREF 0 (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (CLOSE (1 1) 0 (CONST () (RET)) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (0 -1) 1 (CONST () (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (2 2) 1 (FRAME (PUSH (FRAME (TEST (CONST () #1=(PUSH (GREF set-union (SHIFT 2 (APPLY 2))))) (FRAME #1# (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FREF 0 (PUSH (LREF 0 (PUSH (GREF set-member? (APPLY 2)))))))) (FREF 0 (PUSH (LREF 1 (PUSH (GREF find-free (APPLY 2))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (2 2) 1 (FRAME (PUSH (FRAME (TEST (CONST () #2=(PUSH (GREF set-union (SHIFT 2 (APPLY 2))))) (FRAME #2# (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FREF 0 (PUSH (LREF 0 (PUSH (GREF set-member? (APPLY 2)))))))) (FREF 0 (PUSH (LREF 1 (PUSH (GREF find-free (APPLY 2))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (0 -1) 1 (CONST () (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (2 -1) 1 (LREF 1 (PUSH (FREF 0 (PUSH (LREF 2 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (CONST () (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3)))))))))) (CONST defmacro (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST call/cc (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST def (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST set! (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST if (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST quote (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST ^ (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))) (LREF 0 (PUSH (GREF car (APPLY 1))))) (SHIFT 1 (APPLY 1)))))))))) (FRAME (PUSH (GREF no (APPLY 1))) (FREF 1 (PUSH (LREF 0 (PUSH (GREF iso (APPLY 2)))))))) (SHIFT 1 (APPLY 1)))))))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF expand-macro (APPLY 2))))))) (CONST () #0#)) (LREF 0 (PUSH (GREF pair? (APPLY 1)))))) (LREF 0 (PUSH (GREF symbol? (APPLY 1))))) (DEF find-free (HALT)))
(CLOSE (3 3) 0 (FRAME (TEST (LREF 2 (RET)) (FRAME (PUSH (LREF 1 (PUSH (FRAME (PUSH (GREF collect-free (SHIFT 3 (APPLY 3)))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))))) (FRAME (PUSH (LREF 1 (PUSH (FRAME (PUSH (GREF compile-refer (APPLY 3))) (LREF 0 (PUSH (GREF car (APPLY 1)))))))) (LREF 2 (PUSH (CONST PUSH (PUSH (GREF list (APPLY 2))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (DEF collect-free (HALT)))
(CLOSE (2 2) 0 (LREF 0 (PUSH (CONST () (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (LREF 1 (PUSH (CLOSE (1 1) 1 (BOX 0 (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 2 (FRAME (TEST (LREF 0 (RET)) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (FRAME (PUSH (LREF 0 (PUSH (GREF set-union (APPLY 2))))) (FREF 1 (PUSH (FRAME (PUSH (GREF find-sets (APPLY 2))) (LREF 1 (PUSH (GREF car (APPLY 1)))))))))) (LREF 1 (PUSH (GREF cdr (APPLY 1)))))) (LREF 1 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))) (APPLY 1))))))))))) (DEF find-setses (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 2 (FRAME (TEST (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-sets (SHIFT 2 (APPLY 2))))))) (FREF 1 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (CLOSE (1 1) 2 (FRAME (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 3 (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (2 2) 1 (FRAME (PUSH (FRAME (TEST (FRAME #0=(PUSH (GREF set-union (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF list (APPLY 1))))) (CONST () #0#)) (FREF 0 (PUSH (LREF 0 (PUSH (GREF set-member? (APPLY 2)))))))) (FREF 0 (PUSH (LREF 1 (PUSH (GREF find-sets (APPLY 2))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (2 2) 1 (FREF 0 (PUSH (LREF 1 (PUSH (GREF find-sets (SHIFT 2 (APPLY 2))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (1 -1) 1 (FRAME (PUSH (LREF 1 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FREF 0 (PUSH (GREF set-minus (APPLY 2))))) (LREF 0 (PUSH (GREF dotted->proper (APPLY 1)))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (CLOSE (0 -1) 0 (CONST () (RET)) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (0 -1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (0 -1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (2 -1) 1 (FRAME (PUSH (LREF 2 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FREF 0 (PUSH (GREF set-minus (APPLY 2))))) (LREF 1 (PUSH (GREF dotted->proper (APPLY 1)))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FREF 1 (PUSH (FREF 2 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2)))))))) (CONST defmacro (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST call/cc (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST if (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST quote (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST ^ (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST def (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST set! (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))) (LREF 0 (PUSH (GREF car (APPLY 1))))) (SHIFT 1 (APPLY 1)))))))))) (FRAME (PUSH (GREF no (APPLY 1))) (FREF 1 (PUSH (LREF 0 (PUSH (GREF iso (APPLY 2)))))))) (SHIFT 1 (APPLY 1)))))))) (CONST () (PUSH (LREF 0 (PUSH (GREF expand-macro (APPLY 2))))))) (CONST () (RET))) (LREF 0 (PUSH (GREF pair? (APPLY 1))))) (DEF find-sets (HALT)))
(CLOSE (3 3) 0 (CONST 0 (PUSH (LREF 1 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (LREF 0 (PUSH (LREF 2 (PUSH (CLOSE (1 1) 2 (BOX 0 (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 3 (FRAME (TEST (FREF 1 (RET)) (FRAME (TEST (FRAME (PUSH (LREF 1 (PUSH (CONST BOX (PUSH (GREF list (SHIFT 3 (APPLY 3)))))))) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (APPLY 2)))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (CONST 1 (PUSH (LREF 1 (PUSH (GREF + (APPLY 2)))))))) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (CONST 1 (PUSH (LREF 1 (PUSH (GREF + (APPLY 2)))))))) (FREF 2 (PUSH (FRAME (PUSH (GREF set-member? (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))))) (APPLY 1))))))))))))) (DEF make-boxes (HALT)))
(CLOSE (3 3) 0 (LREF 0 (PUSH (LREF 2 (PUSH (CLOSE (0 0) 2 (FREF 0 (PUSH (FREF 1 (PUSH (CONST GREF (PUSH (GREF list (SHIFT 3 (APPLY 3))))))))) (PUSH (LREF 2 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (CONST FREF (PUSH (GREF list (SHIFT 3 (APPLY 3))))))))) (PUSH (LREF 2 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (CONST LREF (PUSH (GREF list (SHIFT 3 (APPLY 3))))))))) (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF compile-lookup (SHIFT 5 (APPLY 5))))))))))))))))))))) (DEF compile-refer (HALT)))
(CLOSE (2 2) 0 (CONST 0 (PUSH (LREF 1 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (BOX 0 (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 2 (FRAME (TEST (GREF nil #0=(RET)) (FRAME (TEST (LREF 1 #0#) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (CONST 1 (PUSH (LREF 1 (PUSH (GREF + (APPLY 2)))))))) (FREF 1 (PUSH (FRAME (PUSH (GREF is (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))) (APPLY 1))))))))))) (DEF find-index (HALT)))
(CLOSE (5 5) 0 (FRAME (PUSH (FRAME (PUSH (LREF 0 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (LREF 4 (PUSH (CLOSE (2 2) 4 (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 5 (LREF 0 (TEST (LREF 0 (PUSH (FREF 3 (SHIFT 1 (APPLY 1))))) (FRAME (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (1 1) 2 (LREF 0 (TEST (LREF 0 (PUSH (FREF 1 (SHIFT 1 (APPLY 1))))) (FREF 0 (SHIFT 0 (APPLY 0))))) (SHIFT 1 (APPLY 1)))))))) (FREF 0 (PUSH (FREF 4 (PUSH (GREF find-index (APPLY 2))))))))) (SHIFT 1 (APPLY 1)))))))))))))) (LREF 0 (PUSH (FREF 3 (PUSH (GREF find-index (APPLY 2))))))) (SHIFT 2 (APPLY 2)))))))))))) (LREF 1 (PUSH (GREF car (APPLY 1)))))) (LREF 1 (PUSH (GREF cdr (APPLY 1))))) (DEF compile-lookup (HALT)))
(CLOSE (1 1) 0 (CONST RET (PUSH (FRAME (PUSH (GREF is (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF car (APPLY 1))))))) (DEF tail? (HALT)))
(CLOSE (4 4) 0 (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (CLOSE (1 1) 4 (FRAME (PUSH (FRAME (TEST (FRAME #0=(PUSH (FRAME (TEST (FRAME #1=(PUSH (FREF 3 (PUSH (FREF 0 (PUSH (CLOSE (3 3) 2 (FREF 0 (PUSH (LREF 2 (PUSH (FRAME (PUSH (FREF 1 (PUSH (CONST MACRO (PUSH (GREF list (SHIFT 5 (APPLY 5)))))))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF list (APPLY 2))))))))))) (SHIFT 3 (APPLY 3)))))))) (FREF 2 (PUSH (GREF len (APPLY 1))))) (FRAME #1# (CONST 1 (PUSH (FRAME (PUSH (GREF - (APPLY 2))) (LREF 0 (PUSH (GREF len (APPLY 1))))))))) (LREF 0 (PUSH (FREF 2 (PUSH (GREF is (APPLY 2)))))))) (FREF 2 (PUSH (GREF len (APPLY 1))))) (CONST -1 #0#)) (LREF 0 (PUSH (FREF 2 (PUSH (GREF is (APPLY 2)))))))) (CONST () (PUSH (CONST () (PUSH (FRAME (PUSH (FREF 1 (PUSH (LREF 0 (PUSH (GREF compile-lambda-bodies (APPLY 5))))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))))))) (SHIFT 1 (APPLY 1)))))))))))) (LREF 1 (PUSH (GREF dotted->proper (APPLY 1))))) (DEF compile-defmacro (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (FRAME (TEST (FRAME #0=(TEST (FRAME (PUSH (FRAME (PUSH (CLOSE (2 2) 0 (FRAME (PUSH (LREF 1 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (GREF apply (SHIFT 2 (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))) (LREF 0 (PUSH (GREF *macro-table* (PUSH (GREF hash-table-get (APPLY 2))))))) (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (LREF 0 (RET))) (FRAME (PUSH (GREF no (APPLY 1))) (LREF 1 (PUSH (FRAME (PUSH (GREF member (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (UNDEF #0#)) (FRAME (PUSH (GREF macro? (APPLY 1))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (UNDEF #0#)) (LREF 0 (PUSH (GREF pair? (APPLY 1))))) (DEF expand-macro (HALT)))
(CLOSE (1 1) 0 (CONST () (PUSH (LREF 0 (PUSH (GREF expand-macro (SHIFT 2 (APPLY 2))))))) (DEF macroexpand-1 (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (FRAME (TEST (FREF 0 (RET)) (LREF 0 (PUSH (GREF macroexpand (SHIFT 1 (APPLY 1)))))) (FREF 0 (PUSH (LREF 0 (PUSH (GREF iso (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))) (LREF 0 (PUSH (GREF macroexpand-1 (APPLY 1))))) (DEF macroexpand (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (GREF run-binary (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF compile (APPLY 1))))) (DEF eval (HALT)))
