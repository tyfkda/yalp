(VOID VOID HALT)
(FRAME (CLOSE 2 0 (ADDSP 1 NIL LOCAL -2 . #0=(FRAME (CONST (#\nl nil) PUSH FRAME (LREF 0 PUSH GREF read-char APPLY 1) PUSH GREF member APPLY 2) TEST (VOID VOID RET) LOOP 1 0 . #0#)) PUSH CONST #\; PUSH GREF set-macro-character APPLY 2) HALT)
(FRAME (CLOSE 2 0 (FRAME (LREF 0 PUSH GREF read APPLY 1) PUSH CONST quote PUSH GREF list TAPPLY 2) PUSH CONST #\' PUSH GREF set-macro-character APPLY 2) HALT)
(FRAME (CLOSE 2 0 (FRAME (LREF 0 PUSH CONST #\] PUSH GREF read-delimited-list APPLY 2) PUSH CONST (_) PUSH CONST ^ PUSH GREF list TAPPLY 3) PUSH CONST #\[ PUSH GREF set-macro-character APPLY 2) HALT)
(MACRO defun (2 -1) 0 (FRAME (LREF 2 PUSH LREF 1 PUSH CONST ^ PUSH GREF list* APPLY 3) PUSH LREF 0 PUSH CONST def PUSH GREF list TAPPLY 3) HALT)
(CLOSE 1 0 (LREF 0 TEST (NIL . #0=(RET)) CONST t . #0#) DEF not HALT)
(CLOSE 1 0 (LREF 0 CAR CAR RET) DEF caar CLOSE 1 0 (LREF 0 CAR CDR RET) DEF cdar CLOSE 1 0 (LREF 0 CDR CAR RET) DEF cadr CLOSE 1 0 (LREF 0 CDR CDR RET) DEF cddr CLOSE 1 0 (LREF 0 CAR CDR CAR RET) DEF cadar CLOSE 1 0 (LREF 0 CDR CDR CAR RET) DEF caddr CLOSE 1 0 (LREF 0 CDR CDR CDR RET) DEF cdddr CLOSE 1 0 (LREF 0 CDR CDR CDR CAR RET) DEF cadddr CLOSE 1 0 (LREF 0 CDR CDR CDR CDR RET) DEF cddddr CLOSE 1 0 (LREF 0 CDR CDR CDR CDR CAR RET) DEF caddddr CLOSE 1 0 (LREF 0 CDR CDR CDR CDR CDR RET) DEF cdddddr HALT)
(CLOSE 1 0 (CONST int PUSH FRAME (LREF 0 PUSH GREF type APPLY 1) EQ RET) DEF int? HALT)
(CLOSE 1 0 (CONST pair PUSH FRAME (LREF 0 PUSH GREF type APPLY 1) EQ RET) DEF pair? HALT)
(CLOSE 1 0 (CONST symbol PUSH FRAME (LREF 0 PUSH GREF type APPLY 1) EQ RET) DEF symbol? HALT)
(CLOSE 1 0 (CONST string PUSH FRAME (LREF 0 PUSH GREF type APPLY 1) EQ RET) DEF string? HALT)
(CLOSE 1 0 (CONST flonum PUSH FRAME (LREF 0 PUSH GREF type APPLY 1) EQ RET) DEF flonum? HALT)
(CLOSE 2 0 #0=(FRAME (LREF 1 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 1 CAR PUSH LREF 0 APPLY 1) TEST (LREF 1 . #1=(RET)) LREF 1 CDR PUSH LREF 0 PUSH LOOP 0 2 . #0#) NIL . #1#) DEF any? HALT)
(CLOSE 2 0 #0=(LREF 1 TEST (FRAME (LREF 1 CAR PUSH LREF 0 APPLY 1) TEST (LREF 1 CDR PUSH LREF 0 PUSH LOOP 0 2 . #0#) NIL . #1=(RET)) CONST t . #1#) DEF all? HALT)
(CLOSE (2 -1) 0 (ADDSP 4 LREF 2 TEST (NIL LOCAL -2 NIL LOCAL -4 FRAME (LREF 2 PUSH LREF 1 PUSH GREF cons APPLY 2) LOCAL -3 . #0=(FRAME (LREF -3 PUSH GREF not PUSH GREF any? APPLY 2) TEST (LREF -4 PUSH GREF reverse! TAPPLY 1) FRAME (LREF -4 PUSH FRAME (FRAME (LREF -3 PUSH GREF car PUSH GREF map APPLY 2) PUSH LREF 0 PUSH GREF apply APPLY 2) PUSH GREF cons APPLY 2) PUSH FRAME (LREF -3 PUSH GREF cdr PUSH GREF map APPLY 2) PUSH LOOP 1 2 . #0#)) NIL LOCAL -2 NIL LOCAL -4 LREF 1 LOCAL -3 . #1=(FRAME (LREF -3 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF -4 PUSH FRAME (LREF -3 CAR PUSH LREF 0 APPLY 1) PUSH GREF cons APPLY 2) PUSH LREF -3 CDR PUSH LOOP 1 2 . #1#) FRAME (LREF -4 PUSH GREF reverse! APPLY 1) LOCAL -5 LREF -3 TEST (LREF -4 TEST (FRAME (FRAME (LREF -3 PUSH LREF 0 APPLY 1) PUSH LREF -4 PUSH GREF set-cdr! APPLY 2) LREF -5 . #2=(RET)) LREF -3 PUSH LREF 0 TAPPLY 1) LREF -5 . #2#)) DEF map HALT)
(MACRO do (0 -1) 0 (FRAME (LREF 0 PUSH NIL PUSH CONST ^ PUSH GREF list* APPLY 3) PUSH GREF list TAPPLY 1) HALT)
(MACRO when (1 -1) 0 (FRAME (LREF 1 PUSH CONST do PUSH GREF list* APPLY 2) PUSH LREF 0 PUSH CONST if PUSH GREF list TAPPLY 3) HALT)
(MACRO unless (1 -1) 0 (FRAME (LREF 1 PUSH CONST do PUSH GREF list* APPLY 2) PUSH CONST (do) PUSH LREF 0 PUSH CONST if PUSH GREF list TAPPLY 4) HALT)
(MACRO set! (2 -1) 0 (LREF 2 TEST (FRAME (LREF 2 PUSH CONST set! PUSH GREF list* APPLY 2) PUSH FRAME (LREF 1 PUSH LREF 0 PUSH CONST set! PUSH GREF list APPLY 3) PUSH CONST do PUSH GREF list TAPPLY 3) LREF 1 PUSH LREF 0 PUSH CONST set! PUSH GREF list TAPPLY 3) HALT)
(MACRO and (0 -1) 0 (LREF 0 TEST (LREF 0 CDR TEST (CONST ('nil) PUSH FRAME (LREF 0 CDR PUSH CONST and PUSH GREF list* APPLY 2) PUSH LREF 0 CAR PUSH CONST if PUSH GREF list* TAPPLY 4) LREF 0 CAR . #0=(RET)) CONST t . #0#) HALT)
(MACRO let1 (2 -1) 0 (LREF 1 PUSH FRAME (LREF 2 PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH CONST ^ PUSH GREF list* APPLY 3) PUSH GREF list TAPPLY 2) HALT)
(MACRO let (1 -1) 0 (ADDSP 3 FRAME (LREF 0 PUSH GREF symbol? APPLY 1) TEST (LREF 0 TEST (LREF 1 CDR LOCAL -4 LREF 1 CAR LOCAL -3 LREF 0 LOCAL -2 FRAME (FRAME (LREF -3 PUSH GREF cadr PUSH GREF map APPLY 2) PUSH LREF -2 PUSH GREF list* APPLY 2) PUSH FRAME (FRAME (LREF -4 PUSH FRAME (LREF -3 PUSH GREF car PUSH GREF map APPLY 2) PUSH CONST ^ PUSH GREF list* APPLY 3) PUSH LREF -2 PUSH CONST set! PUSH GREF list APPLY 3) PUSH NIL PUSH LREF -2 PUSH CONST let1 PUSH GREF list TAPPLY 5) FRAME . #1=((LREF 0 PUSH CLOSE 1 0 (ADDSP 1 FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 CDR PUSH GREF single? APPLY 1) LOCAL -2 TEST (VOID . #0=(LREF 0 LOCAL -2 CDR CAR RET)) CONST t TEST (FRAME (LREF 0 PUSH CONST "malformed let: %@" PUSH GREF compile-error APPLY 2) . #0#) VOID . #0#) VOID . #0#) PUSH GREF map APPLY 2) PUSH FRAME (LREF 1 PUSH FRAME (LREF 0 PUSH GREF car PUSH GREF map APPLY 2) PUSH CONST ^ PUSH GREF list* APPLY 3) PUSH GREF list* TAPPLY 2)) FRAME . #1#) HALT)
(MACRO let* (1 -1) 0 (LREF 0 TEST (FRAME (FRAME (FRAME (LREF 1 PUSH LREF 0 CDR PUSH CONST let* PUSH GREF list* APPLY 3) PUSH GREF list APPLY 1) PUSH LREF 0 CAR PUSH GREF append APPLY 2) PUSH CONST let1 PUSH GREF list* TAPPLY 2) LREF 1 PUSH CONST do PUSH GREF list* TAPPLY 2) HALT)
(MACRO alet (1 -1) 0 (LREF 1 PUSH LREF 0 PUSH CONST loop PUSH CONST let PUSH GREF list* TAPPLY 4) HALT)
(CLOSE 2 0 (ADDSP 4 LREF 0 TEST (LREF 0 CDR LOCAL -3 LREF 0 CAR LOCAL -2 CDR LOCAL -5 LREF -2 CAR LOCAL -4 CONST t PUSH LREF -4 EQ TEST (LREF -3 TEST (CONST "else clause must comes at last in cond" PUSH GREF compile-error TAPPLY 1) LREF -5 PUSH CONST do PUSH GREF list* TAPPLY 2) LREF -3 PUSH LREF -5 PUSH LREF -4 PUSH LREF 1 TAPPLY 3) NIL RET) DEF cond-template HALT)
(MACRO cond (0 -1) 0 (CLOSE 3 0 (FRAME (LREF 2 PUSH CONST cond PUSH GREF list* APPLY 2) PUSH FRAME (LREF 1 PUSH CONST do PUSH GREF list* APPLY 2) PUSH LREF 0 PUSH CONST if PUSH GREF list TAPPLY 4) PUSH LREF 0 PUSH GREF cond-template TAPPLY 2) HALT)
(MACRO acond (0 -1) 0 (CLOSE 3 0 (ADDSP 1 FRAME (GREF gensym APPLY 0) LOCAL -2 FRAME (FRAME (LREF 2 PUSH CONST acond PUSH GREF list* APPLY 2) PUSH FRAME (LREF 1 PUSH LREF -2 PUSH CONST it PUSH CONST let1 PUSH GREF list* APPLY 4) PUSH LREF -2 PUSH CONST if PUSH GREF list APPLY 4) PUSH LREF 0 PUSH LREF -2 PUSH CONST let1 PUSH GREF list TAPPLY 4) PUSH LREF 0 PUSH GREF cond-template TAPPLY 2) HALT)
(MACRO aif (1 -1) 0 (FRAME (LREF 1 PUSH CONST it PUSH CONST if PUSH GREF list* APPLY 3) PUSH LREF 0 PUSH CONST it PUSH CONST let1 PUSH GREF list TAPPLY 4) HALT)
(MACRO awhen (1 -1) 0 (FRAME (LREF 1 PUSH CONST do PUSH GREF list* APPLY 2) PUSH LREF 0 PUSH CONST aif PUSH GREF list TAPPLY 3) HALT)
(MACRO let-gensym (1 -1) 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (LREF 1 PUSH FRAME (LREF 0 PUSH CLOSE 1 0 (CONST (gensym) PUSH LREF 0 PUSH GREF list TAPPLY 2) PUSH GREF map APPLY 2) PUSH CONST let PUSH GREF list* TAPPLY 3) LREF 1 PUSH CONST (gensym) PUSH LREF 0 PUSH CONST let1 PUSH GREF list* TAPPLY 4) HALT)
(MACRO while (1 -1) 0 (ADDSP 1 FRAME (GREF gensym APPLY 0) LOCAL -2 FRAME (FRAME (FRAME (FRAME (LREF -2 PUSH GREF list APPLY 1) PUSH GREF list APPLY 1) PUSH LREF 1 PUSH GREF append APPLY 2) PUSH LREF 0 PUSH CONST when PUSH GREF list* APPLY 3) PUSH NIL PUSH LREF -2 PUSH CONST let PUSH GREF list TAPPLY 4) HALT)
(MACRO awhile (1 -1) 0 (ADDSP 1 FRAME (GREF gensym APPLY 0) LOCAL -2 FRAME (FRAME (FRAME (FRAME (LREF -2 PUSH GREF list APPLY 1) PUSH GREF list APPLY 1) PUSH LREF 1 PUSH GREF append APPLY 2) PUSH LREF 0 PUSH CONST awhen PUSH GREF list* APPLY 3) PUSH NIL PUSH LREF -2 PUSH CONST let PUSH GREF list TAPPLY 4) HALT)
(MACRO until (1 -1) 0 (ADDSP 1 FRAME (GREF gensym APPLY 0) LOCAL -2 FRAME (FRAME (FRAME (FRAME (LREF -2 PUSH GREF list APPLY 1) PUSH GREF list APPLY 1) PUSH LREF 1 PUSH GREF append APPLY 2) PUSH LREF 0 PUSH CONST unless PUSH GREF list* APPLY 3) PUSH NIL PUSH LREF -2 PUSH CONST let PUSH GREF list TAPPLY 4) HALT)
(MACRO or (0 -1) 0 (ADDSP 1 LREF 0 TEST (FRAME (GREF gensym APPLY 0) LOCAL -2 FRAME (FRAME (LREF 0 CDR PUSH CONST or PUSH GREF list* APPLY 2) PUSH LREF -2 PUSH LREF -2 PUSH CONST if PUSH GREF list APPLY 4) PUSH LREF 0 CAR PUSH LREF -2 PUSH CONST let1 PUSH GREF list TAPPLY 4) NIL RET) HALT)
(MACRO case (1 -1) 0 (ADDSP 1 FRAME (GREF gensym APPLY 0) LOCAL -2 FRAME (FRAME (LREF 1 PUSH LREF -2 PUSH CLOSE 1 1 (ADDSP 2 LREF 0 CDR LOCAL -3 LREF 0 CAR LOCAL -2 CONST t PUSH LREF -2 EQ TEST (LREF 0 RET) FRAME (LREF -2 PUSH GREF pair? APPLY 1) TEST (LREF -3 PUSH FRAME (FRAME (LREF -2 PUSH CONST quote PUSH GREF list APPLY 2) PUSH FREF 0 PUSH CONST member PUSH GREF list APPLY 3) PUSH GREF list* TAPPLY 2) LREF -3 PUSH FRAME (FRAME (LREF -2 PUSH CONST quote PUSH GREF list APPLY 2) PUSH FREF 0 PUSH CONST eq? PUSH GREF list APPLY 3) PUSH GREF list* TAPPLY 2) PUSH GREF map APPLY 2) PUSH CONST cond PUSH GREF list* APPLY 2) PUSH LREF 0 PUSH LREF -2 PUSH CONST let1 PUSH GREF list TAPPLY 4) HALT)
(MACRO dolist (1 -1) 0 (ADDSP 4 LREF 0 LOCAL -2 CDR CAR LOCAL -3 LREF 0 CAR LOCAL -2 FRAME (GREF gensym APPLY 0) LOCAL -5 FRAME (GREF gensym APPLY 0) LOCAL -4 FRAME (FRAME (FRAME (FRAME (FRAME (FRAME (LREF -4 PUSH CONST cdr PUSH GREF list APPLY 2) PUSH LREF -5 PUSH GREF list APPLY 2) PUSH GREF list APPLY 1) PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (LREF -4 PUSH CONST car PUSH GREF list APPLY 2) PUSH LREF -2 PUSH CONST let1 PUSH GREF list* APPLY 4) PUSH FRAME (LREF -4 PUSH CONST pair? PUSH GREF list APPLY 2) PUSH CONST when PUSH GREF list APPLY 3) PUSH FRAME (FRAME (LREF -3 PUSH LREF -4 PUSH GREF list APPLY 2) PUSH GREF list APPLY 1) PUSH LREF -5 PUSH CONST let PUSH GREF list TAPPLY 4) HALT)
(MACRO for0-n (2 -1) 0 (ADDSP 2 FRAME (GREF gensym APPLY 0) LOCAL -3 FRAME (GREF gensym APPLY 0) LOCAL -2 FRAME (FRAME (FRAME (FRAME (FRAME (FRAME (CONST (1) PUSH LREF 0 PUSH CONST + PUSH GREF list* APPLY 3) PUSH LREF -3 PUSH GREF list APPLY 2) PUSH GREF list APPLY 1) PUSH LREF 2 PUSH GREF append APPLY 2) PUSH FRAME (LREF -2 PUSH LREF 0 PUSH CONST < PUSH GREF list APPLY 3) PUSH CONST when PUSH GREF list* APPLY 3) PUSH FRAME (FRAME (CONST (0) PUSH LREF 0 PUSH GREF list* APPLY 2) PUSH GREF list APPLY 1) PUSH LREF -3 PUSH CONST let PUSH GREF list APPLY 4) PUSH LREF 1 PUSH LREF -2 PUSH CONST let1 PUSH GREF list TAPPLY 4) HALT)
(CLOSE 1 0 (ADDSP 4 FRAME (LREF 0 PUSH GREF type APPLY 1) LOCAL -2 CONST pair PUSH LREF -2 EQ TEST (NIL LOCAL -3 CONST 0 LOCAL -5 LREF 0 LOCAL -4 . #0=(FRAME (LREF -4 PUSH GREF pair? APPLY 1) TEST (CONST 1 PUSH LREF -5 PUSH ADD 2 PUSH LREF -4 CDR PUSH LOOP 2 2 . #0#) LREF -5 . #1=(RET))) CONST string PUSH LREF -2 EQ TEST (LREF 0 PUSH GREF string-length TAPPLY 1) CONST vector PUSH LREF -2 EQ TEST (LREF 0 PUSH GREF vector-length TAPPLY 1) CONST 0 . #1#) DEF length HALT)
(CLOSE 1 0 #0=(FRAME (LREF 0 CDR PUSH GREF pair? APPLY 1) TEST (LREF 0 CDR PUSH LOOP 0 1 . #0#) LREF 0 RET) DEF last HALT)
(CLOSE 1 0 (ADDSP 3 NIL LOCAL -2 NIL LOCAL -4 LREF 0 LOCAL -3 . #0=(FRAME (LREF -3 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF -4 PUSH LREF -3 CAR PUSH GREF cons APPLY 2) PUSH LREF -3 CDR PUSH LOOP 1 2 . #0#) LREF -4 RET)) DEF reverse HALT)
(CLOSE 2 0 (ADDSP 4 NIL LOCAL -2 NIL LOCAL -4 LREF 1 LOCAL -3 . #0=(FRAME (LREF -3 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF -4 PUSH FRAME (LREF -3 PUSH LREF 0 APPLY 1) PUSH GREF cons APPLY 2) PUSH LREF -3 CDR PUSH LOOP 1 2 . #0#) FRAME (LREF -4 PUSH GREF reverse! APPLY 1) LOCAL -5 LREF -3 TEST (LREF -4 TEST (FRAME (FRAME (LREF -3 PUSH LREF 0 APPLY 1) PUSH LREF -4 PUSH GREF set-cdr! APPLY 2) LREF -5 . #1=(RET)) LREF -3 PUSH LREF 0 TAPPLY 1) LREF -5 . #1#)) DEF maplist HALT)
(CLOSE 2 0 (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 EQ RET) PUSH GREF any? TAPPLY 2) DEF member HALT)
(CLOSE 2 0 (ADDSP 1 . #0=(LREF 1 TEST (LREF 0 PUSH LREF 1 LOCAL -2 CAR CAR EQ TEST (LREF 1 CAR . #1=(RET)) LREF 1 CDR PUSH LREF 0 PUSH LOOP 0 2 . #0#) NIL . #1#)) DEF assoc HALT)
(CLOSE 3 0 (LREF 2 PUSH FRAME (LREF 1 PUSH LREF 0 PUSH GREF cons APPLY 2) PUSH GREF cons TAPPLY 2) DEF acons HALT)
(CLOSE 2 0 (ADDSP 1 . #0=(LREF 0 TEST (LREF 0 CAR LOCAL -2 FRAME (LREF 1 PUSH LREF -2 PUSH GREF member APPLY 2) TEST (LREF 1 . #1=(PUSH LREF 0 CDR PUSH LOOP 0 2 . #0#)) FRAME (LREF 1 PUSH LREF -2 PUSH GREF cons APPLY 2) . #1#) LREF 1 RET)) DEF union HALT)
(CLOSE 2 0 #0=(LREF 0 TEST (FRAME (LREF 1 PUSH LREF 0 CAR PUSH GREF member APPLY 2) TEST (FRAME (LREF 1 PUSH LREF 0 CDR PUSH GREF intersection APPLY 2) PUSH LREF 0 CAR PUSH GREF cons TAPPLY 2) LREF 1 PUSH LREF 0 CDR PUSH LOOP 0 2 . #0#) NIL RET) DEF intersection HALT)
(CLOSE 1 0 (ADDSP 1 FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (LREF 0 CDR LOCAL -2 TEST (NIL . #0=(RET)) CONST t . #0#) NIL . #0#) DEF single? HALT)
(CLOSE 2 0 (ADDSP 1 FRAME (LREF 0 PUSH GREF reverse! APPLY 1) LOCAL -2 FRAME (LREF 1 PUSH LREF 0 PUSH GREF set-cdr! APPLY 2) LREF -2 RET) DEF nreconc HALT)
(CLOSE (1 -1) 0 (ADDSP 1 LREF 1 TEST (LREF 1 CAR . #0=(LOCAL -2 FRAME (LREF -2 PUSH FRAME (LREF 0 PUSH GREF create-ss-table APPLY 1) PUSH LREF 0 PUSH GREF write/ss-print APPLY 3) LREF 0 RET)) GREF *stdout* . #0#) DEF write/ss HALT)
(CONST 0 PUSH ADDSP 1 FRAME (GREF gensym APPLY 0) LOCAL -2 PUSH CLOSE 1 1 (ADDSP 3 CLOSE 3 0 (ADDSP 1 FRAME (LREF 1 PUSH LREF 0 PUSH GREF table-get APPLY 2) TEST (VOID RET) FRAME (LREF 2 PUSH LREF 0 PUSH GREF table-get APPLY 2) LOCAL -2 FRAME (LREF -2 PUSH LREF 1 PUSH LREF 0 PUSH GREF table-put! APPLY 3) LREF -2 PUSH CONST 1 PUSH ADD 2 PUSH LREF 2 PUSH LREF 0 PUSH GREF table-put! TAPPLY 3) LOCAL -3 FRAME (CONST eq? PUSH GREF table APPLY 1) LOCAL -2 FRAME (CONST 0 PUSH FREF 0 PUSH LREF -2 PUSH GREF table-put! APPLY 3) NIL LOCAL -4 BOX -4 FREF 0 PUSH LREF -3 PUSH LREF -4 PUSH LREF -2 PUSH CLOSE 1 4 (ADDSP 5 . #0=(FRAME (LREF 0 PUSH GREF type APPLY 1) LOCAL -2 FRAME (CONST (pair vector) PUSH LREF -2 PUSH GREF member APPLY 2) TEST (FRAME (LREF 0 PUSH FREF 0 PUSH GREF table-exists? APPLY 2) TEST (FREF 3 PUSH LREF 0 PUSH FREF 0 PUSH FREF 2 TAPPLY 3) FRAME (NIL PUSH LREF 0 PUSH FREF 0 PUSH GREF table-put! APPLY 3) LREF -2 LOCAL -3 CONST pair PUSH LREF -3 EQ TEST (FRAME (LREF 0 CAR PUSH FREF 1 UNBOX APPLY 1) LREF 0 CDR PUSH LOOP 0 1 . #0#) CONST vector PUSH LREF -3 EQ TEST (FRAME (LREF 0 PUSH GREF length APPLY 1) LOCAL -4 NIL LOCAL -5 CONST 0 LOCAL -6 . #1=(LREF -4 PUSH LREF -6 PUSH LT 2 TEST (FRAME (FRAME (LREF -6 PUSH LREF 0 PUSH GREF vector-get APPLY 2) PUSH FREF 1 UNBOX APPLY 1) CONST 1 PUSH LREF -6 PUSH ADD 2 PUSH LOOP 4 1 . #1#) VOID . #2=(RET))) NIL . #2#) VOID . #2#)) LSET -4 FRAME (LREF 0 PUSH LREF -4 UNBOX APPLY 1) LREF -2 RET) DEF create-ss-table ADDSP -2 HALT)
(CLOSE 3 0 (ADDSP 9 FRAME (LREF 0 PUSH LREF 1 PUSH GREF table-get APPLY 2) LOCAL -2 TEST (CONST 0 PUSH LREF -2 PUSH LT 2 TEST (LREF -2 PUSH CONST -1 PUSH SUB 2 PUSH CONST "#%@#" PUSH LREF 2 PUSH GREF format TAPPLY 3) LREF . #8=(-2 TEST (FRAME (LREF -2 PUSH CONST "#%@=" PUSH LREF 2 PUSH GREF format APPLY 3) FRAME (LREF -2 PUSH CONST -1 PUSH SUB 2 PUSH LREF 0 PUSH LREF 1 PUSH GREF table-put! APPLY 3) . #7=(FRAME (LREF 0 PUSH GREF type APPLY 1) LOCAL -3 CONST pair PUSH LREF -3 EQ TEST (FRAME (LREF 0 CDR PUSH GREF single? APPLY 1) TEST (FRAME (LREF 0 CDR PUSH LREF 1 PUSH GREF table-get APPLY 2) LOCAL -4 TEST (CONST nil . #5=(LOCAL -4 TEST (FRAME (LREF 2 PUSH LREF -4 CDR PUSH GREF display APPLY 2) LREF 2 PUSH LREF 0 LOCAL -5 CDR CAR PUSH GREF write TAPPLY 2) NIL LOCAL -5 LREF 0 LOCAL -7 CONST "(" LOCAL -6 . #0=(LREF -7 TEST (FRAME (LREF 2 PUSH LREF -6 PUSH GREF display APPLY 2) FRAME (LREF 2 PUSH LREF 1 PUSH LREF -7 CAR PUSH GREF write/ss-print APPLY 3) LREF -7 CDR LOCAL -8 TEST (FRAME (LREF -8 PUSH GREF pair? APPLY 1) LOCAL -9 TEST (NIL . #3=(LOCAL -9 TEST (LREF -9 . #1=(TEST (FRAME (LREF 2 PUSH CONST " . " PUSH GREF display APPLY 2) FRAME (LREF 2 PUSH LREF 1 PUSH LREF -8 PUSH GREF write/ss-print APPLY 3) . #4=(LREF 2 PUSH CONST ")" PUSH GREF display TAPPLY 2)) LREF . #2=(-8 PUSH CONST " " PUSH LOOP 4 2 . #0#))) FRAME (LREF -8 PUSH LREF 1 PUSH GREF table-get APPLY 2) LOCAL -10 TEST (LREF -10 . #1#) LREF . #2#)) CONST t . #3#) NIL . #3#) VOID . #4#))) CONST t TEST (FRAME (CONST ((quote . "'") (quasiquote . "`") (unquote . ",") (unquote-splicing . ",@")) PUSH LREF 0 CAR PUSH GREF assoc APPLY 2) . #5#) NIL . #5#) NIL . #5#) CONST vector PUSH LREF -3 EQ TEST (FRAME (LREF 0 PUSH GREF vector-length APPLY 1) LOCAL -4 NIL LOCAL -5 CONST 0 LOCAL -7 CONST "#(" LOCAL -6 . #6=(LREF -4 PUSH LREF -7 PUSH LT 2 TEST (FRAME (LREF 2 PUSH LREF -6 PUSH GREF display APPLY 2) FRAME (LREF 2 PUSH LREF 1 PUSH FRAME (LREF -7 PUSH LREF 0 PUSH GREF vector-get APPLY 2) PUSH GREF write/ss-print APPLY 3) CONST 1 PUSH LREF -7 PUSH ADD 2 PUSH CONST " " PUSH LOOP 4 2 . #6#) VOID LREF 2 PUSH CONST ")" PUSH GREF display TAPPLY 2)) LREF 2 PUSH LREF 0 PUSH GREF write TAPPLY 2)) VOID . #7#)) LREF . #8#) DEF write/ss-print HALT)
(CLOSE 2 0 (ADDSP 4 NIL LOCAL -2 LREF 1 LOCAL -5 NIL LOCAL -4 LREF 0 LOCAL -3 . #0=(LREF -5 TEST (CONST 0 PUSH LREF -3 PUSH GT 2 TEST (LREF -5 CDR PUSH FRAME (LREF -4 PUSH LREF -5 CAR PUSH GREF cons APPLY 2) PUSH CONST 1 PUSH LREF -3 PUSH SUB 2 PUSH LOOP 1 3 . #0#) LREF . #1=(-4 PUSH GREF reverse! TAPPLY 1)) LREF . #1#)) DEF take HALT)
(CLOSE 2 0 #0=(LREF 1 TEST (CONST 0 PUSH LREF 0 PUSH GT 2 TEST (LREF 1 CDR PUSH CONST 1 PUSH LREF 0 PUSH SUB 2 PUSH LOOP 0 2 . #0#) LREF 1 . #1=(RET)) VOID . #1#) DEF drop HALT)
(CLOSE 2 0 (FRAME (LREF 0 PUSH LREF 1 PUSH GREF drop APPLY 2) CAR RET) DEF elt HALT)
(CLOSE 2 0 (ADDSP 3 NIL LOCAL -2 CONST 0 LOCAL -4 LREF 1 LOCAL -3 . #0=(TEST (FRAME (LREF -3 CAR PUSH LREF 0 APPLY 1) TEST (LREF -4 . #1=(RET)) CONST 1 PUSH LREF -4 PUSH ADD 2 PUSH LREF -3 CDR PUSH LOOP 1 2 LREF -3 . #0#) NIL . #1#)) DEF position-if HALT)
(CLOSE 2 0 (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (FREF 0 PUSH LREF 0 EQ RET) PUSH GREF position-if TAPPLY 2) DEF position HALT)
(CLOSE 1 0 (ADDSP 2 LREF 0 LOCAL -2 TEST (NIL . #2=(LOCAL -2 TEST (LREF -2 . #0=(RET)) FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH GREF last APPLY 1) CDR LOCAL -3 TEST (NIL . #1=(LOCAL -3 TEST (LREF -3 . #0#) NIL . #0#)) CONST t . #1#) NIL . #1#)) CONST t . #2#) DEF list? HALT)
(CLOSE 2 0 (FRAME (LREF 1 CAR PUSH LREF 0 PUSH GREF set-car! APPLY 2) LREF 1 CDR PUSH LREF 0 PUSH GREF set-cdr! TAPPLY 2) DEF copy-pair! HALT)
(CLOSE 2 0 (ADDSP 3 NIL LOCAL -2 NIL LOCAL -4 LREF 1 LOCAL -3 . #0=(TEST (FRAME (LREF -3 CAR PUSH LREF 0 APPLY 1) TEST (LREF -4 . #1=(PUSH LREF -3 CDR PUSH LOOP 1 2 LREF -3 . #0#)) FRAME (LREF -4 PUSH LREF -3 CAR PUSH GREF cons APPLY 2) . #1#) LREF -4 PUSH GREF reverse! TAPPLY 1)) DEF remove-if HALT)
(CLOSE 2 0 (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (ADDSP 1 FRAME (LREF 0 PUSH FREF 0 APPLY 1) LOCAL -2 TEST (NIL . #0=(RET)) CONST t . #0#) PUSH GREF remove-if TAPPLY 2) DEF remove-if-not HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 CDR PUSH GREF copy-list APPLY 1) PUSH FRAME (LREF 0 CAR PUSH GREF copy-list APPLY 1) PUSH GREF cons TAPPLY 2) LREF 0 RET) DEF copy-list HALT)
(CLOSE 2 0 (ADDSP 1 CONST 0 PUSH FRAME (LREF 1 PUSH LREF 0 PUSH GREF logand APPLY 2) EQ LOCAL -2 TEST (NIL . #0=(RET)) CONST t . #0#) DEF bit? HALT)
(FRAME (GREF gensym APPLY 0) DEF *bq-clobberable* HALT)
(FRAME (NIL PUSH CONST quote PUSH GREF list APPLY 2) DEF *bq-quote-nil* HALT)
(FRAME (CLOSE 2 0 (FRAME (LREF 0 PUSH GREF read APPLY 1) PUSH CONST quasiquote PUSH GREF list TAPPLY 2) PUSH CONST #\` PUSH GREF set-macro-character APPLY 2) HALT)
(FRAME (CLOSE 2 0 (ADDSP 2 FRAME (LREF 0 PUSH GREF read-char APPLY 1) LOCAL -2 LOCAL -3 CONST #\@ PUSH LREF -3 EQ TEST (FRAME (LREF 0 PUSH GREF read APPLY 1) PUSH CONST unquote-splicing PUSH GREF list TAPPLY 2) CONST #\. PUSH LREF -3 EQ TEST (FRAME (LREF 0 PUSH GREF read APPLY 1) PUSH CONST unquote-dot PUSH GREF list TAPPLY 2) FRAME (LREF 0 PUSH LREF -2 PUSH GREF unread-char APPLY 2) FRAME (LREF 0 PUSH GREF read APPLY 1) PUSH CONST unquote PUSH GREF list TAPPLY 2) PUSH CONST #\, PUSH GREF set-macro-character APPLY 2) HALT)
(MACRO quasiquote 1 0 (LREF 0 PUSH GREF bq-completely-process TAPPLY 1) HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF bq-process APPLY 1) PUSH GREF bq-simplify TAPPLY 1) DEF bq-completely-process HALT)
(CLOSE 1 0 (ADDSP 4 . #0=(FRAME (LREF 0 PUSH GREF pair? APPLY 1) LOCAL -2 TEST (CONST . #6=(quasiquote PUSH LREF 0 CAR EQ TEST (FRAME (LREF 0 LOCAL -2 CDR CAR PUSH GREF bq-completely-process APPLY 1) PUSH LOOP 0 1 . #0#) CONST unquote PUSH LREF 0 CAR EQ TEST (LREF 0 LOCAL -2 CDR CAR RET) CONST unquote-splicing PUSH LREF 0 CAR EQ TEST (LREF 0 LOCAL -2 CDR CAR PUSH CONST ",@~S after `" PUSH GREF error TAPPLY 2) CONST unquote-dot PUSH LREF 0 CAR EQ TEST (LREF 0 LOCAL -2 CDR CAR PUSH CONST ",.~S after `" PUSH GREF error TAPPLY 2) NIL LOCAL -2 NIL LOCAL -4 LREF 0 LOCAL -3 . #2=(FRAME (LREF -3 PUSH GREF pair? APPLY 1) LOCAL -5 TEST (CONST . #5=(unquote PUSH LREF -3 CAR EQ TEST (LREF -3 LOCAL -5 CDR CDR TEST (FRAME (LREF -3 PUSH CONST "Malformed ,~S" PUSH GREF error APPLY 2) . #1=(FRAME (FRAME (LREF -3 LOCAL -5 CDR CAR PUSH GREF list APPLY 1) PUSH LREF -4 PUSH GREF nreconc APPLY 2) PUSH CONST append PUSH GREF cons TAPPLY 2)) VOID . #1#) CONST unquote-splicing PUSH LREF -3 CAR EQ TEST (FRAME (LREF -3 PUSH CONST "Dotted ,@~S" PUSH GREF error APPLY 2) . #4=(CONST unquote-dot PUSH LREF -3 CAR EQ TEST (FRAME (LREF -3 PUSH CONST "Dotted ,.~S" PUSH GREF error APPLY 2) . #3=(FRAME (LREF -4 PUSH FRAME (LREF -3 CAR PUSH GREF bracket APPLY 1) PUSH GREF cons APPLY 2) PUSH LREF -3 CDR PUSH LOOP 1 2 . #2#)) VOID . #3#)) VOID . #4#)) CONST t TEST (FRAME (FRAME (FRAME (LREF -3 PUSH CONST quote PUSH GREF list APPLY 2) PUSH GREF list APPLY 1) PUSH LREF -4 PUSH GREF nreconc APPLY 2) PUSH CONST append PUSH GREF cons TAPPLY 2) CONST . #5#))) CONST t TEST (LREF 0 PUSH CONST quote PUSH GREF list TAPPLY 2) CONST . #6#)) DEF bq-process HALT)
(CLOSE 1 0 (ADDSP 1 FRAME (LREF 0 PUSH GREF pair? APPLY 1) LOCAL -2 TEST (CONST . #0=(unquote PUSH LREF 0 CAR EQ TEST (LREF 0 LOCAL -2 CDR CAR PUSH CONST list PUSH GREF list TAPPLY 2) CONST unquote-splicing PUSH LREF 0 CAR EQ TEST (LREF 0 LOCAL -2 CDR CAR RET) CONST unquote-dot PUSH LREF 0 CAR EQ TEST (LREF 0 LOCAL -2 CDR CAR PUSH GREF *bq-clobberable* PUSH GREF list TAPPLY 2) FRAME (LREF 0 PUSH GREF bq-process APPLY 1) PUSH CONST list PUSH GREF list TAPPLY 2)) CONST t TEST (FRAME (LREF 0 PUSH GREF bq-process APPLY 1) PUSH CONST list PUSH GREF list TAPPLY 2) CONST . #0#) DEF bracket HALT)
(CLOSE 2 0 (ADDSP 2 FRAME (LREF 1 PUSH GREF pair? APPLY 1) LOCAL -2 TEST (FRAME . #1=((LREF 1 CDR PUSH LREF 0 PUSH GREF maptree APPLY 2) LOCAL -3 FRAME (LREF 1 CAR PUSH LREF 0 APPLY 1) LOCAL -2 FRAME (LREF 1 CAR PUSH LREF -2 PUSH GREF equal? APPLY 2) TEST (FRAME (LREF 1 CDR PUSH LREF -3 PUSH GREF equal? APPLY 2) TEST (LREF 1 RET) LREF . #0=(-3 PUSH LREF -2 PUSH GREF cons TAPPLY 2)) LREF . #0#)) CONST t TEST (LREF 1 PUSH LREF 0 TAPPLY 1) FRAME . #1#) DEF maptree HALT)
(CLOSE 1 0 (ADDSP 2 FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (CONST unquote-splicing PUSH LREF 0 CAR EQ LOCAL -2 TEST (LREF -2 . #0=(RET)) CONST unquote-dot PUSH LREF 0 CAR EQ LOCAL -3 TEST (LREF -3 . #0#) NIL . #0#) NIL . #0#) DEF bq-splicing-frob HALT)
(CLOSE 1 0 (ADDSP 3 FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (CONST unquote PUSH LREF 0 CAR EQ LOCAL -2 TEST (LREF -2 . #0=(RET)) CONST unquote-splicing PUSH LREF 0 CAR EQ LOCAL -3 TEST (LREF -3 . #0#) CONST unquote-dot PUSH LREF 0 CAR EQ LOCAL -4 TEST (LREF -4 . #0#) NIL . #0#) NIL . #0#) DEF bq-frob HALT)
(CLOSE 1 0 (ADDSP 2 FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (CONST quote PUSH LREF 0 CAR EQ TEST (LREF 0 . #1=(LOCAL -2 CONST append PUSH LREF -2 CAR EQ LOCAL -3 TEST (LREF . #0=(-2 PUSH GREF bq-simplify-args TAPPLY 1)) CONST t TEST (LREF -2 . #2=(RET)) LREF . #0#)) FRAME (LREF 0 PUSH GREF bq-simplify PUSH GREF maptree APPLY 2) . #1#) LREF 0 . #2#) DEF bq-simplify HALT)
(CLOSE 1 0 (ADDSP 4 NIL LOCAL -2 NIL LOCAL -4 FRAME (LREF 0 CDR PUSH GREF reverse APPLY 1) LOCAL -3 . #0=(TEST (FRAME (LREF -3 CAR PUSH GREF pair? APPLY 1) LOCAL -5 TEST (CONST . #6=(list PUSH LREF -3 LOCAL -5 CAR CAR EQ TEST (FRAME (LREF -3 LOCAL -2 CAR CDR PUSH GREF bq-splicing-frob PUSH GREF any? APPLY 2) LOCAL -5 TEST (CONST . #5=(list* PUSH LREF -3 LOCAL -5 CAR CAR EQ TEST (FRAME (LREF -3 LOCAL -2 CAR CDR PUSH GREF bq-splicing-frob PUSH GREF any? APPLY 2) LOCAL -5 TEST (CONST . #4=(quote PUSH LREF -3 LOCAL -5 CAR CAR EQ TEST (FRAME (LREF -3 LOCAL -5 CAR CDR CAR PUSH GREF pair? APPLY 1) TEST (FRAME (LREF -3 LOCAL -2 CAR CDR CAR PUSH GREF bq-frob APPLY 1) LOCAL -5 TEST (CONST nil . #3=(TEST (FRAME (LREF -4 PUSH FRAME (FRAME (FRAME (LREF -3 PUSH GREF caadar APPLY 1) PUSH CONST quote PUSH GREF list APPLY 2) PUSH GREF list APPLY 1) PUSH GREF bq-attach-conses APPLY 2) . #1=(PUSH LREF -3 CDR PUSH LOOP 1 2 LREF -3 . #0#)) GREF . #2=(*bq-clobberable* PUSH LREF -3 LOCAL -5 CAR CAR EQ TEST (FRAME (LREF -4 PUSH LREF -3 LOCAL -5 CAR CDR CAR PUSH CONST append! PUSH GREF bq-attach-append APPLY 3) . #1#) FRAME (LREF -4 PUSH LREF -3 CAR PUSH CONST append PUSH GREF bq-attach-append APPLY 3) . #1#))) CONST t TEST (FRAME (LREF -3 PUSH GREF cddar APPLY 1) LOCAL -5 TEST (GREF . #2#) CONST t . #3#) GREF . #2#) GREF . #2#) GREF . #2#)) CONST t TEST (FRAME (FRAME (LREF -4 PUSH FRAME (LREF -3 CAR PUSH GREF last APPLY 1) CAR PUSH CONST append PUSH GREF bq-attach-append APPLY 3) PUSH FRAME (FRAME (LREF -3 LOCAL -5 CAR CDR PUSH GREF reverse APPLY 1) CDR PUSH GREF reverse APPLY 1) PUSH GREF bq-attach-conses APPLY 2) . #1#) CONST . #4#) CONST . #4#)) CONST t TEST (FRAME (LREF -4 PUSH LREF -3 LOCAL -5 CAR CDR PUSH GREF bq-attach-conses APPLY 2) . #1#) CONST . #5#) CONST . #5#)) CONST t TEST (FRAME (LREF -4 PUSH LREF -3 CAR PUSH CONST append PUSH GREF bq-attach-append APPLY 3) . #1#) CONST . #6#) LREF -4 RET)) DEF bq-simplify-args HALT)
(CLOSE 1 0 (ADDSP 2 LREF 0 LOCAL -2 TEST (NIL . #2=(LOCAL -2 TEST (LREF -2 . #0=(RET)) FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (CONST quote PUSH LREF 0 CAR EQ . #1=(LOCAL -3 TEST (LREF -3 . #0#) NIL . #0#)) NIL . #1#)) CONST t . #2#) DEF null-or-quoted HALT)
(CLOSE 3 0 (ADDSP 2 FRAME (LREF 1 PUSH GREF null-or-quoted APPLY 1) TEST (FRAME (LREF 2 PUSH GREF null-or-quoted APPLY 1) TEST (FRAME (LREF 2 LOCAL -2 CDR CAR PUSH LREF 1 LOCAL -2 CDR CAR PUSH GREF append APPLY 2) PUSH CONST quote PUSH GREF list TAPPLY 2) LREF . #4=(2 LOCAL -2 TEST (NIL . #3=(LOCAL -2 TEST (LREF -2 . #1=(TEST (FRAME (LREF 1 PUSH GREF bq-splicing-frob APPLY 1) TEST (LREF 1 PUSH LREF 0 PUSH GREF list TAPPLY 2) LREF 1 RET) FRAME . #2=((LREF 2 PUSH GREF pair? APPLY 1) TEST (LREF 0 PUSH LREF 2 CAR EQ TEST (LREF 2 CDR PUSH LREF 1 PUSH LREF 2 CAR PUSH GREF list* TAPPLY 3) LREF . #0=(2 PUSH LREF 1 PUSH LREF 0 PUSH GREF list TAPPLY 3)) LREF . #0#))) FRAME (GREF *bq-quote-nil* PUSH LREF 2 PUSH GREF equal? APPLY 2) LOCAL -3 TEST (LREF -3 . #1#) FRAME . #2#)) CONST t . #3#)) LREF . #4#) DEF bq-attach-append HALT)
(CLOSE 2 0 (ADDSP 2 FRAME (LREF 0 PUSH GREF null-or-quoted PUSH GREF all? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF null-or-quoted APPLY 1) TEST (FRAME (LREF 1 LOCAL -2 CDR CAR PUSH FRAME (LREF 0 PUSH GREF cadr PUSH GREF map APPLY 2) PUSH GREF append APPLY 2) PUSH CONST quote PUSH GREF list TAPPLY 2) LREF . #5=(1 LOCAL -2 TEST (NIL . #4=(LOCAL -2 TEST (LREF -2 . #2=(TEST (LREF 0 PUSH CONST list PUSH GREF cons TAPPLY 2) FRAME . #3=((LREF 1 PUSH GREF pair? APPLY 1) TEST (CONST list PUSH LREF 1 CAR EQ LOCAL -2 TEST (LREF -2 . #0=(TEST (FRAME (LREF 1 CDR PUSH LREF 0 PUSH GREF append APPLY 2) PUSH LREF 1 CAR PUSH GREF cons TAPPLY 2) FRAME . #1=((FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH LREF 0 PUSH GREF append APPLY 2) PUSH CONST list* PUSH GREF cons TAPPLY 2))) CONST list* PUSH LREF 1 CAR EQ LOCAL -3 TEST (LREF -3 . #0#) FRAME . #1#) FRAME . #1#))) FRAME (GREF *bq-quote-nil* PUSH LREF 1 PUSH GREF equal? APPLY 2) LOCAL -3 TEST (LREF -3 . #2#) FRAME . #3#)) CONST t . #4#)) LREF . #5#) DEF bq-attach-conses HALT)
(CONST 1 DEF VAR-ARG HALT)
(CONST 2 DEF VAR-FREE HALT)
(CONST 4 DEF VAR-SET HALT)
(CONST 8 DEF VAR-SELF-TAIL-RECUR HALT)
(CONST 16 DEF VAR-CALL-IN-BASE1 HALT)
(CONST 32 DEF VAR-CALL-IN-BASE2 HALT)
(CONST 64 DEF VAR-CALL-OTHER HALT)
(CONST 128 DEF VAR-CONTI HALT)
(CLOSE 3 0 (ADDSP 1 . #0=(FRAME (LREF 0 PUSH GREF symbol? APPLY 1) TEST (FRAME (GREF VAR-ARG PUSH LREF 0 PUSH LREF 1 PUSH GREF add-var-info APPLY 3) LREF 1 PUSH LREF 0 PUSH GREF traverse-refer TAPPLY 2) FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 1 PUSH LREF 0 PUSH GREF expand-macro APPLY 2) LOCAL -2 FRAME (LREF -2 PUSH GREF pair? APPLY 1) TEST (LREF 2 PUSH LREF 1 PUSH LREF -2 PUSH GREF traverse-list TAPPLY 3) LREF 2 PUSH LREF 1 PUSH LREF -2 PUSH LOOP 0 3 . #0#) LREF 0 PUSH CONST :CONST PUSH GREF list TAPPLY 2)) DEF traverse HALT)
(CLOSE 3 0 (ADDSP 5 LREF 0 LOCAL -2 CAR LOCAL -3 CONST quote PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH CLOSE 1 0 (LREF 0 PUSH CONST :CONST PUSH GREF list TAPPLY 2) PUSH GREF apply TAPPLY 2) CONST ^ PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH CLOSE (1 -1) 1 (FREF 0 PUSH LREF 1 PUSH LREF 0 PUSH GREF traverse-lambda TAPPLY 3) PUSH GREF apply TAPPLY 2) CONST if PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH LREF 1 PUSH CLOSE (2 -1) 2 (FREF 1 PUSH FREF 0 PUSH LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF traverse-if TAPPLY 5) PUSH GREF apply TAPPLY 2) CONST set! PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH CLOSE 2 1 (FREF 0 PUSH LREF 1 PUSH LREF 0 PUSH CONST :SET PUSH GREF traverse-set! TAPPLY 4) PUSH GREF apply TAPPLY 2) CONST def PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH CLOSE 2 1 (FRAME (LREF 0 PUSH GREF inline-function? APPLY 1) TEST (FRAME (LREF 1 PUSH LREF 0 PUSH GREF register-inline-function APPLY 2) . #0=(FREF 0 PUSH LREF 1 PUSH LREF 0 PUSH CONST :DEF PUSH GREF traverse-set! TAPPLY 4)) VOID . #0#) PUSH GREF apply TAPPLY 2) CONST call/cc PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH LREF 1 PUSH CLOSE 1 2 (FREF 1 PUSH FREF 0 PUSH LREF 0 PUSH GREF traverse-call/cc TAPPLY 3) PUSH GREF apply TAPPLY 2) CONST defmacro PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH CLOSE (2 -1) 1 (FREF 0 PUSH LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF traverse-defmacro TAPPLY 4) PUSH GREF apply TAPPLY 2) CONST values PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH LREF 1 PUSH CLOSE (0 -1) 2 (FREF 1 PUSH FREF 0 PUSH LREF 0 PUSH GREF traverse-values TAPPLY 3) PUSH GREF apply TAPPLY 2) CONST receive PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH LREF 1 PUSH CLOSE (2 -1) 2 (FREF 1 PUSH FREF 0 PUSH LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF traverse-receive TAPPLY 5) PUSH GREF apply TAPPLY 2) LREF 0 CDR LOCAL -5 LREF 0 CAR LOCAL -4 FRAME (LREF -4 PUSH GREF direct-invoke? APPLY 1) TEST (LREF 2 PUSH LREF 1 PUSH LREF -5 PUSH LREF -4 LOCAL -6 CDR CDR PUSH LREF -4 LOCAL -6 CDR CAR PUSH GREF traverse-apply-direct TAPPLY 5) FRAME (LREF -4 PUSH GREF inline-function? APPLY 1) TEST (LREF 2 PUSH LREF 1 PUSH LREF -5 PUSH LREF -4 PUSH GREF traverse-inline-apply TAPPLY 4) LREF 2 PUSH LREF 1 PUSH LREF -5 PUSH LREF -4 PUSH GREF traverse-apply TAPPLY 4) DEF traverse-list HALT)
(CLOSE 2 0 (ADDSP 1 FRAME (LREF 0 PUSH LREF 1 PUSH GREF scope-local-has? APPLY 2) LOCAL -2 TEST (CONST nil . #1=(TEST (FRAME (LREF 0 PUSH LREF 1 PUSH GREF register-fref APPLY 2) . #0=(LREF 0 PUSH CONST :REF PUSH GREF list TAPPLY 2)) VOID . #0#)) CONST t TEST (FRAME (LREF 0 PUSH LREF 1 PUSH GREF scope-upper-vars-has? APPLY 2) . #1#) VOID . #0#) DEF traverse-refer HALT)
(CLOSE 4 0 (ADDSP 7 FRAME (LREF 1 PUSH GREF symbol? APPLY 1) TEST (VOID . #6=(FRAME (LREF 1 PUSH LREF 3 PUSH GREF scope-upper-vars-has? APPLY 2) LOCAL -3 FRAME (LREF 1 PUSH LREF 3 PUSH GREF scope-local-has? APPLY 2) LOCAL -2 LOCAL -4 TEST (CONST nil . #5=(TEST (FRAME (LREF 1 PUSH LREF 3 PUSH GREF register-fref APPLY 2) . #4=(FRAME (LREF 2 PUSH GREF lambda-expression? APPLY 1) TEST (LREF 2 LOCAL -4 CDR CDR LOCAL -5 LREF 2 LOCAL -4 CDR CAR LOCAL -4 FRAME (LREF 3 PUSH LREF -5 PUSH LREF -4 PUSH GREF prepare-lambda-node APPLY 3) LOCAL -6 CONST :DEF PUSH LREF 0 EQ TEST (FRAME (LREF -6 PUSH LREF 1 PUSH LREF 3 PUSH GREF do-register-set! APPLY 3) . #0=(FRAME (LREF -5 PUSH LREF -6 PUSH GREF traverse-lambda-exec APPLY 2) LREF -6 PUSH LREF 1 PUSH LREF 0 PUSH GREF list TAPPLY 3)) LREF -2 LOCAL -7 TEST (LREF -7 . #1=(TEST (FRAME (LREF -6 PUSH LREF 1 PUSH LREF 3 PUSH GREF register-set! APPLY 3) . #0#) NIL . #0#)) LREF -3 LOCAL -8 TEST (LREF -8 . #1#) NIL . #0#) FRAME (NIL PUSH LREF 3 PUSH LREF 2 PUSH GREF traverse APPLY 3) LOCAL -4 CONST :SET PUSH LREF 0 EQ TEST (LREF -2 LOCAL -5 TEST (LREF -5 . #3=(TEST (FRAME (LREF -4 PUSH LREF 1 PUSH LREF 3 PUSH GREF register-set! APPLY 3) . #2=(LREF -4 PUSH LREF 1 PUSH LREF 0 PUSH GREF list TAPPLY 3)) VOID . #2#)) LREF -3 LOCAL -6 TEST (LREF -6 . #3#) VOID . #2#) VOID . #2#)) VOID . #4#)) CONST t TEST (LREF -3 . #5#) VOID . #4#)) FRAME (LREF 1 PUSH CONST "`set!` requires symbol, but `%@`" PUSH GREF compile-error APPLY 2) . #6#) DEF traverse-set! HALT)
(CLOSE 5 0 (LREF 2 TEST (LREF 2 CDR TEST (FRAME (CONST "malformed if" PUSH GREF compile-error APPLY 1) . #1=(LREF 2 TEST (FRAME (LREF 4 PUSH LREF 3 PUSH LREF 2 CAR PUSH GREF traverse APPLY 3) . #0=(PUSH FRAME (LREF 4 PUSH LREF 3 PUSH LREF 1 PUSH GREF traverse APPLY 3) PUSH FRAME (NIL PUSH LREF 3 PUSH LREF 0 PUSH GREF traverse APPLY 3) PUSH CONST :IF PUSH GREF list TAPPLY 4)) CONST (:VOID) . #0#)) VOID . #1#) VOID . #1#) DEF traverse-if HALT)
(CLOSE 3 0 (ADDSP 4 FRAME (LREF 0 PUSH GREF direct-invoke? APPLY 1) TEST (LREF 0 LOCAL -2 CDR CDR LOCAL -3 LREF 0 LOCAL -2 CDR CAR LOCAL -2 PUSH FRAME (LREF -2 PUSH GREF check-parameters APPLY 1) EQ TEST (VOID . #1=(CONST 1 PUSH FRAME (LREF -2 PUSH GREF length APPLY 1) EQ TEST (VOID . #0=(FRAME (LREF 1 PUSH LREF -2 PUSH GREF expand-scope APPLY 2) LOCAL -4 FRAME (LREF 2 PUSH LREF -4 PUSH LREF -3 PUSH GREF traverse-body APPLY 3) LOCAL -5 FRAME (GREF VAR-CONTI PUSH LREF -2 CAR PUSH LREF -4 PUSH GREF add-var-info APPLY 3) LREF -5 PUSH LREF -4 PUSH CONST :CONTI-DIRECT PUSH GREF list TAPPLY 3)) FRAME (LREF -2 PUSH CONST "Illegal parameters, call/cc requires 1 parameter function, but `%@`" PUSH GREF compile-error APPLY 2) . #0#)) FRAME (CONST "Not implemented: rest param for call/cc" PUSH GREF compile-error APPLY 1) . #1#) FRAME (LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF traverse APPLY 3) PUSH CONST :CONTI PUSH GREF list TAPPLY 2) DEF traverse-call/cc HALT)
(CLOSE 3 0 (ADDSP 4 LREF 1 TEST (FRAME (NIL PUSH NIL PUSH GREF cons APPLY 2) . #1=(LOCAL -3 FRAME (LREF 0 PUSH GREF check-parameters APPLY 1) LOCAL -2 PUSH LREF 0 EQ TEST (FRAME (LREF 0 PUSH GREF length APPLY 1) . #0=(LOCAL -5 FRAME (LREF 2 PUSH LREF -2 PUSH GREF create-scope APPLY 2) LOCAL -4 LREF -3 PUSH LREF -5 PUSH LREF -2 PUSH LREF -4 PUSH GREF create-lambda-node TAPPLY 4)) FRAME (CONST -1 PUSH CONST 1 PUSH FRAME (LREF -2 PUSH GREF length APPLY 1) PUSH SUB 2 PUSH GREF list APPLY 2) . #0#)) NIL . #1#) DEF prepare-lambda-node HALT)
(CLOSE 2 0 (ADDSP 2 FRAME (LREF 0 PUSH GREF lambda-body-node-get APPLY 1) LOCAL -3 FRAME (LREF 0 PUSH GREF lambda-scope-get APPLY 1) LOCAL -2 LREF 1 TEST (FRAME (FRAME (CONST t PUSH LREF -2 PUSH LREF 1 PUSH GREF traverse-body APPLY 3) PUSH LREF -3 PUSH GREF copy-pair! APPLY 2) . #0=(LREF 0 RET)) VOID . #0#) DEF traverse-lambda-exec HALT)
(CLOSE 3 0 (LREF 1 PUSH FRAME (LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF prepare-lambda-node APPLY 3) PUSH GREF traverse-lambda-exec TAPPLY 2) DEF traverse-lambda HALT)
(CLOSE 3 0 (LREF 0 PUSH LREF 2 PUSH LREF 1 PUSH CLOSE 1 2 (ADDSP 1 LREF 0 CDR LOCAL -2 TEST (CONST nil . #0=(PUSH FREF 0 PUSH LREF 0 CAR PUSH GREF traverse TAPPLY 3)) CONST t TEST (FREF 1 . #0#) NIL . #0#) PUSH GREF maplist TAPPLY 2) DEF traverse-body HALT)
(CLOSE 2 0 (ADDSP 2 FRAME (LREF 1 PUSH GREF scope-block-top-get APPLY 1) LOCAL -3 FRAME (LREF 0 PUSH GREF scope-upper-block-top-get APPLY 1) LOCAL -2 LREF -3 PUSH LREF -2 EQ RET) DEF upper-scope-is? HALT)
(CLOSE 3 0 (ADDSP 3 FRAME (LREF 0 PUSH LREF 1 PUSH GREF var-is-set? APPLY 2) LOCAL -2 TEST (FRAME (LREF -2 PUSH GREF single? APPLY 1) TEST (FRAME (LREF -2 CAR PUSH GREF lambda-node? APPLY 1) TEST (FRAME (LREF 0 PUSH LREF 1 PUSH GREF scope-local-has? APPLY 2) TEST (FRAME (GREF VAR-CALL-IN-BASE1 PUSH LREF 0 PUSH LREF 1 PUSH GREF var-has-attr? APPLY 3) TEST (GREF VAR-CALL-IN-BASE2 . #0=(RET)) GREF VAR-CALL-IN-BASE1 . #0#) LREF 2 TEST (FRAME (LREF 0 PUSH LREF 1 PUSH GREF get-var-info APPLY 2) RECV 1 2 LREF -4 TEST (FRAME (LREF -4 PUSH LREF 1 PUSH GREF upper-scope-is? APPLY 2) . #1=(TEST (GREF VAR-SELF-TAIL-RECUR . #0#) GREF VAR-CALL-OTHER . #0#)) FRAME (LREF 1 PUSH GREF scope-block-top-get APPLY 1) PUSH FRAME (LREF -2 CAR PUSH GREF lambda-scope-get APPLY 1) EQ . #1#) GREF VAR-CALL-OTHER . #0#) GREF . #2=(VAR-CALL-OTHER . #0#)) GREF . #2#) GREF . #2#) DEF detect-call-type HALT)
(CLOSE 4 0 (ADDSP 2 FRAME (LREF 0 PUSH GREF symbol? APPLY 1) TEST (FRAME (LREF 2 PUSH LREF 0 PUSH GREF traverse-refer APPLY 2) . #0=(LOCAL -3 FRAME (LREF 3 PUSH LREF 2 PUSH LREF 0 PUSH GREF detect-call-type APPLY 3) LOCAL -2 FRAME (LREF -2 PUSH LREF 0 PUSH LREF 2 PUSH GREF add-var-info APPLY 3) FRAME (LREF 1 PUSH LREF 2 PUSH CLOSE 1 1 (NIL PUSH FREF 0 PUSH LREF 0 PUSH GREF traverse TAPPLY 3) PUSH GREF map APPLY 2) PUSH LREF -3 PUSH LREF -2 PUSH CONST :APPLY PUSH GREF list TAPPLY 4)) FRAME (NIL PUSH LREF 2 PUSH LREF 0 PUSH GREF traverse APPLY 3) . #0#) DEF traverse-apply HALT)
(CLOSE 4 0 (ADDSP 1 FRAME (LREF 0 PUSH GREF get-inline-function-body APPLY 1) LOCAL -2 LREF 3 PUSH LREF 2 PUSH FRAME (LREF 1 PUSH LREF -2 PUSH GREF list* APPLY 2) PUSH GREF traverse TAPPLY 3) DEF traverse-inline-apply HALT)
(CLOSE 5 0 (ADDSP 6 . #1=(FRAME (LREF 0 PUSH GREF check-parameters APPLY 1) LOCAL -2 LREF 0 PUSH LREF -2 EQ TEST (CONST 0 . #3=(PUSH FRAME (LREF -2 PUSH GREF length APPLY 1) PUSH SUB 2 LOCAL -4 FRAME (LREF 2 PUSH GREF length APPLY 1) LOCAL -3 LREF -2 PUSH LREF 0 EQ LOCAL -5 TEST (LREF . #2=(-4 PUSH LREF -3 EQ TEST (FRAME (LREF 2 PUSH LREF 3 PUSH CLOSE 1 1 (NIL PUSH FREF 0 PUSH LREF 0 PUSH GREF traverse TAPPLY 3) PUSH GREF map APPLY 2) LOCAL -5 FRAME (LREF 3 PUSH LREF -2 PUSH GREF expand-scope APPLY 2) LOCAL -6 FRAME (LREF 4 PUSH LREF -6 PUSH LREF 1 PUSH GREF traverse-body APPLY 3) LOCAL -7 PUSH LREF -5 PUSH LREF -6 PUSH CONST :INVOKE PUSH GREF list TAPPLY 4) LREF -4 PUSH LREF -3 PUSH LT 2 TEST (CONST "few" . #0=(LOCAL -5 LREF -4 PUSH LREF -3 PUSH LREF -5 PUSH CONST "Too %s arguments, %@ for %@" PUSH GREF compile-error TAPPLY 4)) CONST "many" . #0#)) CONST t TEST (LREF -4 PUSH LREF -3 PUSH LT 2 TEST (LREF 4 PUSH LREF 3 PUSH LREF 2 PUSH LREF 1 PUSH LREF -2 PUSH LOOP 0 5 . #1#) LREF -4 PUSH LREF -3 PUSH GT 2 TEST (LREF 4 PUSH LREF 3 PUSH FRAME (FRAME (FRAME (FRAME (FRAME (LREF 2 PUSH LREF -4 PUSH GREF drop APPLY 2) PUSH CONST list PUSH GREF list* APPLY 2) PUSH GREF list APPLY 1) PUSH FRAME (LREF 2 PUSH LREF -4 PUSH GREF take APPLY 2) PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH LREF -2 PUSH CONST ^ PUSH GREF list* APPLY 3) PUSH GREF list* APPLY 2) PUSH GREF traverse TAPPLY 3) LREF 4 PUSH LREF 3 PUSH FRAME (CONST (nil) PUSH LREF 2 PUSH GREF append APPLY 2) PUSH LREF 1 PUSH LREF -2 PUSH LOOP 0 5 . #1#) LREF . #2#)) CONST 1 . #3#)) DEF traverse-apply-direct HALT)
(CLOSE 4 0 (ADDSP 4 FRAME (LREF 1 PUSH GREF check-parameters APPLY 1) LOCAL -2 FRAME (LREF 3 PUSH LREF -2 PUSH GREF create-scope APPLY 2) LOCAL -3 FRAME (CONST t PUSH LREF -3 PUSH LREF 2 PUSH GREF traverse-body APPLY 3) LOCAL -4 LREF -2 PUSH LREF 1 EQ TEST (FRAME (LREF 1 PUSH GREF length APPLY 1) . #0=(LOCAL -5 LREF -4 PUSH LREF -5 PUSH LREF 0 PUSH LREF -3 PUSH CONST :MACRO PUSH GREF list TAPPLY 5)) FRAME (CONST -1 PUSH CONST 1 PUSH FRAME (LREF -2 PUSH GREF length APPLY 1) PUSH SUB 2 PUSH GREF list APPLY 2) . #0#) DEF traverse-defmacro HALT)
(CLOSE 3 0 (FRAME (LREF 0 PUSH LREF 0 PUSH LREF 2 PUSH LREF 1 PUSH CLOSE 1 3 (FREF 2 CDR TEST (FREF 1 . #0=(PUSH FREF 0 PUSH LREF 0 CAR PUSH GREF traverse TAPPLY 3)) NIL . #0#) PUSH GREF maplist APPLY 2) PUSH CONST :VALS PUSH GREF list TAPPLY 2) DEF traverse-values HALT)
(CLOSE 5 0 (ADDSP 5 FRAME (LREF 0 PUSH GREF check-parameters APPLY 1) LOCAL -2 FRAME (NIL PUSH LREF 3 PUSH LREF 1 PUSH GREF traverse APPLY 3) LOCAL -4 LREF -2 PUSH LREF 0 EQ TEST (FRAME (LREF 0 PUSH GREF length APPLY 1) . #0=(LOCAL -3 FRAME (LREF 3 PUSH LREF -2 PUSH GREF expand-scope APPLY 2) LOCAL -5 FRAME (LREF 4 PUSH LREF -5 PUSH LREF 2 PUSH GREF traverse-body APPLY 3) LOCAL -6 PUSH LREF -4 PUSH LREF -3 PUSH LREF -5 PUSH CONST :RECV PUSH GREF list TAPPLY 5)) FRAME (CONST -1 PUSH CONST 1 PUSH FRAME (LREF -2 PUSH GREF length APPLY 1) PUSH SUB 2 PUSH GREF list APPLY 2) . #0#) DEF traverse-receive HALT)
(CLOSE 1 0 (ADDSP 3 FRAME (LREF 0 PUSH GREF list? APPLY 1) TEST (VOID . #6=(FRAME (LREF 0 PUSH CLOSE 1 0 (CONST (&rest &body) PUSH LREF 0 PUSH GREF member TAPPLY 2) PUSH GREF position-if APPLY 2) LOCAL -2 TEST (FRAME (LREF 0 PUSH CONST 1 PUSH LREF -2 PUSH ADD 2 PUSH GREF drop APPLY 2) LOCAL -4 FRAME (LREF 0 PUSH LREF -2 PUSH GREF take APPLY 2) LOCAL -3 FRAME (LREF -4 PUSH GREF single? APPLY 1) TEST (VOID . #4=(FRAME (LREF -4 PUSH LREF -3 PUSH GREF append! APPLY 2) . #5=(LOCAL -2 FRAME (LREF 0 PUSH CLOSE 1 0 (ADDSP 1 FRAME (LREF 0 PUSH GREF symbol? APPLY 1) LOCAL -2 TEST (NIL . #0=(RET)) CONST t . #0#) PUSH GREF any? APPLY 2) LOCAL -3 TEST (FRAME (LREF -3 CAR PUSH CONST "parameter must be symbol, but `%@`" PUSH GREF compile-error APPLY 2) . #3=(NIL LOCAL -3 LREF -2 LOCAL -4 . #1=(TEST (FRAME (LREF -4 CDR PUSH LREF -4 CAR PUSH GREF member APPLY 2) TEST (FRAME (LREF -4 CAR PUSH CONST "Duplicated parameter `%@`" PUSH GREF compile-error APPLY 2) . #2=(LREF -4 CDR PUSH LOOP 2 1 LREF -4 . #1#)) VOID . #2#) VOID LREF -2 RET))) VOID . #3#))) FRAME (LREF -4 PUSH CONST "&rest requires only 1 name, but %@" PUSH GREF compile-error APPLY 2) . #4#) LREF 0 . #5#)) FRAME (LREF 0 PUSH CONST "parameters must be list, but %@" PUSH GREF compile-error APPLY 2) . #6#) DEF check-parameters HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (LREF 0 CAR PUSH CONST ^ EQ . #0=(RET)) NIL . #0#) DEF direct-invoke? HALT)
(CLOSE 2 0 (ADDSP 4 LREF 0 CAR LOCAL -2 FRAME (LREF -2 PUSH GREF symbol? APPLY 1) LOCAL -3 TEST (NIL . #2=(LOCAL -3 TEST (LREF -3 . #0=(TEST (LREF 0 RET) LREF . #1=(0 PUSH GREF macroexpand TAPPLY 1))) FRAME (LREF -2 PUSH LREF 1 PUSH GREF scope-local-has? APPLY 2) LOCAL -4 TEST (LREF -4 . #0#) FRAME (LREF -2 PUSH LREF 1 PUSH GREF scope-upper-vars-has? APPLY 2) LOCAL -5 TEST (LREF -5 . #0#) LREF . #1#)) CONST t . #2#) DEF expand-macro HALT)
(CLOSE 1 0 (ADDSP 1 . #0=(FRAME (LREF 0 PUSH GREF macroexpand-1 APPLY 1) LOCAL -2 FRAME (LREF 0 PUSH LREF -2 PUSH GREF equal? APPLY 2) TEST (LREF 0 RET) LREF -2 PUSH LOOP 0 1 . #0#)) DEF macroexpand HALT)
(CLOSE 2 0 (CONST 0 PUSH LREF 1 PUSH NIL PUSH CONST t PUSH NIL PUSH FRAME (LREF 0 PUSH CLOSE 1 0 (CONST 0 PUSH LREF 0 PUSH GREF cons TAPPLY 2) PUSH GREF map APPLY 2) PUSH GREF vector TAPPLY 6) DEF create-scope HALT)
(CLOSE 2 0 (LREF 1 PUSH FRAME (LREF 0 PUSH CLOSE 1 0 (CONST 0 PUSH LREF 0 PUSH GREF cons TAPPLY 2) PUSH GREF map APPLY 2) PUSH GREF expand-scope2 TAPPLY 2) DEF expand-scope HALT)
(CLOSE 2 0 (CONST 0 PUSH LREF 1 PUSH NIL PUSH NIL PUSH NIL PUSH LREF 0 PUSH GREF vector TAPPLY 6) DEF expand-scope2 HALT)
(CLOSE 1 0 (CONST 0 PUSH LREF 0 PUSH GREF vector-get TAPPLY 2) DEF scope-local-infos HALT)
(CLOSE 1 0 (CONST 1 PUSH LREF 0 PUSH GREF vector-get TAPPLY 2) DEF scope-frees HALT)
(CLOSE 1 0 (CONST 2 PUSH LREF 0 PUSH GREF vector-get TAPPLY 2) DEF scope-block-top? HALT)
(CLOSE 1 0 (CONST 3 PUSH LREF 0 PUSH GREF vector-get TAPPLY 2) DEF scope-sets HALT)
(CLOSE 1 0 (CONST 4 PUSH LREF 0 PUSH GREF vector-get TAPPLY 2) DEF scope-outer-scope HALT)
(CLOSE 1 0 (CONST 5 PUSH LREF 0 PUSH GREF vector-get TAPPLY 2) DEF scope-work-size HALT)
(CLOSE 2 0 (LREF 1 PUSH CONST 1 PUSH LREF 0 PUSH GREF vector-set! TAPPLY 3) DEF scope-frees-set! HALT)
(CLOSE 2 0 (LREF 1 PUSH CONST 3 PUSH LREF 0 PUSH GREF vector-set! TAPPLY 3) DEF scope-sets-set! HALT)
(CLOSE 2 0 (LREF 1 PUSH CONST 5 PUSH LREF 0 PUSH GREF vector-set! TAPPLY 3) DEF scope-work-size-set! HALT)
(CLOSE 2 0 (LREF 1 PUSH CONST 4 PUSH LREF 0 PUSH GREF vector-set! TAPPLY 3) DEF scope-outer-scope-set! HALT)
(CLOSE 1 0 (ADDSP 3 NIL LOCAL -2 CONST 0 LOCAL -4 FRAME (LREF 0 PUSH GREF scope-outer-scope APPLY 1) LOCAL -3 . #0=(FRAME (LREF -3 PUSH GREF scope-block-top? APPLY 1) TEST (LREF -4 RET) FRAME (FRAME (LREF -3 PUSH GREF scope-local-infos APPLY 1) PUSH GREF length APPLY 1) PUSH LREF -4 PUSH ADD 2 PUSH FRAME (LREF -3 PUSH GREF scope-outer-scope APPLY 1) PUSH LOOP 1 2 . #0#)) DEF scope-upper-work-size HALT)
(CLOSE 2 0 (ADDSP 3 NIL LOCAL -2 LREF 0 LOCAL -3 . #1=(FRAME (LREF 1 PUSH LREF -3 PUSH GREF scope-local-only-has? APPLY 2) LOCAL -4 TEST (FRAME (LREF -3 PUSH GREF scope-block-top? APPLY 1) TEST (LREF -4 . #0=(RET)) FRAME (LREF -3 PUSH GREF scope-upper-work-size APPLY 1) PUSH LREF -4 PUSH ADD 2 PUSH CONST -2 PUSH SUB 2 . #0#) FRAME (LREF -3 PUSH GREF scope-block-top? APPLY 1) TEST (VOID . #0#) FRAME (LREF -3 PUSH GREF scope-outer-scope APPLY 1) PUSH LOOP 1 1 . #1#)) DEF scope-local-has? HALT)
(CLOSE 2 0 (FRAME (LREF 0 PUSH GREF scope-local-infos APPLY 1) PUSH LREF 1 PUSH CLOSE 1 1 (FREF 0 PUSH LREF 0 CAR EQ RET) PUSH GREF position-if TAPPLY 2) DEF scope-local-only-has? HALT)
(CLOSE 1 0 (ADDSP 2 NIL LOCAL -2 LREF 0 LOCAL -3 . #0=(FRAME (LREF -3 PUSH GREF scope-block-top? APPLY 1) TEST (LREF -3 RET) FRAME (LREF -3 PUSH GREF scope-outer-scope APPLY 1) PUSH LOOP 1 1 . #0#)) DEF scope-block-top-get HALT)
(CLOSE 1 0 (FRAME (FRAME (LREF 0 PUSH GREF scope-block-top-get APPLY 1) PUSH GREF scope-outer-scope APPLY 1) PUSH GREF scope-block-top-get TAPPLY 1) DEF scope-upper-block-top-get HALT)
(CLOSE 2 0 (FRAME (LREF 1 PUSH GREF scope-block-top-get APPLY 1) PUSH FRAME (LREF 0 PUSH GREF scope-block-top-get APPLY 1) EQ RET) DEF same-scope-block? HALT)
(CLOSE 2 0 (FRAME (FRAME (LREF 0 PUSH GREF scope-block-top-get APPLY 1) PUSH GREF scope-frees APPLY 1) PUSH LREF 1 PUSH GREF position TAPPLY 2) DEF scope-frees-has? HALT)
(CLOSE 2 0 (ADDSP 3 NIL LOCAL -2 FRAME (LREF 0 PUSH GREF scope-block-top-get APPLY 1) LOCAL -3 . #0=(FRAME (LREF -3 PUSH GREF scope-outer-scope APPLY 1) LOCAL -4 TEST (FRAME (LREF 1 PUSH LREF -4 PUSH GREF scope-local-only-has? APPLY 2) TEST (LREF -4 . #1=(RET)) LREF -4 PUSH LOOP 1 1 . #0#) NIL . #1#)) DEF scope-upper-vars-has? HALT)
(CLOSE 1 0 (ADDSP 4 NIL LOCAL -2 CONST 0 LOCAL -4 LREF 0 LOCAL -3 . #0=(FRAME (FRAME (LREF -3 PUSH GREF scope-local-infos APPLY 1) PUSH GREF length APPLY 1) PUSH LREF -4 PUSH ADD 2 LOCAL -5 FRAME (LREF -3 PUSH GREF scope-block-top? APPLY 1) TEST (LREF -5 RET) LREF -5 PUSH FRAME (LREF -3 PUSH GREF scope-outer-scope APPLY 1) PUSH LOOP 1 2 . #0#)) DEF scope-local-count HALT)
(CLOSE 1 0 (LREF 0 CDR RET) DEF var-info-flag-get HALT)
(CLOSE 2 0 (LREF 1 PUSH LREF 0 PUSH GREF set-cdr! TAPPLY 2) DEF var-info-flag-set! HALT)
(CLOSE 2 0 (ADDSP 3 FRAME (LREF 1 PUSH GREF symbol? APPLY 1) TEST (NIL LOCAL -2 LREF 0 LOCAL -3 . #0=(TEST (FRAME (LREF 1 PUSH LREF -3 PUSH GREF scope-local-only-has? APPLY 2) LOCAL -4 TEST (LREF -3 PUSH FRAME (LREF -4 PUSH FRAME (LREF -3 PUSH GREF scope-local-infos APPLY 1) PUSH GREF elt APPLY 2) PUSH VALS 2 . #1=(RET)) FRAME (LREF -3 PUSH GREF scope-outer-scope APPLY 1) PUSH LOOP 1 1 LREF -3 . #0#) NIL PUSH NIL PUSH VALS 2 . #1#)) NIL PUSH NIL PUSH VALS 2 . #1#) DEF get-var-info HALT)
(CLOSE 3 0 (ADDSP 2 FRAME (LREF 1 PUSH LREF 0 PUSH GREF get-var-info APPLY 2) RECV 0 2 LREF -2 TEST (FRAME (FRAME (LREF 2 PUSH FRAME (LREF -2 PUSH GREF var-info-flag-get APPLY 1) PUSH GREF logior APPLY 2) PUSH LREF -2 PUSH GREF var-info-flag-set! APPLY 2) LREF -2 . #0=(RET)) VOID . #0#) DEF add-var-info HALT)
(CLOSE 3 0 (ADDSP 2 FRAME (LREF 1 PUSH LREF 0 PUSH GREF get-var-info APPLY 2) RECV 0 2 LREF -2 TEST (FRAME (LREF 2 PUSH FRAME (LREF -2 PUSH GREF var-info-flag-get APPLY 1) PUSH GREF bit? APPLY 2) TEST (LREF -2 . #0=(RET)) NIL . #0#) NIL . #0#) DEF var-has-attr? HALT)
(CLOSE 2 0 (ADDSP 3 NIL LOCAL -2 LREF 0 LOCAL -3 . #0=(TEST (FRAME (FRAME (LREF -3 PUSH GREF scope-sets APPLY 1) PUSH LREF 1 PUSH GREF assoc APPLY 2) LOCAL -4 TEST (LREF -4 CDR . #1=(RET)) FRAME (LREF -3 PUSH GREF scope-outer-scope APPLY 1) PUSH LOOP 1 1 LREF -3 . #0#) VOID . #1#)) DEF var-is-set? HALT)
(CLOSE 2 0 (ADDSP 4 FRAME (GREF VAR-FREE PUSH LREF 1 PUSH LREF 0 PUSH GREF add-var-info APPLY 3) NIL LOCAL -2 LREF 0 LOCAL -3 . #0=(TEST (FRAME (LREF 1 PUSH LREF -3 PUSH GREF scope-local-has? APPLY 2) TEST (VOID . #2=(RET)) FRAME (LREF -3 PUSH GREF scope-block-top-get APPLY 1) LOCAL -4 FRAME (LREF -4 PUSH GREF scope-frees APPLY 1) LOCAL -5 TEST (FRAME (LREF -5 PUSH LREF 1 PUSH GREF member APPLY 2) TEST (VOID . #1=(FRAME (LREF -4 PUSH GREF scope-outer-scope APPLY 1) PUSH LOOP 1 1 LREF -3 . #0#)) FRAME (FRAME (NIL PUSH LREF 1 PUSH GREF cons APPLY 2) PUSH FRAME (LREF -5 PUSH GREF last APPLY 1) PUSH GREF set-cdr! APPLY 2) . #1#) FRAME (FRAME (NIL PUSH LREF 1 PUSH GREF cons APPLY 2) PUSH LREF -4 PUSH GREF scope-frees-set! APPLY 2) . #1#) VOID . #2#)) DEF register-fref HALT)
(CLOSE 3 0 (ADDSP 3 FRAME (GREF VAR-SET PUSH LREF 1 PUSH LREF 0 PUSH GREF add-var-info APPLY 3) FRAME (LREF 1 PUSH LREF 0 PUSH GREF get-var-info APPLY 2) RECV 0 2 LREF -2 TEST (FRAME (LREF 0 PUSH LREF -3 PUSH GREF same-scope-block? APPLY 2) TEST (LREF 2 . #0=(LOCAL -4 PUSH LREF 1 PUSH LREF -3 PUSH GREF do-register-set! TAPPLY 3)) NIL . #0#) VOID RET) DEF register-set! HALT)
(CLOSE 3 0 (ADDSP 2 FRAME (LREF 0 PUSH GREF scope-sets APPLY 1) LOCAL -2 FRAME (LREF -2 PUSH LREF 1 PUSH GREF assoc APPLY 2) LOCAL -3 TEST (FRAME (LREF -3 CDR PUSH LREF 2 PUSH GREF cons APPLY 2) PUSH LREF -3 PUSH GREF set-cdr! TAPPLY 2) FRAME (LREF -2 PUSH FRAME (LREF 2 PUSH GREF list APPLY 1) PUSH LREF 1 PUSH GREF acons APPLY 3) PUSH LREF 0 PUSH GREF scope-sets-set! TAPPLY 2) DEF do-register-set! HALT)
(CLOSE 1 0 (ADDSP 3 NIL LOCAL -2 CONST 0 LOCAL -4 LREF 0 LOCAL -3 . #0=(FRAME (LREF -3 PUSH GREF scope-block-top? APPLY 1) TEST (FRAME (LREF -3 PUSH GREF scope-work-size APPLY 1) PUSH LREF -4 PUSH GT 2 TEST (LREF -4 PUSH LREF -3 PUSH GREF scope-work-size-set! TAPPLY 2) VOID RET) FRAME (FRAME (LREF -3 PUSH GREF scope-local-infos APPLY 1) PUSH GREF length APPLY 1) PUSH LREF -4 PUSH ADD 2 PUSH FRAME (LREF -3 PUSH GREF scope-outer-scope APPLY 1) PUSH LOOP 1 2 . #0#)) DEF calc-scope-work-size HALT)
(CLOSE 4 0 (LREF 3 PUSH LREF 2 PUSH FRAME (NIL PUSH NIL PUSH GREF cons APPLY 2) PUSH LREF 0 PUSH CONST :LAMBDA PUSH GREF list TAPPLY 5) DEF create-lambda-node HALT)
(CLOSE 1 0 (CONST :LAMBDA PUSH LREF 0 CAR EQ RET) DEF lambda-node? HALT)
(GREF cadr DEF lambda-scope-get HALT)
(GREF caddr DEF lambda-body-slot-get HALT)
(GREF cadddr DEF lambda-varnum-get HALT)
(GREF caddddr DEF lambda-body-node-get HALT)
(CLOSE 2 0 (LREF 1 PUSH LREF 0 CDR PUSH GREF set-car! TAPPLY 2) DEF lambda-scope-set! HALT)
(CLOSE 3 0 (ADDSP 2 LREF 0 LOCAL -2 CAR LOCAL -3 CONST :CONST PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH CLOSE 1 1 (FREF 0 PUSH LREF 0 PUSH CONST CONST PUSH GREF list* TAPPLY 3) PUSH GREF apply TAPPLY 2) CONST :VOID PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH CLOSE 0 1 (FREF 0 PUSH CONST VOID PUSH GREF list* TAPPLY 2) PUSH GREF apply TAPPLY 2) CONST :REF PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH LREF 1 PUSH CLOSE 1 2 (ADDSP 3 FRAME (LREF 0 PUSH FREF 0 PUSH GREF scope-local-has? APPLY 2) LOCAL -2 TEST (LREF -2 LOCAL -3 PUSH CONST LREF PUSH VALS 2 . #3=(RECV 0 2 CONST GREF PUSH LREF -2 EQ LOCAL -4 TEST (CONST nil . #1=(TEST (FRAME (FREF 1 PUSH CONST UNBOX PUSH GREF list* APPLY 2) . #0=(PUSH LREF -3 PUSH LREF -2 PUSH GREF list* TAPPLY 3)) FREF . #2=(1 . #0#))) CONST t TEST (FRAME (LREF 0 PUSH FREF 0 PUSH GREF var-is-set? APPLY 2) . #1#) FREF . #2#)) FRAME (LREF 0 PUSH FREF 0 PUSH GREF scope-frees-has? APPLY 2) LOCAL -3 TEST (LREF -3 LOCAL -4 PUSH CONST FREF PUSH VALS 2 . #3#) LREF 0 PUSH CONST GREF PUSH VALS 2 . #3#) PUSH GREF apply TAPPLY 2) CONST :SET PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH LREF 1 PUSH CLOSE 2 2 (FREF 1 PUSH FREF 0 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-set! TAPPLY 4) PUSH GREF apply TAPPLY 2) CONST :DEF PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH LREF 1 PUSH CLOSE 2 2 (FRAME (FREF 1 PUSH LREF 0 PUSH CONST DEF PUSH GREF list* APPLY 3) PUSH FREF 0 PUSH LREF 1 PUSH GREF compile-recur TAPPLY 3) PUSH GREF apply TAPPLY 2) CONST :IF PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH LREF 1 PUSH CLOSE 3 2 (FRAME (FRAME (FREF 1 PUSH FREF 0 PUSH LREF 2 PUSH GREF compile-recur APPLY 3) PUSH FRAME (FREF 1 PUSH FREF 0 PUSH LREF 1 PUSH GREF compile-recur APPLY 3) PUSH CONST TEST PUSH GREF list* APPLY 3) PUSH FREF 0 PUSH LREF 0 PUSH GREF compile-recur TAPPLY 3) PUSH GREF apply TAPPLY 2) CONST :LAMBDA PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH LREF 1 PUSH CLOSE 4 2 (ADDSP 2 FRAME (LREF 0 PUSH GREF scope-frees APPLY 1) LOCAL -2 FRAME (FRAME (FRAME (CONST RET PUSH GREF list APPLY 1) PUSH LREF 0 PUSH LREF 3 PUSH FRAME (LREF 0 PUSH GREF scope-local-infos APPLY 1) PUSH GREF compile-body APPLY 4) PUSH LREF 1 PUSH GREF copy-pair! APPLY 2) FRAME (LREF 0 PUSH GREF scope-work-size APPLY 1) LOCAL -3 FRAME (FREF 1 PUSH CONST 0 PUSH LREF -3 EQ TEST (LREF 1 . #4=(PUSH FRAME (LREF -2 PUSH GREF length APPLY 1) PUSH LREF 2 PUSH CONST CLOSE PUSH GREF list* APPLY 5)) FRAME (LREF 1 PUSH LREF -3 PUSH CONST ADDSP PUSH GREF list* APPLY 3) . #4#) PUSH FREF 0 PUSH LREF -2 PUSH GREF collect-free TAPPLY 3) PUSH GREF apply TAPPLY 2) CONST :INVOKE PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH LREF 2 PUSH CLOSE 3 2 (ADDSP 3 FRAME (LREF 0 PUSH GREF scope-frees APPLY 1) LOCAL -4 FRAME (LREF 0 PUSH GREF scope-local-infos APPLY 1) LOCAL -3 FRAME (FREF 0 PUSH GREF tail? APPLY 1) LOCAL -2 FRAME (LREF 0 PUSH GREF calc-scope-work-size APPLY 1) FRAME (FREF 0 PUSH LREF 0 PUSH LREF 2 PUSH LREF -3 PUSH GREF compile-body APPLY 4) PUSH LREF 0 PUSH FREF 1 PUSH LREF 1 PUSH GREF compile-args-for-local TAPPLY 4) PUSH GREF apply TAPPLY 2) CONST :MACRO PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH LREF 1 PUSH CLOSE 4 2 (ADDSP 4 FRAME (FRAME (CONST RET PUSH GREF list APPLY 1) PUSH LREF 0 PUSH LREF 3 PUSH FRAME (LREF 0 PUSH GREF scope-local-infos APPLY 1) PUSH GREF compile-body APPLY 4) LOCAL -4 FRAME (LREF 0 PUSH GREF scope-frees APPLY 1) LOCAL -3 FRAME (LREF 0 PUSH GREF scope-local-infos APPLY 1) LOCAL -2 FRAME (LREF 0 PUSH GREF scope-work-size APPLY 1) LOCAL -5 FRAME (FREF 1 PUSH CONST 0 PUSH LREF -5 EQ TEST (LREF -4 . #5=(PUSH FRAME (LREF -3 PUSH GREF length APPLY 1) PUSH LREF 2 PUSH LREF 1 PUSH CONST MACRO PUSH GREF list* APPLY 6)) FRAME (LREF -4 PUSH LREF -5 PUSH CONST ADDSP PUSH GREF list* APPLY 3) . #5#) PUSH FREF 0 PUSH LREF -3 PUSH GREF collect-free TAPPLY 3) PUSH GREF apply TAPPLY 2) CONST :APPLY PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH LREF 1 PUSH CLOSE 3 2 (FREF 1 PUSH FREF 0 PUSH LREF 0 PUSH LREF 2 PUSH LREF 1 PUSH GREF compile-apply TAPPLY 5) PUSH GREF apply TAPPLY 2) CONST :CONTI PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH LREF 1 PUSH CLOSE 1 2 (FREF 1 PUSH FREF 0 PUSH LREF 0 PUSH GREF compile-conti TAPPLY 3) PUSH GREF apply TAPPLY 2) CONST :CONTI-DIRECT PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH LREF 1 PUSH CLOSE 2 2 (FRAME (LREF 0 PUSH GREF calc-scope-work-size APPLY 1) FREF 1 PUSH FREF 0 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-conti-direct TAPPLY 4) PUSH GREF apply TAPPLY 2) CONST :VALS PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 2 PUSH LREF 1 PUSH CLOSE 1 2 (ADDSP 1 FRAME (LREF 0 PUSH GREF length APPLY 1) LOCAL -2 CONST 0 PUSH LREF -2 EQ TEST (FREF 1 PUSH CONST VOID PUSH GREF list* TAPPLY 2) FRAME (FREF 1 PUSH LREF -2 PUSH CONST VALS PUSH GREF list* APPLY 3) PUSH FREF 0 PUSH LREF 0 PUSH GREF compile-args TAPPLY 3) PUSH GREF apply TAPPLY 2) CONST :RECV PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH LREF 2 PUSH CLOSE 4 2 (ADDSP 2 FRAME (LREF 0 PUSH GREF calc-scope-work-size APPLY 1) FRAME (LREF 0 PUSH GREF scope-frees APPLY 1) LOCAL -3 FRAME (FREF 0 PUSH GREF tail? APPLY 1) LOCAL -2 FRAME (FRAME (FREF 0 PUSH LREF 0 PUSH LREF 3 PUSH FRAME (LREF 0 PUSH GREF scope-local-infos APPLY 1) PUSH GREF compile-body APPLY 4) PUSH LREF 1 PUSH FRAME (LREF 0 PUSH GREF scope-upper-work-size APPLY 1) PUSH CONST RECV PUSH GREF list* APPLY 4) PUSH FREF 1 PUSH LREF 2 PUSH GREF compile-recur TAPPLY 3) PUSH GREF apply TAPPLY 2) LREF 0 PUSH CONST "Unknown [%@]" PUSH GREF compile-error TAPPLY 2) DEF compile-recur HALT)
(CLOSE 2 0 (ADDSP 4 FRAME (LREF 1 PUSH LREF 0 PUSH GREF get-var-info APPLY 2) RECV 0 2 LREF -2 TEST (FRAME (LREF -2 PUSH GREF var-info-flag-get APPLY 1) LOCAL -4 FRAME (FRAME (GREF VAR-CALL-IN-BASE2 PUSH GREF VAR-CALL-OTHER PUSH GREF VAR-ARG PUSH GREF logior APPLY 3) PUSH LREF -4 PUSH GREF bit? APPLY 2) LOCAL -5 TEST (CONST nil . #0=(RET)) CONST t TEST (GREF VAR-CALL-IN-BASE1 PUSH LREF -4 PUSH GREF bit? TAPPLY 2) NIL . #0#) NIL . #0#) DEF can-eliminate-lambda-node? HALT)
(CLOSE 2 0 (ADDSP 2 LREF 0 LOCAL -2 CAR LOCAL -3 CONST :LAMBDA PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH CLOSE 5 1 (FREF 0 PUSH LREF 0 PUSH GREF scope-outer-scope-set! TAPPLY 2) PUSH GREF apply TAPPLY 2) CONST :INVOKE PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH CLOSE 3 1 (FREF 0 PUSH LREF 0 PUSH GREF scope-outer-scope-set! TAPPLY 2) PUSH GREF apply TAPPLY 2) CONST :RECV PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH CLOSE 4 1 (FREF 0 PUSH LREF 0 PUSH GREF scope-outer-scope-set! TAPPLY 2) PUSH GREF apply TAPPLY 2) CONST :SET PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH CLOSE 2 1 (FREF 0 PUSH LREF 1 PUSH GREF replace-outer-scope! TAPPLY 2) PUSH GREF apply TAPPLY 2) CONST :DEF PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH CLOSE 2 1 (FREF 0 PUSH LREF 1 PUSH GREF replace-outer-scope! TAPPLY 2) PUSH GREF apply TAPPLY 2) CONST :IF PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH CLOSE 3 1 (FRAME (FREF 0 PUSH LREF 0 PUSH GREF replace-outer-scope! APPLY 2) FRAME (FREF 0 PUSH LREF 1 PUSH GREF replace-outer-scope! APPLY 2) FREF 0 PUSH LREF 2 PUSH GREF replace-outer-scope! TAPPLY 2) PUSH GREF apply TAPPLY 2) CONST :APPLY PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH CLOSE 3 1 (FRAME (FREF 0 PUSH LREF 1 PUSH GREF replace-outer-scope! APPLY 2) FREF 0 PUSH LREF 2 PUSH GREF replace-body-scope! TAPPLY 2) PUSH GREF apply TAPPLY 2) CONST :CONTI PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH CLOSE 1 1 (FREF 0 PUSH LREF 0 PUSH GREF replace-outer-scope! TAPPLY 2) PUSH GREF apply TAPPLY 2) CONST :CONTI-DIRECT PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH CLOSE 2 1 (FREF 0 PUSH LREF 1 PUSH GREF replace-body-scope! TAPPLY 2) PUSH GREF apply TAPPLY 2) CONST :VALS PUSH LREF -3 EQ TEST (LREF -2 CDR PUSH LREF 1 PUSH CLOSE 1 1 (FREF 0 PUSH LREF 0 PUSH GREF replace-body-scope! TAPPLY 2) PUSH GREF apply TAPPLY 2) NIL RET) DEF replace-outer-scope! HALT)
(CLOSE 2 0 (FRAME (LREF 1 PUSH LREF 0 PUSH GREF lambda-scope-set! APPLY 2) LREF 1 PUSH FRAME (LREF 0 PUSH GREF lambda-body-node-get APPLY 1) PUSH GREF replace-body-scope! TAPPLY 2) DEF replace-lambda-scope! HALT)
(CLOSE 2 0 (ADDSP 3 NIL LOCAL -2 LREF 0 LOCAL -3 . #0=(FRAME (LREF -3 PUSH GREF pair? APPLY 1) TEST (LREF -3 CAR LOCAL -4 FRAME (LREF 1 PUSH LREF -4 PUSH GREF replace-outer-scope! APPLY 2) LREF -3 CDR PUSH LOOP 1 1 . #0#) VOID RET)) DEF replace-body-scope! HALT)
(CLOSE 4 0 (FRAME (LREF 3 PUSH FRAME (LREF 1 PUSH GREF length APPLY 1) PUSH LREF 0 PUSH GREF list* APPLY 3) PUSH LREF 2 PUSH LREF 1 PUSH GREF compile-args TAPPLY 3) DEF compile-embed-op HALT)
(CLOSE 4 0 (FRAME (FRAME (LREF 3 PUSH LREF 0 PUSH GREF list* APPLY 2) PUSH LREF 2 PUSH LREF 1 CAR PUSH GREF compile-recur APPLY 3) PUSH LREF 2 PUSH LREF 1 CDR PUSH GREF compile-args TAPPLY 3) DEF compile-embed-op-1 HALT)
(FRAME (GREF table APPLY 0) DEF *compiler-embed-funcs* HALT)
(CLOSE 2 0 (LREF 1 PUSH LREF 0 PUSH GREF *compiler-embed-funcs* PUSH GREF table-put! TAPPLY 3) DEF register-embed-func HALT)
(CLOSE 1 0 (LREF 0 PUSH GREF *compiler-embed-funcs* PUSH GREF table-get TAPPLY 2) DEF compiler-embed-func? HALT)
(CLOSE 5 0 (ADDSP 5 FRAME (LREF 3 PUSH LREF 0 PUSH GREF apply-func-can-be-loop? APPLY 2) LOCAL -2 TEST (FRAME (GREF VAR-CALL-IN-BASE1 PUSH LREF 2 PUSH GREF bit? APPLY 2) TEST (FRAME (LREF 0 LOCAL -3 CDR CAR PUSH LREF 3 PUSH GREF can-eliminate-lambda-node? APPLY 2) TEST (LREF 4 PUSH LREF 3 PUSH LREF 1 PUSH LREF 0 PUSH LREF -2 PUSH GREF compile-apply-loop TAPPLY 5) LREF . #3=(-2 TEST (FRAME (GREF VAR-SELF-TAIL-RECUR PUSH LREF 2 PUSH GREF bit? APPLY 2) TEST (LREF 3 PUSH LREF 1 PUSH LREF 0 PUSH LREF -2 PUSH GREF compile-apply-self-recur TAPPLY 4) LREF . #2=(0 CAR PUSH CONST :REF EQ TEST (FRAME (LREF 0 LOCAL -3 CDR CAR PUSH LREF 3 PUSH GREF get-var-info APPLY 2) RECV 1 2 LREF -3 TEST (FRAME (LREF -3 PUSH GREF var-info-flag-get APPLY 1) LOCAL -5 FRAME (GREF VAR-CONTI PUSH LREF -5 PUSH GREF bit? APPLY 2) TEST (FRAME (FRAME (GREF VAR-SET PUSH GREF VAR-ARG PUSH GREF logior APPLY 2) PUSH LREF -5 PUSH GREF bit? APPLY 2) LOCAL -6 TEST (NIL . #1=(LOCAL -3 TEST (LREF 3 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-apply-conti TAPPLY 3) CONST :REF PUSH LREF 0 CAR EQ TEST (LREF 0 LOCAL -4 CDR CAR LOCAL -4 FRAME (LREF -4 PUSH LREF 3 PUSH GREF scope-local-has? APPLY 2) LOCAL -5 TEST (CONST nil . #0=(LOCAL -4 TEST (LREF 4 PUSH LREF 3 PUSH LREF 1 PUSH LREF -4 TAPPLY 3) LREF 4 PUSH LREF 3 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-apply-normal TAPPLY 4)) CONST t TEST (FRAME (LREF -4 PUSH LREF 3 PUSH GREF scope-frees-has? APPLY 2) LOCAL -5 TEST (CONST nil . #0#) CONST t TEST (FRAME (LREF -4 PUSH GREF compiler-embed-func? APPLY 1) . #0#) NIL . #0#) NIL . #0#) NIL . #0#)) CONST t . #1#) NIL . #1#) NIL . #1#) NIL . #1#)) LREF . #2#)) LREF . #3#) LREF . #3#) DEF compile-apply HALT)
(CLOSE 3 0 (ADDSP 2 FRAME (LREF 1 PUSH GREF length APPLY 1) LOCAL -2 CONST 1 PUSH LREF -2 PUSH GT 2 TEST (FRAME (LREF 0 LOCAL -3 CDR CAR PUSH CONST "Too many argument for `%@`" PUSH GREF compile-error APPLY 2) . #0=(FRAME (FRAME (CONST LONGJMP PUSH GREF list APPLY 1) PUSH LREF 2 PUSH LREF 0 PUSH GREF compile-recur APPLY 3) LOCAL -3 CONST 0 PUSH LREF -2 EQ TEST (LREF -3 PUSH CONST PUSH PUSH CONST NIL PUSH GREF list* TAPPLY 3) LREF -3 PUSH LREF 2 PUSH LREF 1 PUSH GREF compile-args TAPPLY 3)) VOID . #0#) DEF compile-apply-conti HALT)
(CLOSE 4 0 (ADDSP 3 FRAME (LREF 1 PUSH GREF length APPLY 1) LOCAL -3 FRAME (LREF 3 PUSH GREF tail? APPLY 1) LOCAL -2 FRAME (FRAME (LREF -2 TEST (FRAME (LREF -3 PUSH CONST TAPPLY PUSH GREF list APPLY 2) . #0=(PUSH LREF 2 PUSH LREF 0 PUSH GREF compile-recur APPLY 3)) FRAME (LREF -3 PUSH CONST APPLY PUSH GREF list APPLY 2) . #0#) PUSH LREF 2 PUSH LREF 1 PUSH GREF compile-args APPLY 3) LOCAL -4 LREF -2 TEST (LREF -4 RET) LREF 3 PUSH LREF -4 PUSH CONST FRAME PUSH GREF list* TAPPLY 3) DEF compile-apply-normal HALT)
(CLOSE 5 0 (ADDSP 8 FRAME (LREF 0 PUSH GREF lambda-scope-get APPLY 1) LOCAL -2 FRAME (LREF -2 PUSH GREF scope-local-infos APPLY 1) LOCAL -3 FRAME (LREF 2 PUSH GREF length APPLY 1) LOCAL -8 FRAME (LREF 4 PUSH GREF tail? APPLY 1) LOCAL -7 FRAME (LREF 0 PUSH GREF lambda-body-slot-get APPLY 1) LOCAL -6 FRAME (LREF 0 PUSH GREF lambda-varnum-get APPLY 1) LOCAL -5 FRAME (LREF 3 PUSH LREF -3 PUSH GREF expand-scope2 APPLY 2) LOCAL -4 FRAME (LREF -5 PUSH GREF pair? APPLY 1) TEST (FRAME (CONST "Not implemented: rest param for loop" PUSH GREF compile-error APPLY 1) . #1=(LREF -5 PUSH LREF -8 EQ TEST (VOID . #0=(FRAME (LREF -4 PUSH LREF 0 PUSH GREF replace-lambda-scope! APPLY 2) FRAME (FRAME (LREF 4 PUSH LREF -4 PUSH FRAME (LREF 0 PUSH GREF lambda-body-node-get APPLY 1) PUSH LREF -3 PUSH GREF compile-body APPLY 4) PUSH LREF -6 PUSH GREF copy-pair! APPLY 2) FRAME (LREF -4 PUSH GREF calc-scope-work-size APPLY 1) LREF -6 PUSH LREF -4 PUSH LREF 3 PUSH LREF 2 PUSH GREF compile-args-for-local TAPPLY 4)) FRAME (LREF -8 PUSH LREF -5 PUSH LREF 1 LOCAL -9 CDR CAR PUSH CONST "Illegal argnum, `%@` requires %@, but %@" PUSH GREF compile-error APPLY 4) . #0#)) VOID . #1#) DEF compile-apply-loop HALT)
(CLOSE 4 0 (ADDSP 4 FRAME (LREF 1 LOCAL -2 CDR CAR PUSH LREF 3 PUSH GREF can-eliminate-lambda-node? APPLY 2) TEST (FRAME (FRAME (LREF 0 PUSH GREF lambda-scope-get APPLY 1) PUSH GREF scope-upper-work-size APPLY 1) . #2=(LOCAL -4 FRAME (LREF 0 PUSH GREF lambda-varnum-get APPLY 1) LOCAL -3 FRAME (LREF 2 PUSH GREF length APPLY 1) LOCAL -2 FRAME (LREF -3 PUSH GREF pair? APPLY 1) TEST (FRAME (CONST "Not implemented: rest param for loop" PUSH GREF compile-error APPLY 1) . #1=(LREF -3 PUSH LREF -2 EQ TEST (VOID . #0=(FRAME (FRAME (LREF 0 PUSH GREF lambda-body-slot-get APPLY 1) PUSH LREF -2 PUSH LREF -4 PUSH CONST LOOP PUSH GREF list* APPLY 4) PUSH LREF 3 PUSH LREF 2 PUSH GREF compile-args TAPPLY 3)) FRAME (LREF -2 PUSH LREF -3 PUSH LREF 1 LOCAL -5 CDR CAR PUSH CONST "Illegal argnum, `%@` requires %@, but %@" PUSH GREF compile-error APPLY 4) . #0#)) VOID . #1#)) CONST 0 . #2#) DEF compile-apply-self-recur HALT)
(CLOSE 4 0 (ADDSP 3 FRAME (LREF 1 PUSH GREF lambda-node? APPLY 1) TEST (FRAME (LREF 0 PUSH LREF 2 PUSH GREF can-eliminate-lambda-node? APPLY 2) TEST (LREF 3 RET) FRAME . #1=((LREF 0 PUSH LREF 2 PUSH GREF scope-local-has? APPLY 2) LOCAL -2 TEST (LREF -2 LOCAL -3 PUSH CONST LSET PUSH VALS 2 . #0=(RECV 0 2 FRAME (LREF 3 PUSH LREF -3 PUSH LREF -2 PUSH GREF list* APPLY 3) PUSH LREF 2 PUSH LREF 1 PUSH GREF compile-recur TAPPLY 3)) FRAME (LREF 0 PUSH LREF 2 PUSH GREF scope-frees-has? APPLY 2) LOCAL -3 TEST (LREF -3 LOCAL -4 PUSH CONST FSET PUSH VALS 2 . #0#) LREF 0 PUSH CONST GSET PUSH VALS 2 . #0#)) FRAME . #1#) DEF compile-set! HALT)
(CLOSE 3 0 (ADDSP 2 FRAME (LREF 2 PUSH GREF tail? APPLY 1) LOCAL -2 FRAME (FRAME (LREF -2 TEST (CONST (TAPPLY 1) . #0=(PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-recur APPLY 3)) CONST (APPLY 1) . #0#) PUSH CONST PUSH PUSH LREF -2 PUSH CONST CONTI PUSH GREF list* APPLY 4) LOCAL -3 LREF -2 TEST (LREF -3 RET) LREF 2 PUSH LREF -3 PUSH CONST FRAME PUSH GREF list* TAPPLY 3) DEF compile-conti HALT)
(CLOSE 4 0 (ADDSP 6 FRAME (LREF 0 PUSH GREF scope-local-infos APPLY 1) LOCAL -2 FRAME (LREF -2 LOCAL -3 CAR CAR PUSH LREF 0 PUSH GREF get-var-info APPLY 2) RECV 1 2 FRAME (LREF -3 PUSH GREF var-info-flag-get APPLY 1) LOCAL -4 FRAME (LREF 3 PUSH GREF tail? APPLY 1) LOCAL -3 FRAME (FRAME (GREF VAR-SET PUSH GREF VAR-ARG PUSH GREF logior APPLY 2) PUSH LREF -4 PUSH GREF bit? APPLY 2) TEST (FRAME (FRAME (LREF -3 TEST (LREF 3 . #0=(PUSH LREF 0 PUSH LREF 1 PUSH LREF -2 PUSH GREF compile-body APPLY 4)) FRAME (CONST UNFRAME PUSH GREF list APPLY 1) . #0#) PUSH FRAME (LREF -2 LOCAL -5 CAR CAR PUSH LREF 0 PUSH GREF scope-local-has? APPLY 2) PUSH CONST LOCAL PUSH LREF -3 PUSH CONST CONTI PUSH GREF list* APPLY 5) LOCAL -5 LREF -3 TEST (LREF -5 RET) LREF 3 PUSH LREF -5 PUSH CONST FRAME PUSH GREF list* TAPPLY 3) FRAME (FRAME (GREF VAR-SELF-TAIL-RECUR PUSH GREF VAR-CALL-OTHER PUSH GREF VAR-CALL-IN-BASE1 PUSH GREF logior APPLY 3) PUSH LREF -4 PUSH GREF bit? APPLY 2) TEST (FRAME (GREF gensym APPLY 0) LOCAL -5 FRAME (FRAME (FRAME (GREF VAR-ARG PUSH LREF -5 PUSH GREF cons APPLY 2) PUSH FRAME (GREF VAR-ARG PUSH LREF -5 PUSH GREF cons APPLY 2) PUSH FRAME (GREF VAR-ARG PUSH LREF -5 PUSH GREF cons APPLY 2) PUSH GREF list APPLY 3) PUSH FRAME (LREF 0 PUSH GREF scope-local-infos APPLY 1) PUSH GREF append APPLY 2) LOCAL -6 FRAME (LREF 2 PUSH LREF -6 PUSH GREF expand-scope2 APPLY 2) LOCAL -7 FRAME (LREF -7 PUSH LREF 1 PUSH GREF replace-body-scope! APPLY 2) FRAME (LREF -7 PUSH GREF calc-scope-work-size APPLY 1) LREF 3 PUSH FRAME (LREF 3 PUSH LREF -7 PUSH LREF 1 PUSH LREF -2 PUSH GREF compile-body APPLY 4) PUSH FRAME (LREF -7 PUSH GREF scope-upper-work-size APPLY 1) PUSH CONST SETJMP PUSH GREF list* TAPPLY 4) FRAME (LREF 2 PUSH LREF 1 PUSH GREF replace-body-scope! APPLY 2) LREF 3 PUSH LREF 2 PUSH LREF 1 PUSH LREF -2 PUSH GREF compile-body TAPPLY 4) DEF compile-conti-direct HALT)
(CLOSE 4 0 (ADDSP 1 LREF 1 TEST (NIL LOCAL -2 BOX -2 LREF -2 PUSH LREF 2 PUSH LREF 3 PUSH CLOSE 1 3 (LREF 0 TEST (FRAME (LREF 0 CDR PUSH FREF 2 UNBOX APPLY 1) PUSH FREF 1 PUSH LREF 0 CAR PUSH GREF compile-recur TAPPLY 3) FREF 0 RET) LSET -2 FRAME (LREF 1 PUSH LREF -2 UNBOX APPLY 1) PUSH LREF 0 PUSH LREF 2 PUSH GREF make-boxes TAPPLY 3) LREF 3 PUSH CONST VOID PUSH GREF list* TAPPLY 2) DEF compile-body HALT)
(CLOSE 3 0 (ADDSP 1 NIL LOCAL -2 BOX -2 LREF 0 PUSH LREF -2 PUSH LREF 2 PUSH CLOSE 1 3 (ADDSP 3 . #0=(LREF 0 TEST (LREF 0 CDR LOCAL -3 LREF 0 LOCAL -2 CAR CAR LOCAL -2 FRAME (LREF -2 PUSH FREF 2 PUSH GREF var-is-set? APPLY 2) TEST (FRAME (FREF 2 PUSH LREF -2 PUSH GREF symbol-can-be-loop? APPLY 2) TEST (FRAME (LREF -2 PUSH FREF 2 PUSH GREF can-eliminate-lambda-node? APPLY 2) . #2=(LOCAL -4 TEST (LREF . #1=(-3 PUSH LOOP 0 1 . #0#)) CONST t TEST (FRAME (LREF -3 PUSH FREF 1 UNBOX APPLY 1) PUSH FRAME (LREF -2 PUSH FREF 2 PUSH GREF scope-local-has? APPLY 2) PUSH CONST BOX PUSH GREF list* TAPPLY 3) LREF . #1#)) NIL . #2#) LREF . #1#) FREF 0 RET)) LSET -2 LREF 1 PUSH LREF -2 UNBOX TAPPLY 1) DEF make-boxes HALT)
(CLOSE 3 0 #0=(LREF 0 TEST (FRAME (FRAME (LREF 2 PUSH CONST PUSH PUSH GREF list* APPLY 2) PUSH LREF 1 PUSH LREF 0 CAR PUSH GREF compile-recur APPLY 3) PUSH LREF 1 PUSH LREF 0 CDR PUSH LOOP 0 3 . #0#) LREF 2 RET) DEF compile-args HALT)
(CLOSE 4 0 (ADDSP 6 NIL LOCAL -2 LREF 3 LOCAL -6 FRAME (LREF 2 PUSH GREF scope-upper-work-size APPLY 1) LOCAL -5 FRAME (LREF 2 PUSH GREF scope-local-infos APPLY 1) LOCAL -4 LREF 0 LOCAL -3 . #0=(TEST (FRAME (FRAME (LREF -6 PUSH FRAME (LREF -4 LOCAL -7 CAR CAR PUSH LREF 2 PUSH GREF scope-local-has? APPLY 2) PUSH CONST LOCAL PUSH GREF list* APPLY 3) PUSH LREF 1 PUSH LREF -3 CAR PUSH GREF compile-recur APPLY 3) PUSH CONST 1 PUSH LREF -5 PUSH ADD 2 PUSH LREF -4 CDR PUSH LREF -3 CDR PUSH LOOP 1 4 LREF -3 . #0#) LREF -6 RET)) DEF compile-args-for-local HALT)
(CLOSE 3 0 (ADDSP 3 . #0=(LREF 0 TEST (LREF 0 CAR LOCAL -2 FRAME (LREF -2 PUSH LREF 1 PUSH GREF scope-local-has? APPLY 2) LOCAL -3 TEST (FRAME (LREF 2 PUSH CONST PUSH PUSH LREF -3 PUSH CONST LREF PUSH GREF list* APPLY 4) . #1=(PUSH LREF 1 PUSH LREF 0 CDR PUSH LOOP 0 3 . #0#)) FRAME (LREF -2 PUSH LREF 1 PUSH GREF scope-frees-has? APPLY 2) LOCAL -4 TEST (FRAME (LREF 2 PUSH CONST PUSH PUSH LREF -4 PUSH CONST FREF PUSH GREF list* APPLY 4) . #1#) FRAME (LREF 1 PUSH LREF -2 PUSH CONST "something wrong in collect-free [%@](%@)" PUSH GREF compile-error APPLY 3) . #1#) LREF 2 RET)) DEF collect-free HALT)
(CLOSE 2 0 (ADDSP 1 CONST :REF PUSH LREF 0 CAR EQ TEST (LREF 1 PUSH LREF 0 LOCAL -2 CDR CAR PUSH GREF symbol-can-be-loop? TAPPLY 2) NIL RET) DEF apply-func-can-be-loop? HALT)
(CLOSE 2 0 (ADDSP 2 FRAME (LREF 0 PUSH LREF 1 PUSH GREF var-is-set? APPLY 2) LOCAL -2 TEST (FRAME (LREF -2 PUSH GREF single? APPLY 1) TEST (LREF -2 CAR LOCAL -3 FRAME (LREF -3 PUSH GREF lambda-node? APPLY 1) TEST (LREF -3 . #0=(RET)) NIL . #0#) NIL . #0#) VOID . #0#) DEF symbol-can-be-loop? HALT)
(CLOSE 1 0 (CONST RET PUSH LREF 0 CAR EQ RET) DEF tail? HALT)
(MACRO declaim (0 -1) 0 (FRAME (LREF 0 PUSH CLOSE 1 0 (ADDSP 4 FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (LREF 0 CAR LOCAL -2 CONST inline PUSH LREF -2 EQ TEST (NIL LOCAL -3 LREF 0 CDR LOCAL -4 . #0=(FRAME (LREF -4 PUSH GREF pair? APPLY 1) TEST (LREF -4 CAR LOCAL -5 FRAME (LREF -5 PUSH GREF declaim-inline APPLY 1) LREF -4 CDR PUSH LOOP 2 1 . #0#) VOID CONST (values) . #1=(RET))) NIL . #1#) VOID . #1#) PUSH GREF map APPLY 2) PUSH CONST do PUSH GREF list* TAPPLY 2) HALT)
(CONST 0 PUSH ADDSP 1 FRAME (GREF table APPLY 0) LOCAL -2 PUSH CLOSE 1 1 (CONST t PUSH LREF 0 PUSH FREF 0 PUSH GREF table-put! TAPPLY 3) DEF declaim-inline LREF -2 PUSH CLOSE 1 1 (FRAME (LREF 0 PUSH GREF symbol? APPLY 1) TEST (LREF 0 PUSH FREF 0 PUSH GREF table-exists? TAPPLY 2) NIL RET) DEF inline-function? LREF -2 PUSH CLOSE 2 1 (LREF 1 PUSH LREF 0 PUSH FREF 0 PUSH GREF table-put! TAPPLY 3) DEF register-inline-function LREF -2 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 PUSH GREF table-get TAPPLY 2) DEF get-inline-function-body ADDSP -2 HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (CONST ^ PUSH LREF 0 CAR EQ . #0=(RET)) NIL . #0#) DEF lambda-expression? HALT)
(CONST 0 PUSH ADDSP 1 NIL LOCAL -2 BOX -2 LREF -2 PUSH CLOSE (0 -1) 1 (FREF 0 UNBOX TEST (FRAME (LREF 0 PUSH GREF *stderr* PUSH GREF format PUSH GREF apply APPLY 3) FRAME (GREF *stderr* PUSH CONST "\n" PUSH GREF display APPLY 2) NIL PUSH FREF 0 UNBOX TAPPLY 1) FRAME (LREF 0 PUSH NIL PUSH GREF format PUSH GREF apply APPLY 3) PUSH GREF error TAPPLY 1) DEF compile-error LREF -2 PUSH CLOSE 1 1 (ADDSP 6 CONTI t LOCAL -2 FSET 0 FRAME (NIL PUSH NIL PUSH GREF create-scope APPLY 2) LOCAL -3 FRAME (NIL PUSH LREF -3 PUSH LREF 0 PUSH GREF traverse APPLY 3) LOCAL -4 FRAME (CONST HALT PUSH GREF list APPLY 1) LOCAL -5 FRAME (LREF -5 PUSH LREF -3 PUSH LREF -4 PUSH GREF compile-recur APPLY 3) LOCAL -6 FRAME (LREF -3 PUSH GREF scope-work-size APPLY 1) LOCAL -7 NIL FSET 0 CONST 0 PUSH LREF -7 EQ TEST (LREF -6 RET) FRAME (FRAME (CONST HALT PUSH LREF -7 PUSH CONST -1 PUSH SUB 2 PUSH CONST ADDSP PUSH GREF list APPLY 3) PUSH LREF -5 PUSH GREF copy-pair! APPLY 2) LREF -6 PUSH LREF -7 PUSH CONST ADDSP PUSH CONST PUSH PUSH CONST 0 PUSH CONST CONST PUSH GREF list* TAPPLY 6) DEF compile ADDSP -2 HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF compile APPLY 1) PUSH GREF run-binary TAPPLY 1) DEF eval HALT)
(CLOSE 1 0 (LREF 0 PUSH CLOSE 3 1 (LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH FREF 0 PUSH GREF compile-embed-op TAPPLY 4) RET) DEF simple-embed-func HALT)
(CLOSE 1 0 (LREF 0 PUSH CLOSE 3 1 (LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH FREF 0 PUSH GREF compile-embed-op-1 TAPPLY 4) RET) DEF simple-embed-func-1 HALT)
(CLOSE 4 0 (LREF 3 PUSH LREF 1 PUSH LREF 2 PUSH LREF 0 PUSH CLOSE 3 4 (LREF 0 TEST (FRAME (LREF 0 PUSH GREF single? APPLY 1) TEST (FREF 3 TEST (FRAME (LREF 2 PUSH FREF 3 PUSH GREF list* APPLY 2) . #0=(PUSH LREF 1 PUSH LREF 0 CAR PUSH GREF compile-recur TAPPLY 3)) LREF 2 . #0#) LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH FREF 2 PUSH GREF compile-embed-op TAPPLY 4) FREF 1 TEST (LREF 2 PUSH FREF 1 PUSH CONST CONST PUSH GREF list* TAPPLY 3) FREF 0 PUSH CONST "`%@` requires at least 1 parameter" PUSH GREF compile-error TAPPLY 2) RET) DEF arith-embed-func HALT)
(CONST 0 PUSH ADDSP 3 NIL LOCAL -2 FRAME (FRAME (FRAME (CONST CDR PUSH GREF simple-embed-func-1 APPLY 1) PUSH CONST cdr PUSH GREF cons APPLY 2) PUSH FRAME (FRAME (CONST CAR PUSH GREF simple-embed-func-1 APPLY 1) PUSH CONST car PUSH GREF cons APPLY 2) PUSH FRAME (FRAME (CONST GE PUSH GREF simple-embed-func APPLY 1) PUSH CONST >= PUSH GREF cons APPLY 2) PUSH FRAME (FRAME (CONST LE PUSH GREF simple-embed-func APPLY 1) PUSH CONST <= PUSH GREF cons APPLY 2) PUSH FRAME (FRAME (CONST GT PUSH GREF simple-embed-func APPLY 1) PUSH CONST > PUSH GREF cons APPLY 2) PUSH FRAME (FRAME (CONST LT PUSH GREF simple-embed-func APPLY 1) PUSH CONST < PUSH GREF cons APPLY 2) PUSH FRAME (FRAME (CONST EQ PUSH GREF simple-embed-func-1 APPLY 1) PUSH CONST eq? PUSH GREF cons APPLY 2) PUSH FRAME (FRAME (CONST INV PUSH NIL PUSH CONST DIV PUSH CONST / PUSH GREF arith-embed-func APPLY 4) PUSH CONST / PUSH GREF cons APPLY 2) PUSH FRAME (FRAME (NIL PUSH CONST 1 PUSH CONST MUL PUSH CONST * PUSH GREF arith-embed-func APPLY 4) PUSH CONST * PUSH GREF cons APPLY 2) PUSH FRAME (FRAME (CONST NEG PUSH NIL PUSH CONST SUB PUSH CONST - PUSH GREF arith-embed-func APPLY 4) PUSH CONST - PUSH GREF cons APPLY 2) PUSH FRAME (FRAME (NIL PUSH CONST 0 PUSH CONST ADD PUSH CONST + PUSH GREF arith-embed-func APPLY 4) PUSH CONST + PUSH GREF cons APPLY 2) PUSH GREF list APPLY 11) LOCAL -3 . #0=(FRAME (LREF -3 PUSH GREF pair? APPLY 1) TEST (LREF -3 CAR LOCAL -4 FRAME (LREF -4 CDR PUSH LREF -4 CAR PUSH GREF register-embed-func APPLY 2) LREF -3 CDR PUSH LOOP 1 1 . #0#) VOID ADDSP -4 HALT))
(CLOSE (0 -1) 0 (FRAME (GREF *stderr* PUSH LREF 0 PUSH GREF write/ss APPLY 2) GREF *stderr* PUSH CONST "\n" PUSH GREF display TAPPLY 2) DEF debug/ss HALT)
