(VOID HALT)
(FRAME (CLOSE 2 0 (FRAME (LREF 0 PUSH GREF read APPLY 1) PUSH CONST quote PUSH GREF list TAPPLY 2) PUSH CONST 39 PUSH GREF set-macro-character APPLY 2) HALT)
(FRAME (CLOSE 2 0 (FRAME (LREF 0 PUSH GREF read APPLY 1) PUSH CONST quasiquote PUSH GREF list TAPPLY 2) PUSH CONST 96 PUSH GREF set-macro-character APPLY 2) HALT)
(FRAME (CLOSE 2 0 (FRAME (LREF 0 PUSH GREF read-char APPLY 1) PUSH EXPND 1 FRAME (CONST 64 PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF read APPLY 1) PUSH CONST unquote-splicing PUSH GREF list TAPPLY 2) FRAME (FRAME (LREF 1 PUSH LREF 0 PUSH GREF unread-char APPLY 2) PUSH GREF read APPLY 1) PUSH CONST unquote PUSH GREF list TAPPLY 2) PUSH CONST 44 PUSH GREF set-macro-character APPLY 2) HALT)
(FRAME (CLOSE 2 0 (FRAME (LREF 0 PUSH CONST 93 PUSH GREF read-delimited-list APPLY 2) PUSH CONST (_) PUSH CONST ^ PUSH GREF list TAPPLY 3) PUSH CONST 91 PUSH GREF set-macro-character APPLY 2) HALT)
(MACRO defun (2 -1) 0 (FRAME (LREF 2 PUSH LREF 1 PUSH CONST ^ PUSH GREF list* APPLY 3) PUSH LREF 0 PUSH CONST def PUSH GREF list TAPPLY 3) HALT)
(CLOSE 1 0 (LREF 0 TEST (NIL . #0=(RET)) GREF t . #0#) DEF no HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF car TAPPLY 1) DEF caar HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF cdr TAPPLY 1) DEF cdar HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF car TAPPLY 1) DEF cadr HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF cdr TAPPLY 1) DEF cddr HALT)
(CLOSE 1 0 (CONST fixnum PUSH FRAME (LREF 0 PUSH GREF type APPLY 1) PUSH GREF eq? TAPPLY 2) DEF fixnum? HALT)
(CLOSE 1 0 (CONST pair PUSH FRAME (LREF 0 PUSH GREF type APPLY 1) PUSH GREF eq? TAPPLY 2) DEF pair? HALT)
(CLOSE 1 0 (CONST symbol PUSH FRAME (LREF 0 PUSH GREF type APPLY 1) PUSH GREF eq? TAPPLY 2) DEF symbol? HALT)
(CLOSE 1 0 (CONST string PUSH FRAME (LREF 0 PUSH GREF type APPLY 1) PUSH GREF eq? TAPPLY 2) DEF string? HALT)
(CLOSE 1 0 (CONST flonum PUSH FRAME (LREF 0 PUSH GREF type APPLY 1) PUSH GREF eq? TAPPLY 2) DEF flonum? HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF type APPLY 1) PUSH EXPND 1 FRAME (CONST closure PUSH LREF 0 PUSH GREF eq? APPLY 2) PUSH EXPND 1 LREF 0 TEST (LREF 0 . #0=(RET)) FRAME (CONST subr PUSH LREF 1 PUSH GREF eq? APPLY 2) PUSH EXPND 1 LREF 0 TEST (LREF 0 . #0#) FRAME (CONST continuation PUSH LREF 2 PUSH GREF eq? APPLY 2) PUSH EXPND 1 LREF 0 TEST (LREF 0 . #0#) NIL . #0#) DEF procedure? HALT)
(CLOSE 2 0 (FRAME (LREF 1 PUSH GREF pair? APPLY 1) TEST (FRAME (FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH LREF 0 APPLY 1) TEST (LREF 1 . #0=(RET)) FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 0 PUSH GREF any? TAPPLY 2) NIL . #0#) DEF any? HALT)
(CLOSE 3 0 (FRAME (LREF 1 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 2 PUSH FRAME (FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH LREF 0 APPLY 1) PUSH GREF cons APPLY 2) PUSH FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 0 PUSH GREF map1-loop TAPPLY 3) FRAME (LREF 2 PUSH GREF reverse! APPLY 1) PUSH EXPND 1 LREF 2 TEST (LREF 3 TEST (FRAME (FRAME (LREF 2 PUSH LREF 1 APPLY 1) PUSH LREF 3 PUSH GREF set-cdr! APPLY 2) LREF 0 . #0=(RET)) LREF 2 PUSH LREF 1 TAPPLY 1) LREF 0 . #0#) DEF map1-loop HALT)
(CLOSE 3 0 (FRAME (LREF 1 PUSH GREF no PUSH GREF any? APPLY 2) TEST (LREF 2 PUSH GREF reverse! TAPPLY 1) FRAME (LREF 2 PUSH FRAME (FRAME (NIL PUSH LREF 1 PUSH GREF car PUSH GREF map1-loop APPLY 3) PUSH LREF 0 PUSH GREF apply APPLY 2) PUSH GREF cons APPLY 2) PUSH FRAME (NIL PUSH LREF 1 PUSH GREF cdr PUSH GREF map1-loop APPLY 3) PUSH LREF 0 PUSH GREF mapn-loop TAPPLY 3) DEF mapn-loop HALT)
(CLOSE (2 -1) 0 (LREF 2 TEST (NIL PUSH FRAME (LREF 2 PUSH LREF 1 PUSH GREF cons APPLY 2) PUSH LREF 0 PUSH GREF mapn-loop TAPPLY 3) NIL PUSH LREF 1 PUSH LREF 0 PUSH GREF map1-loop TAPPLY 3) DEF map HALT)
(CLOSE 1 0 (LREF 0 PUSH EXPND 1 LREF 0 TEST (NIL . #1=(SHRNK 1 TEST (NIL RET) FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH EXPND 1 LREF 0 TEST (NIL . #0=(SHRNK 1 TEST (FRAME (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF list APPLY 1) PUSH GREF list TAPPLY 1) FRAME (LREF 0 PUSH EXPND 1 FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF cdr APPLY 1) SHRNK 1 PUSH GREF pair APPLY 1) PUSH FRAME (LREF 0 PUSH EXPND 1 FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF car APPLY 1) SHRNK 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF list APPLY 2) PUSH GREF cons TAPPLY 2)) GREF t . #0#)) GREF t . #1#) DEF pair HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (CONST unquote PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (LREF 1 PUSH EXPND 1 FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF car TAPPLY 1) FRAME (CONST unquote-splicing PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (CONST "Illegal ,@" PUSH GREF error TAPPLY 1) FRAME (CONST quasiquote PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH EXPND 1 FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF car APPLY 1) SHRNK 1 PUSH GREF qq-expand APPLY 1) PUSH GREF qq-expand TAPPLY 1) FRAME (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH GREF qq-expand APPLY 1) PUSH FRAME (FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH GREF qq-expand-list APPLY 1) PUSH CONST append PUSH GREF list TAPPLY 3) LREF 0 PUSH CONST quote PUSH GREF list TAPPLY 2) DEF qq-expand HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (CONST unquote PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (LREF 1 PUSH EXPND 1 FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF car APPLY 1) SHRNK 1 PUSH CONST list PUSH GREF list TAPPLY 2) FRAME (CONST unquote-splicing PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (LREF 1 PUSH EXPND 1 FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF car TAPPLY 1) FRAME (CONST quasiquote PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH EXPND 1 FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF car APPLY 1) SHRNK 1 PUSH GREF qq-expand APPLY 1) PUSH GREF qq-expand-list TAPPLY 1) FRAME (FRAME (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH GREF qq-expand APPLY 1) PUSH FRAME (FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH GREF qq-expand-list APPLY 1) PUSH CONST append PUSH GREF list APPLY 3) PUSH CONST list PUSH GREF list TAPPLY 2) FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH CONST quote PUSH GREF list TAPPLY 2) DEF qq-expand-list HALT)
(MACRO quasiquote 1 0 (LREF 0 PUSH GREF qq-expand TAPPLY 1) HALT)
(MACRO do (0 -1) 0 (NIL PUSH FRAME (FRAME (FRAME (FRAME (NIL PUSH LREF 0 PUSH GREF append APPLY 2) PUSH CONST (nil) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append TAPPLY 2) HALT)
(MACRO when (1 -1) 0 (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH LREF 1 PUSH GREF append APPLY 2) PUSH CONST (do) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append TAPPLY 2) HALT)
(MACRO unless (1 -1) 0 (FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH LREF 1 PUSH GREF append APPLY 2) PUSH CONST (do) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (NIL PUSH CONST (do) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append TAPPLY 2) HALT)
(MACRO set! (2 -1) 0 (LREF 2 TEST (FRAME (NIL PUSH FRAME (FRAME (FRAME (LREF 2 PUSH GREF pair APPLY 1) PUSH FRAME (LREF 1 PUSH LREF 0 PUSH GREF list APPLY 2) PUSH GREF cons APPLY 2) PUSH CLOSE 1 0 (FRAME (FRAME (NIL PUSH FRAME (LREF 0 PUSH EXPND 1 FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF car APPLY 1) SHRNK 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (set!) PUSH GREF append TAPPLY 2) PUSH GREF map APPLY 2) PUSH GREF append APPLY 2) PUSH CONST (do) PUSH GREF append TAPPLY 2) FRAME (FRAME (NIL PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (set!) PUSH GREF append TAPPLY 2) HALT)
(MACRO let1 (2 -1) 0 (FRAME (NIL PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (NIL PUSH LREF 2 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (NIL PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append TAPPLY 2) HALT)
(MACRO let (1 -1) 0 (FRAME (LREF 0 PUSH GREF symbol? APPLY 1) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH LREF 0 PUSH EXPND 3 FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 1 PUSH GREF cadr PUSH GREF map APPLY 2) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (FRAME (NIL PUSH LREF 2 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 1 PUSH GREF car PUSH GREF map APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (set!) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (nil) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (let1) PUSH GREF append TAPPLY 2) FRAME (NIL PUSH FRAME (LREF 0 PUSH GREF cadr PUSH GREF map APPLY 2) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (NIL PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 0 PUSH GREF car PUSH GREF map APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append TAPPLY 2) HALT)
(MACRO let* (1 -1) 0 (LREF 0 TEST (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (FRAME (NIL PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (let*) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (let1) PUSH GREF append TAPPLY 2) FRAME (NIL PUSH LREF 1 PUSH GREF append APPLY 2) PUSH CONST (do) PUSH GREF append TAPPLY 2) HALT)
(MACRO alet (1 -1) 0 (FRAME (FRAME (FRAME (NIL PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (loop) PUSH GREF append APPLY 2) PUSH CONST (let) PUSH GREF append TAPPLY 2) HALT)
(CLOSE 2 0 (LREF 0 TEST (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 2 FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 2 FRAME (CONST t PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (LREF 3 TEST (CONST "else clause must comes at last in cond" PUSH GREF compile-error TAPPLY 1) FRAME (NIL PUSH LREF 1 PUSH GREF append APPLY 2) PUSH CONST (do) PUSH GREF append TAPPLY 2) LREF 3 PUSH LREF 1 PUSH LREF 0 PUSH LREF 5 TAPPLY 3) NIL RET) DEF cond-template HALT)
(MACRO cond (0 -1) 0 (CLOSE 3 0 (FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH LREF 2 PUSH GREF append APPLY 2) PUSH CONST (cond) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (NIL PUSH LREF 1 PUSH GREF append APPLY 2) PUSH CONST (do) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append TAPPLY 2) PUSH LREF 0 PUSH GREF cond-template TAPPLY 2) HALT)
(MACRO acond (0 -1) 0 (CLOSE 3 0 (FRAME (GREF gensym APPLY 0) PUSH EXPND 1 FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH LREF 3 PUSH GREF append APPLY 2) PUSH CONST (acond) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (FRAME (NIL PUSH LREF 2 PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (it) PUSH GREF append APPLY 2) PUSH CONST (let1) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (let1) PUSH GREF append TAPPLY 2) PUSH LREF 0 PUSH GREF cond-template TAPPLY 2) HALT)
(MACRO aif (1 -1) 0 (FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (FRAME (NIL PUSH LREF 1 PUSH GREF append APPLY 2) PUSH CONST (it) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (it) PUSH GREF append APPLY 2) PUSH CONST (let1) PUSH GREF append TAPPLY 2) HALT)
(MACRO awhen (1 -1) 0 (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH LREF 1 PUSH GREF append APPLY 2) PUSH CONST (do) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (aif) PUSH GREF append TAPPLY 2) HALT)
(MACRO awhile (1 -1) 0 (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (NIL PUSH CONST (loop) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (awhen) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (nil) PUSH GREF append APPLY 2) PUSH CONST (alet) PUSH GREF append TAPPLY 2) HALT)
(MACRO let-gensym (1 -1) 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (FRAME (NIL PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 0 PUSH CLOSE 1 0 (CONST (gensym) PUSH LREF 0 PUSH GREF list TAPPLY 2) PUSH GREF map APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (let) PUSH GREF append TAPPLY 2) FRAME (FRAME (FRAME (NIL PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (NIL PUSH CONST (gensym) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (let1) PUSH GREF append TAPPLY 2) HALT)
(MACRO and (0 -1) 0 (LREF 0 TEST (FRAME (LREF 0 PUSH GREF cdr APPLY 1) TEST (FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH CONST (nil) PUSH GREF append APPLY 2) PUSH CONST (quote) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (and) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append TAPPLY 2) LREF 0 PUSH GREF car TAPPLY 1) CONST t RET) HALT)
(MACRO or (0 -1) 0 (LREF 0 TEST (FRAME (GREF gensym APPLY 0) PUSH EXPND 1 FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (or) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (let1) PUSH GREF append TAPPLY 2) NIL RET) HALT)
(MACRO case (1 -1) 0 (FRAME (GREF gensym APPLY 0) PUSH EXPND 1 FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 2 PUSH LREF 0 PUSH CLOSE 1 1 (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 2 FRAME (CONST t PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (LREF 2 RET) FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (NIL PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (quote) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (member) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append TAPPLY 2) FRAME (NIL PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (quote) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (eq?) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append TAPPLY 2) PUSH GREF map APPLY 2) PUSH GREF append APPLY 2) PUSH CONST (cond) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (let1) PUSH GREF append TAPPLY 2) HALT)
(MACRO dolist (1 -1) 0 (LREF 0 PUSH EXPND 1 FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF car APPLY 1) SHRNK 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 2 FRAME (GREF gensym APPLY 0) PUSH EXPND 1 FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (cdr) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (loop) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH LREF 4 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (car) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (let1) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (pair?) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (when) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 2 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (alet) PUSH GREF append TAPPLY 2) HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF type APPLY 1) PUSH EXPND 1 FRAME (CONST string PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (LREF 1 PUSH GREF string-length TAPPLY 1) FRAME (CONST pair PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (NIL PUSH EXPND 1 BOX 0 CONST 0 PUSH LREF 2 PUSH LREF 0 PUSH CLOSE 2 1 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (CONST 1 PUSH LREF 1 PUSH GREF + APPLY 2) PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 0 UNBOX TAPPLY 2) LREF 1 . #0=(RET)) LSET 0 TAPPLY 2) CONST 0 . #0#) DEF len HALT)
(CLOSE 1 0 (FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF last TAPPLY 1) LREF 0 RET) DEF last HALT)
(CLOSE 1 0 (NIL PUSH EXPND 1 BOX 0 NIL PUSH LREF 1 PUSH LREF 0 PUSH CLOSE 2 1 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF cons APPLY 2) PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 0 UNBOX TAPPLY 2) LREF 1 RET) LSET 0 TAPPLY 2) DEF reverse HALT)
(CLOSE 2 0 (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 PUSH GREF eq? TAPPLY 2) PUSH GREF any? TAPPLY 2) DEF member HALT)
(CLOSE 2 0 (LREF 1 TEST (FRAME (LREF 0 PUSH LREF 1 PUSH EXPND 1 FRAME (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF car APPLY 1) SHRNK 1 PUSH GREF eq? APPLY 2) TEST (LREF 1 PUSH GREF car TAPPLY 1) FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 0 PUSH GREF assoc TAPPLY 2) NIL RET) DEF assoc HALT)
(CLOSE 3 0 (LREF 2 PUSH FRAME (LREF 1 PUSH LREF 0 PUSH GREF cons APPLY 2) PUSH GREF cons TAPPLY 2) DEF acons HALT)
(CLOSE 2 0 (LREF 0 TEST (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 LREF 2 PUSH LREF 0 PUSH EXPND 2 FRAME (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 PUSH GREF eq? TAPPLY 2) PUSH GREF any? APPLY 2) SHRNK 2 TEST (LREF 2 . #0=(SHRNK 1 PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF union TAPPLY 2)) FRAME (LREF 2 PUSH LREF 0 PUSH GREF cons APPLY 2) . #0#) LREF 1 RET) DEF union HALT)
(CLOSE 2 0 (LREF 0 TEST (LREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 2 FRAME (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 PUSH GREF eq? TAPPLY 2) PUSH GREF any? APPLY 2) SHRNK 2 TEST (FRAME (LREF 1 PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF intersection APPLY 2) PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF cons TAPPLY 2) LREF 1 PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF intersection TAPPLY 2) NIL RET) DEF intersection HALT)
(CLOSE (1 -1) 0 (LREF 1 TEST (FRAME (LREF 1 PUSH GREF car APPLY 1) . #0=(PUSH EXPND 1 FRAME (LREF 0 PUSH LREF 1 PUSH GREF display APPLY 2) FRAME (LREF 0 PUSH CONST "\n" PUSH GREF display APPLY 2) SHRNK 1 LREF 0 RET)) GREF *stdout* . #0#) DEF print HALT)
(CLOSE (1 -1) 0 (LREF 1 TEST (FRAME (LREF 1 PUSH GREF car APPLY 1) . #0=(PUSH EXPND 1 LREF 0 PUSH FRAME (LREF 1 PUSH GREF write/ss-construct APPLY 1) PUSH LREF 1 PUSH GREF write/ss-print TAPPLY 3)) GREF *stdout* . #0#) DEF write/ss HALT)
(CLOSE 1 0 (FRAME (GREF table APPLY 0) PUSH EXPND 1 FRAME (CONST 0 PUSH CONST index PUSH LREF 0 PUSH GREF table-put! APPLY 3) NIL PUSH EXPND 1 BOX 0 FRAME (LREF 2 PUSH LREF 0 PUSH LREF 1 PUSH CLOSE 1 2 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH FREF 0 PUSH GREF table-exists? APPLY 2) TEST (FRAME (LREF 0 PUSH FREF 0 PUSH GREF table-get APPLY 2) TEST (VOID . #0=(RET)) FRAME (CONST index PUSH FREF 0 PUSH GREF table-get APPLY 2) PUSH EXPND 1 FRAME (LREF 0 PUSH LREF 1 PUSH FREF 0 PUSH GREF table-put! APPLY 3) FRAME (LREF 0 PUSH CONST 1 PUSH GREF + APPLY 2) PUSH CONST index PUSH FREF 0 PUSH GREF table-put! TAPPLY 3) FRAME (NIL PUSH LREF 0 PUSH FREF 0 PUSH GREF table-put! APPLY 3) FRAME (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH FREF 1 UNBOX APPLY 1) FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 1 UNBOX TAPPLY 1) VOID . #0#) LSET 0 APPLY 1) SHRNK 1 LREF 0 . #0#) DEF write/ss-construct HALT)
(CLOSE 3 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH LREF 1 PUSH GREF table-get APPLY 2) PUSH EXPND 1 LREF 0 TEST (FRAME (CONST 0 PUSH LREF 0 PUSH GREF < APPLY 2) . #3=(TEST (FRAME (LREF 0 PUSH CONST -1 PUSH GREF - APPLY 2) PUSH CONST "#%@#" PUSH LREF 3 PUSH GREF format TAPPLY 3) LREF 0 TEST (FRAME (LREF 0 PUSH CONST "#%@=" PUSH LREF 3 PUSH GREF format APPLY 3) FRAME (FRAME (LREF 0 PUSH CONST -1 PUSH GREF - APPLY 2) PUSH LREF 1 PUSH LREF 2 PUSH GREF table-put! APPLY 3) . #2=(NIL PUSH EXPND 1 BOX 0 LREF 2 PUSH CONST "(" PUSH LREF 0 PUSH LREF 3 PUSH LREF 4 PUSH CLOSE 2 3 (LREF 1 TEST (FRAME (FREF 0 PUSH LREF 0 PUSH GREF display APPLY 2) FRAME (FREF 0 PUSH FREF 1 PUSH FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH GREF write/ss-print APPLY 3) FRAME (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH GREF pair? APPLY 1) TEST (FRAME (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH FREF 1 PUSH GREF table-get APPLY 2) . #1=(TEST (FRAME (FREF 0 PUSH CONST " . " PUSH GREF display APPLY 2) FRAME (FREF 0 PUSH FREF 1 PUSH FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH GREF write/ss-print APPLY 3) FRAME (FREF 0 PUSH CONST ")" PUSH GREF display APPLY 2) . #0=(LREF 1 RET)) FRAME (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH CONST " " PUSH FREF 2 UNBOX APPLY 2) . #0#)) NIL . #1#) FRAME (FREF 0 PUSH CONST ")" PUSH GREF display APPLY 2) . #0#) LSET 0 TAPPLY 2)) VOID . #2#)) NIL . #3#) LREF 0 PUSH GREF write TAPPLY 1) DEF write/ss-print HALT)
(CLOSE 2 0 (NIL PUSH EXPND 1 BOX 0 LREF 2 PUSH NIL PUSH LREF 1 PUSH LREF 0 PUSH CLOSE 3 1 (LREF 2 TEST (FRAME (CONST 0 PUSH LREF 0 PUSH GREF > APPLY 2) . #0=(TEST (FRAME (LREF 2 PUSH GREF cdr APPLY 1) PUSH FRAME (LREF 1 PUSH FRAME (LREF 2 PUSH GREF car APPLY 1) PUSH GREF cons APPLY 2) PUSH FRAME (CONST 1 PUSH LREF 0 PUSH GREF - APPLY 2) PUSH FREF 0 UNBOX TAPPLY 3) LREF 1 PUSH GREF reverse! TAPPLY 1)) NIL . #0#) LSET 0 TAPPLY 3) DEF take HALT)
(CLOSE 2 0 (LREF 1 TEST (FRAME (CONST 0 PUSH LREF 0 PUSH GREF > APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH FRAME (CONST 1 PUSH LREF 0 PUSH GREF - APPLY 2) PUSH GREF drop TAPPLY 2) LREF 1 . #0=(RET)) VOID . #0#) DEF drop HALT)
(CLOSE 2 0 (NIL PUSH EXPND 1 BOX 0 LREF 2 PUSH CONST 0 PUSH LREF 0 PUSH LREF 1 PUSH CLOSE 2 2 (LREF 1 TEST (FRAME (FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH FREF 0 APPLY 1) TEST (LREF 0 . #0=(RET)) FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH FRAME (CONST 1 PUSH LREF 0 PUSH GREF + APPLY 2) PUSH FREF 1 UNBOX TAPPLY 2) NIL . #0#) LSET 0 TAPPLY 2) DEF position-if HALT)
(CLOSE 2 0 (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (FREF 0 PUSH LREF 0 PUSH GREF eq? TAPPLY 2) PUSH GREF position-if TAPPLY 2) DEF position HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH EXPND 1 LREF 0 TEST (NIL . #0=(RET)) GREF t . #0#) NIL . #0#) DEF single? HALT)
(CLOSE 1 0 (LREF 0 PUSH EXPND 1 LREF 0 TEST (NIL . #3=(SHRNK 1 PUSH EXPND 1 LREF 0 TEST (LREF 0 . #0=(RET)) FRAME (LREF 1 PUSH GREF pair? APPLY 1) TEST (FRAME (FRAME (LREF 1 PUSH GREF last APPLY 1) PUSH GREF cdr APPLY 1) PUSH EXPND 1 LREF 0 TEST (NIL . #1=(SHRNK 1 . #2=(PUSH EXPND 1 LREF 0 TEST (LREF 0 . #0#) NIL . #0#))) GREF t . #1#) NIL . #2#)) GREF t . #3#) DEF list? HALT)
(CLOSE 2 0 (FRAME (FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH LREF 0 PUSH GREF set-car! APPLY 2) FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 0 PUSH GREF set-cdr! TAPPLY 2) DEF copy-pair! HALT)
(MACRO record (2 -1) 0 (FRAME (FRAME (NIL PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (NIL PUSH LREF 2 PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (apply) PUSH GREF append TAPPLY 2) HALT)
(MACRO record-case (1 -1) 0 (FRAME (GREF gensym APPLY 0) PUSH EXPND 1 FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 2 PUSH LREF 0 PUSH CLOSE 1 1 (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (CONST t PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (LREF 1 RET) FRAME (NIL PUSH FRAME (FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (FREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (cdr) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (record) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append TAPPLY 2) PUSH GREF map APPLY 2) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (car) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (case) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (let1) PUSH GREF append TAPPLY 2) HALT)
(CLOSE 1 0 (LREF 0 TEST (FRAME (LREF 0 PUSH GREF pair? APPLY 1) PUSH EXPND 1 LREF 0 TEST (NIL . #2=(SHRNK 1 PUSH EXPND 1 LREF 0 TEST (LREF 0 . #0=(SHRNK 1 . #3=(TEST (NIL PUSH EXPND 1 BOX 0 NIL PUSH LREF 1 PUSH LREF 0 PUSH CLOSE 2 1 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF cons APPLY 2) PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 0 UNBOX TAPPLY 2) FRAME (LREF 1 PUSH LREF 0 PUSH GREF cons APPLY 2) PUSH GREF reverse! TAPPLY 1) LSET 0 TAPPLY 2) LREF 0 RET))) FRAME (FRAME (LREF 1 PUSH GREF last APPLY 1) PUSH GREF cdr APPLY 1) PUSH EXPND 1 LREF 0 TEST (LREF 0 . #1=(SHRNK 1 . #0#)) NIL . #1#)) GREF t . #2#) NIL . #3#) DEF dotted->proper HALT)
(CLOSE 2 0 (LREF 0 TEST (LREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 2 FRAME (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 PUSH GREF eq? TAPPLY 2) PUSH GREF any? APPLY 2) SHRNK 2 TEST (LREF 1 PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF set-minus TAPPLY 2) FRAME (LREF 1 PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF set-minus APPLY 2) PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF cons TAPPLY 2) NIL RET) DEF set-minus HALT)
(CLOSE 4 0 (FRAME (LREF 0 PUSH GREF symbol? APPLY 1) TEST (LREF 2 PUSH LREF 0 PUSH EXPND 2 FRAME (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 PUSH GREF eq? TAPPLY 2) PUSH GREF any? APPLY 2) SHRNK 2 TEST (FRAME (LREF 3 PUSH CONST UNBOX PUSH GREF list* APPLY 2) . #0=(PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-refer TAPPLY 3)) LREF 3 . #0#) FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (LREF 3 PUSH LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-list TAPPLY 4) LREF 3 PUSH LREF 0 PUSH CONST CONST PUSH GREF list* TAPPLY 3) DEF compile-recur HALT)
(CLOSE 4 0 (LREF 0 PUSH EXPND 1 FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (CONST quote PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 5 PUSH CLOSE 1 1 (FREF 0 PUSH LREF 0 PUSH CONST CONST PUSH GREF list* TAPPLY 3) PUSH GREF apply TAPPLY 2) FRAME (CONST ^ PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE (1 -1) 3 (FREF 0 PUSH FREF 1 PUSH FREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-lambda TAPPLY 5) PUSH GREF apply TAPPLY 2) FRAME (CONST if PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE (2 -1) 3 (FREF 0 PUSH FREF 1 PUSH FREF 2 PUSH LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-if TAPPLY 6) PUSH GREF apply TAPPLY 2) FRAME (CONST set! PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE 2 3 (FREF 0 PUSH FREF 1 PUSH FREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-set! TAPPLY 5) PUSH GREF apply TAPPLY 2) FRAME (CONST def PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE 2 3 (FREF 0 PUSH FREF 1 PUSH FREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-def TAPPLY 5) PUSH GREF apply TAPPLY 2) FRAME (CONST call/cc PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE 1 3 (FREF 0 PUSH FREF 1 PUSH FREF 2 PUSH LREF 0 PUSH GREF compile-call/cc TAPPLY 4) PUSH GREF apply TAPPLY 2) FRAME (CONST defmacro PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE (2 -1) 3 (FREF 0 PUSH FREF 1 PUSH FREF 2 PUSH LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-defmacro TAPPLY 6) PUSH GREF apply TAPPLY 2) FRAME (CONST values PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE (0 -1) 3 (FREF 0 PUSH FREF 1 PUSH FREF 2 PUSH LREF 0 PUSH GREF compile-values TAPPLY 4) PUSH GREF apply TAPPLY 2) FRAME (CONST receive PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE (2 -1) 3 (FREF 0 PUSH FREF 1 PUSH FREF 2 PUSH LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-receive TAPPLY 6) PUSH GREF apply TAPPLY 2) FRAME (LREF 2 PUSH GREF cdr APPLY 1) PUSH FRAME (LREF 2 PUSH GREF car APPLY 1) PUSH EXPND 2 FRAME (LREF 0 PUSH GREF direct-invoke? APPLY 1) TEST (LREF 7 PUSH LREF 6 PUSH LREF 5 PUSH LREF 1 PUSH LREF 0 PUSH EXPND 1 FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF cdr APPLY 1) SHRNK 1 PUSH LREF 0 PUSH EXPND 1 FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF car APPLY 1) SHRNK 1 PUSH GREF compile-apply-direct TAPPLY 6) FRAME (LREF 0 PUSH GREF inline-function? APPLY 1) TEST (LREF 7 PUSH LREF 6 PUSH LREF 5 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-inline-apply TAPPLY 5) LREF 7 PUSH LREF 6 PUSH LREF 5 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-apply TAPPLY 5) DEF compile-list HALT)
(CLOSE 6 0 (LREF 2 TEST (FRAME (LREF 2 PUSH GREF cdr APPLY 1) . #2=(TEST (FRAME (CONST "malformed if" PUSH GREF compile-error APPLY 1) . #1=(FRAME (NIL PUSH NIL PUSH GREF cons APPLY 2) PUSH FRAME (NIL PUSH NIL PUSH GREF cons APPLY 2) PUSH EXPND 2 FRAME (FRAME (LREF 1 PUSH LREF 0 PUSH CONST TEST PUSH GREF list* APPLY 3) PUSH LREF 6 PUSH LREF 5 PUSH LREF 2 PUSH GREF compile-recur APPLY 4) PUSH EXPND 1 FRAME (FRAME (LREF 8 PUSH LREF 7 PUSH LREF 6 PUSH LREF 4 PUSH GREF compile-recur APPLY 4) PUSH LREF 1 PUSH GREF copy-pair! APPLY 2) FRAME (LREF 5 TEST (FRAME (LREF 8 PUSH LREF 7 PUSH LREF 6 PUSH FRAME (LREF 5 PUSH GREF car APPLY 1) PUSH GREF compile-recur APPLY 4) . #0=(PUSH LREF 2 PUSH GREF copy-pair! APPLY 2)) FRAME (LREF 8 PUSH GREF compile-void APPLY 1) . #0#) LREF 0 RET)) VOID . #1#)) NIL . #2#) DEF compile-if HALT)
(CLOSE 5 0 (FRAME (LREF 0 PUSH GREF symbol? APPLY 1) TEST (VOID . #2=(FRAME (LREF 0 PUSH GREF inline-function? APPLY 1) TEST (FRAME (LREF 1 PUSH GREF lambda-expression? APPLY 1) . #1=(TEST (FRAME (LREF 1 PUSH LREF 0 PUSH GREF register-inline-function APPLY 2) . #0=(FRAME (LREF 4 PUSH LREF 0 PUSH CONST DEF PUSH GREF list* APPLY 3) PUSH LREF 3 PUSH LREF 2 PUSH LREF 1 PUSH GREF compile-recur TAPPLY 4)) VOID . #0#)) NIL . #1#)) FRAME (LREF 0 PUSH CONST "1st argument for `def` must be symbol, but `%@`" PUSH GREF compile-error APPLY 2) . #2#) DEF compile-def HALT)
(CLOSE 5 0 (FRAME (LREF 0 PUSH GREF symbol? APPLY 1) TEST (VOID . #0=(LREF 0 PUSH LREF 1 PUSH LREF 2 PUSH LREF 3 PUSH LREF 4 PUSH CLOSE 0 5 (FRAME (FREF 0 PUSH FREF 4 PUSH CONST GSET PUSH GREF list* APPLY 3) PUSH FREF 1 PUSH FREF 2 PUSH FREF 3 PUSH GREF compile-recur TAPPLY 4) PUSH LREF 1 PUSH LREF 2 PUSH LREF 3 PUSH LREF 4 PUSH CLOSE 1 4 (FRAME (FREF 0 PUSH LREF 0 PUSH CONST FSET PUSH GREF list* APPLY 3) PUSH FREF 1 PUSH FREF 2 PUSH FREF 3 PUSH GREF compile-recur TAPPLY 4) PUSH LREF 1 PUSH LREF 2 PUSH LREF 3 PUSH LREF 4 PUSH CLOSE 1 4 (FRAME (FREF 0 PUSH LREF 0 PUSH CONST LSET PUSH GREF list* APPLY 3) PUSH FREF 1 PUSH FREF 2 PUSH FREF 3 PUSH GREF compile-recur TAPPLY 4) PUSH LREF 2 PUSH LREF 0 PUSH GREF compile-lookup TAPPLY 5)) FRAME (LREF 0 PUSH CONST "1st argument for `set!` must be symbol, but `%@`" PUSH GREF compile-error APPLY 2) . #0#) DEF compile-set! HALT)
(CLOSE 4 0 (FRAME (LREF 3 PUSH GREF tail? APPLY 1) PUSH EXPND 1 FRAME (FRAME (LREF 0 TEST (CONST (TAPPLY 1) . #0=(PUSH LREF 3 PUSH LREF 2 PUSH LREF 1 PUSH GREF compile-recur APPLY 4)) CONST (APPLY 1) . #0#) PUSH CONST PUSH PUSH LREF 0 PUSH CONST CONTI PUSH GREF list* APPLY 4) PUSH EXPND 1 LREF 1 TEST (LREF 0 RET) LREF 5 PUSH LREF 0 PUSH CONST FRAME PUSH GREF list* TAPPLY 3) DEF compile-call/cc HALT)
(CLOSE 1 0 (LREF 0 PUSH CONST VOID PUSH GREF list* TAPPLY 2) DEF compile-void HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH CONST ^ PUSH GREF eq? TAPPLY 2) NIL RET) DEF direct-invoke? HALT)
(CLOSE 5 0 (FRAME (NIL PUSH NIL PUSH GREF cons APPLY 2) PUSH FRAME (LREF 1 PUSH GREF len APPLY 1) PUSH FRAME (LREF 4 PUSH GREF tail? APPLY 1) PUSH EXPND 3 FRAME (LREF 2 PUSH LREF 6 PUSH LREF 5 PUSH LREF 4 PUSH GREF compile-apply-args APPLY 4) PUSH EXPND 1 FRAME (FRAME (LREF 1 TEST (FRAME (LREF 2 PUSH CONST TAPPLY PUSH GREF list APPLY 2) . #0=(PUSH LREF 7 PUSH LREF 6 PUSH LREF 4 PUSH GREF compile-recur APPLY 4)) FRAME (LREF 2 PUSH CONST APPLY PUSH GREF list APPLY 2) . #0#) PUSH LREF 3 PUSH GREF copy-pair! APPLY 2) LREF 1 TEST (LREF 0 RET) LREF 8 PUSH LREF 0 PUSH CONST FRAME PUSH GREF list* TAPPLY 3) DEF compile-apply HALT)
(CLOSE 5 0 (FRAME (LREF 0 PUSH GREF get-inline-function-body APPLY 1) PUSH EXPND 1 LREF 5 PUSH LREF 4 PUSH LREF 3 PUSH FRAME (FRAME (NIL PUSH LREF 2 PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH GREF compile-recur TAPPLY 4) DEF compile-inline-apply HALT)
(CLOSE 4 0 (NIL PUSH EXPND 1 BOX 0 LREF 4 PUSH LREF 1 PUSH LREF 0 PUSH LREF 2 PUSH LREF 3 PUSH CLOSE 2 3 (LREF 0 TEST (FRAME (FRAME (LREF 1 PUSH CONST PUSH PUSH GREF list* APPLY 2) PUSH FREF 0 PUSH FREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF compile-recur APPLY 4) PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 2 UNBOX TAPPLY 2) LREF 1 RET) LSET 0 TAPPLY 2) DEF compile-apply-args HALT)
(CLOSE 6 0 (FRAME (LREF 0 PUSH GREF check-parameters APPLY 1) PUSH EXPND 1 FRAME (FRAME (LREF 1 PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (CONST 0 . #0=(PUSH FRAME (LREF 0 PUSH GREF len APPLY 1) PUSH GREF - APPLY 2)) CONST 1 . #0#) PUSH FRAME (LREF 3 PUSH GREF len APPLY 1) PUSH EXPND 2 FRAME (LREF 2 PUSH LREF 3 PUSH GREF eq? APPLY 2) PUSH EXPND 1 LREF 0 TEST (NIL . #5=(SHRNK 1 TEST (FRAME (LREF 1 PUSH LREF 0 PUSH GREF < APPLY 2) TEST (LREF 8 PUSH LREF 7 PUSH LREF 6 PUSH LREF 5 PUSH LREF 4 PUSH LREF 2 PUSH GREF compile-apply-direct TAPPLY 6) FRAME (LREF 1 PUSH LREF 0 PUSH GREF > APPLY 2) TEST (LREF 8 PUSH LREF 7 PUSH LREF 6 PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 5 PUSH LREF 1 PUSH GREF drop APPLY 2) PUSH GREF append APPLY 2) PUSH CONST (list) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 5 PUSH LREF 1 PUSH GREF take APPLY 2) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (NIL PUSH LREF 4 PUSH GREF append APPLY 2) PUSH FRAME (LREF 2 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH GREF compile-recur TAPPLY 4) LREF 8 PUSH LREF 7 PUSH LREF 6 PUSH FRAME (CONST (nil) PUSH LREF 5 PUSH GREF append APPLY 2) PUSH LREF 4 PUSH LREF 2 PUSH GREF compile-apply-direct TAPPLY 6) FRAME (LREF 1 PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (VOID . #3=(FRAME (NIL PUSH NIL PUSH GREF cons APPLY 2) PUSH FRAME (FRAME (LREF 6 PUSH GREF car APPLY 1) PUSH LREF 2 PUSH GREF append APPLY 2) PUSH EXPND 2 FRAME (LREF 1 PUSH LREF 9 PUSH LREF 8 PUSH LREF 7 PUSH GREF compile-apply-args APPLY 4) PUSH FRAME (FRAME (LREF 0 PUSH LREF 6 PUSH GREF find-setses APPLY 2) PUSH LREF 9 PUSH GREF union APPLY 2) PUSH FRAME (LREF 8 PUSH GREF cdr APPLY 1) PUSH EXPND 3 FRAME (FRAME (CONST 0 PUSH LREF 5 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 13 PUSH LREF 12 PUSH LREF 1 PUSH LREF 0 PUSH LREF 9 PUSH LREF 3 PUSH LREF 7 PUSH GREF compile-body APPLY 7) . #2=(PUSH LREF 4 PUSH GREF copy-pair! APPLY 2)) FRAME (FRAME (FRAME (LREF 13 PUSH GREF tail? APPLY 1) TEST (LREF 13 . #1=(PUSH LREF 12 PUSH LREF 1 PUSH LREF 0 PUSH LREF 9 PUSH LREF 3 PUSH LREF 7 PUSH GREF compile-body APPLY 7)) FRAME (LREF 13 PUSH LREF 5 PUSH CONST SHRNK PUSH GREF list* APPLY 3) . #1#) PUSH LREF 5 PUSH CONST EXPND PUSH GREF list* APPLY 3) . #2#) LREF 2 RET)) FRAME (LREF 1 PUSH LREF 0 PUSH GREF < APPLY 2) TEST (CONST "few" . #4=(PUSH EXPND 1 FRAME (LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH CONST "Too %@ arguments, %@ for %@" PUSH GREF compile-error APPLY 4) SHRNK 1 . #3#)) CONST "many" . #4#)) GREF t . #5#) DEF compile-apply-direct HALT)
(CLOSE 5 0 (FRAME (LREF 0 PUSH GREF check-parameters APPLY 1) PUSH EXPND 1 FRAME (LREF 0 PUSH LREF 1 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF len APPLY 1) . #0=(PUSH FRAME (LREF 0 PUSH LREF 2 PUSH GREF find-setses APPLY 2) PUSH FRAME (FRAME (LREF 0 PUSH NIL PUSH LREF 2 PUSH GREF find-frees APPLY 3) PUSH FRAME (FRAME (LREF 3 PUSH GREF cdr APPLY 1) PUSH FRAME (LREF 3 PUSH GREF car APPLY 1) PUSH GREF union APPLY 2) PUSH GREF intersection APPLY 2) PUSH EXPND 3 FRAME (LREF 8 PUSH FRAME (CONST (RET) PUSH LREF 7 PUSH LREF 1 PUSH LREF 0 PUSH LREF 5 PUSH LREF 3 PUSH LREF 3 PUSH GREF compile-body APPLY 7) PUSH FRAME (LREF 0 PUSH GREF len APPLY 1) PUSH LREF 2 PUSH CONST CLOSE PUSH GREF list* APPLY 5) PUSH LREF 6 PUSH LREF 0 PUSH GREF collect-free TAPPLY 3)) FRAME (CONST -1 PUSH FRAME (CONST 1 PUSH FRAME (LREF 0 PUSH GREF len APPLY 1) PUSH GREF - APPLY 2) PUSH GREF list APPLY 2) . #0#) DEF compile-lambda HALT)
(CLOSE 3 0 (LREF 0 TEST (FRAME (FRAME (LREF 2 PUSH CONST PUSH PUSH GREF list* APPLY 2) PUSH LREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF compile-refer APPLY 3) PUSH LREF 1 PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF collect-free TAPPLY 3) LREF 2 RET) DEF collect-free HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF list? APPLY 1) TEST (VOID . #5=(FRAME (LREF 0 PUSH CLOSE 1 0 (FRAME (CONST &rest PUSH LREF 0 PUSH GREF eq? APPLY 2) PUSH EXPND 1 LREF 0 TEST (LREF 0 . #0=(RET)) FRAME (CONST &body PUSH LREF 1 PUSH GREF eq? APPLY 2) PUSH EXPND 1 LREF 0 TEST (LREF 0 . #0#) NIL . #0#) PUSH GREF position-if APPLY 2) PUSH EXPND 1 LREF 0 TEST (FRAME (LREF 1 PUSH FRAME (CONST 1 PUSH LREF 0 PUSH GREF + APPLY 2) PUSH GREF drop APPLY 2) PUSH FRAME (LREF 1 PUSH LREF 0 PUSH GREF take APPLY 2) PUSH EXPND 2 FRAME (LREF 1 PUSH GREF single? APPLY 1) TEST (VOID . #3=(FRAME (LREF 1 PUSH LREF 0 PUSH GREF append! APPLY 2) SHRNK 2 . #4=(SHRNK 1 PUSH EXPND 1 FRAME (LREF 1 PUSH CLOSE 1 0 (FRAME (LREF 0 PUSH GREF symbol? APPLY 1) PUSH EXPND 1 LREF 0 TEST (NIL . #0#) GREF t . #0#) PUSH GREF any? APPLY 2) PUSH EXPND 1 LREF 0 TEST (FRAME (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH CONST "parameter must be symbol, but `%@`" PUSH GREF compile-error APPLY 2) . #2=(SHRNK 1 NIL PUSH EXPND 1 BOX 0 FRAME (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 TEST (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 2 FRAME (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 PUSH GREF eq? TAPPLY 2) PUSH GREF any? APPLY 2) SHRNK 2 TEST (FRAME (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH CONST "Duplicated parameter `%@`" PUSH GREF compile-error APPLY 2) . #1=(FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 0 UNBOX TAPPLY 1)) VOID . #1#) VOID . #0#) LSET 0 APPLY 1) SHRNK 1 LREF 0 . #0#)) VOID . #2#))) FRAME (LREF 1 PUSH CONST "&rest requires only 1 name, but %@" PUSH GREF compile-error APPLY 2) . #3#) LREF 1 . #4#)) FRAME (LREF 0 PUSH CONST "parameters must be list, but %@" PUSH GREF compile-error APPLY 2) . #5#) DEF check-parameters HALT)
(CLOSE 7 0 (LREF 2 TEST (FRAME (NIL PUSH NIL PUSH GREF cons APPLY 2) PUSH FRAME (FRAME (LREF 3 PUSH LREF 5 PUSH GREF intersection APPLY 2) PUSH LREF 4 PUSH GREF union APPLY 2) PUSH FRAME (LREF 3 PUSH LREF 1 PUSH GREF cons APPLY 2) PUSH EXPND 3 NIL PUSH EXPND 1 BOX 0 FRAME (LREF 3 PUSH LREF 6 PUSH LREF 0 PUSH LREF 1 PUSH LREF 2 PUSH LREF 10 PUSH CLOSE 2 4 (FRAME (LREF 0 PUSH GREF cdr APPLY 1) TEST (FRAME (NIL PUSH NIL PUSH GREF cons APPLY 2) . #0=(PUSH EXPND 1 FRAME (LREF 0 PUSH FREF 1 PUSH FREF 2 PUSH FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH GREF compile-recur APPLY 4) PUSH EXPND 1 FRAME (LREF 0 PUSH LREF 3 PUSH GREF copy-pair! APPLY 2) FRAME (LREF 2 PUSH GREF cdr APPLY 1) TEST (LREF 1 PUSH FRAME (LREF 2 PUSH GREF cdr APPLY 1) PUSH FREF 3 UNBOX TAPPLY 2) VOID RET)) FREF 0 . #0#) LSET 0 APPLY 2) SHRNK 1 LREF 2 PUSH LREF 3 PUSH LREF 7 PUSH GREF make-boxes TAPPLY 3) LREF 6 PUSH GREF compile-void TAPPLY 1) DEF compile-body HALT)
(CLOSE 3 0 (NIL PUSH EXPND 1 BOX 0 CONST 0 PUSH LREF 2 PUSH LREF 0 PUSH LREF 1 PUSH LREF 3 PUSH CLOSE 2 3 (LREF 0 TEST (FREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 2 FRAME (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 PUSH GREF eq? TAPPLY 2) PUSH GREF any? APPLY 2) SHRNK 2 TEST (FRAME (FRAME (CONST 1 PUSH LREF 1 PUSH GREF + APPLY 2) PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 2 UNBOX APPLY 2) PUSH LREF 1 PUSH CONST BOX PUSH GREF list* TAPPLY 3) FRAME (CONST 1 PUSH LREF 1 PUSH GREF + APPLY 2) PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 2 UNBOX TAPPLY 2) FREF 0 RET) LSET 0 TAPPLY 2) DEF make-boxes HALT)
(CLOSE 4 0 (FRAME (LREF 0 PUSH GREF len APPLY 1) PUSH EXPND 1 FRAME (CONST 0 PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (LREF 4 PUSH GREF compile-void TAPPLY 1) FRAME (LREF 4 PUSH LREF 0 PUSH CONST VALS PUSH GREF list* APPLY 3) PUSH LREF 3 PUSH LREF 2 PUSH LREF 1 PUSH GREF compile-apply-args TAPPLY 4) DEF compile-values HALT)
(CLOSE 6 0 (FRAME (LREF 0 PUSH GREF check-parameters APPLY 1) PUSH EXPND 1 FRAME (FRAME (LREF 4 PUSH GREF car APPLY 1) PUSH LREF 0 PUSH GREF append APPLY 2) PUSH EXPND 1 FRAME (NIL PUSH NIL PUSH GREF cons APPLY 2) PUSH FRAME (LREF 1 PUSH LREF 2 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 2 PUSH GREF len APPLY 1) . #0=(PUSH FRAME (FRAME (LREF 0 PUSH LREF 4 PUSH GREF find-setses APPLY 2) PUSH LREF 6 PUSH GREF union APPLY 2) PUSH FRAME (LREF 5 PUSH GREF cdr APPLY 1) PUSH EXPND 4 FRAME (FRAME (LREF 3 PUSH LREF 2 PUSH CONST RECV PUSH GREF list* APPLY 3) PUSH LREF 10 PUSH LREF 9 PUSH LREF 7 PUSH GREF compile-recur APPLY 4) PUSH EXPND 1 FRAME (FRAME (FRAME (LREF 12 PUSH FRAME (LREF 6 PUSH GREF len APPLY 1) PUSH CONST SHRNK PUSH GREF list* APPLY 3) PUSH LREF 11 PUSH LREF 2 PUSH LREF 1 PUSH LREF 9 PUSH LREF 5 PUSH LREF 5 PUSH GREF compile-body APPLY 7) PUSH LREF 4 PUSH GREF copy-pair! APPLY 2) LREF 0 RET)) FRAME (CONST -1 PUSH FRAME (CONST 1 PUSH FRAME (LREF 1 PUSH GREF len APPLY 1) PUSH GREF - APPLY 2) PUSH GREF list APPLY 2) . #0#) DEF compile-receive HALT)
(CLOSE 3 0 (FRAME (LREF 1 PUSH FRAME (LREF 2 PUSH GREF dotted->proper APPLY 1) PUSH GREF union APPLY 2) PUSH EXPND 1 NIL PUSH EXPND 1 BOX 0 LREF 2 PUSH NIL PUSH LREF 0 PUSH LREF 1 PUSH CLOSE 2 2 (LREF 1 TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH FRAME (FRAME (FREF 0 PUSH FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH GREF find-free APPLY 2) PUSH LREF 0 PUSH GREF union APPLY 2) PUSH FREF 1 UNBOX TAPPLY 2) LREF 0 RET) LSET 0 TAPPLY 2) DEF find-frees HALT)
(CLOSE 2 0 (FRAME (LREF 0 PUSH GREF symbol? APPLY 1) TEST (LREF 1 PUSH LREF 0 PUSH EXPND 2 FRAME (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 PUSH GREF eq? TAPPLY 2) PUSH GREF any? APPLY 2) SHRNK 2 TEST (NIL . #0=(RET)) LREF 0 PUSH GREF list TAPPLY 1) FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (LREF 0 PUSH EXPND 1 FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (CONST ^ PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (1 -1) 1 (LREF 0 PUSH FREF 0 PUSH LREF 1 PUSH GREF find-frees TAPPLY 3) PUSH GREF apply TAPPLY 2) FRAME (CONST quote PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH CLOSE 1 0 (NIL . #0#) PUSH GREF apply TAPPLY 2) FRAME (CONST if PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (NIL PUSH FREF 0 PUSH LREF 0 PUSH GREF find-frees TAPPLY 3) PUSH GREF apply TAPPLY 2) FRAME (CONST set! PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE 2 1 (FRAME (FREF 0 PUSH LREF 1 PUSH GREF find-free APPLY 2) PUSH FREF 0 PUSH LREF 0 PUSH EXPND 2 FRAME (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 PUSH GREF eq? TAPPLY 2) PUSH GREF any? APPLY 2) SHRNK 2 TEST (NIL . #1=(PUSH GREF union TAPPLY 2)) FRAME (LREF 0 PUSH GREF list APPLY 1) . #1#) PUSH GREF apply TAPPLY 2) FRAME (CONST def PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE 2 1 (FRAME (FREF 0 PUSH LREF 1 PUSH GREF find-free APPLY 2) PUSH FREF 0 PUSH LREF 0 PUSH EXPND 2 FRAME (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 PUSH GREF eq? TAPPLY 2) PUSH GREF any? APPLY 2) SHRNK 2 TEST (NIL . #2=(PUSH GREF union TAPPLY 2)) FRAME (LREF 0 PUSH GREF list APPLY 1) . #2#) PUSH GREF apply TAPPLY 2) FRAME (CONST call/cc PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (NIL PUSH FREF 0 PUSH LREF 0 PUSH GREF find-frees TAPPLY 3) PUSH GREF apply TAPPLY 2) FRAME (CONST defmacro PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (2 -1) 1 (LREF 1 PUSH FREF 0 PUSH LREF 2 PUSH GREF find-frees TAPPLY 3) PUSH GREF apply TAPPLY 2) FRAME (CONST values PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (NIL PUSH FREF 0 PUSH LREF 0 PUSH GREF find-frees TAPPLY 3) PUSH GREF apply TAPPLY 2) FRAME (CONST receive PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (2 -1) 1 (FRAME (LREF 0 PUSH FREF 0 PUSH LREF 2 PUSH GREF find-frees APPLY 3) PUSH FRAME (FREF 0 PUSH LREF 1 PUSH GREF find-free APPLY 2) PUSH GREF union TAPPLY 2) PUSH GREF apply TAPPLY 2) NIL PUSH LREF 3 PUSH LREF 2 PUSH GREF find-frees TAPPLY 3) NIL . #0#) DEF find-free HALT)
(CLOSE 2 0 (NIL PUSH EXPND 1 BOX 0 LREF 1 PUSH NIL PUSH LREF 0 PUSH LREF 2 PUSH CLOSE 2 2 (LREF 1 TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH FRAME (FRAME (FREF 0 PUSH FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH GREF find-sets APPLY 2) PUSH LREF 0 PUSH GREF union APPLY 2) PUSH FREF 1 UNBOX TAPPLY 2) LREF 0 RET) LSET 0 TAPPLY 2) DEF find-setses HALT)
(CLOSE 2 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (LREF 0 PUSH EXPND 1 FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (CONST set! PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE 2 1 (FRAME (FREF 0 PUSH LREF 1 PUSH GREF find-sets APPLY 2) PUSH FREF 0 PUSH LREF 0 PUSH EXPND 2 FRAME (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 PUSH GREF eq? TAPPLY 2) PUSH GREF any? APPLY 2) SHRNK 2 TEST (FRAME (LREF 0 PUSH GREF list APPLY 1) . #0=(PUSH GREF union TAPPLY 2)) NIL . #0#) PUSH GREF apply TAPPLY 2) FRAME (CONST def PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE 2 1 (FREF 0 PUSH LREF 1 PUSH GREF find-sets TAPPLY 2) PUSH GREF apply TAPPLY 2) FRAME (CONST ^ PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (1 -1) 1 (FRAME (FRAME (LREF 0 PUSH GREF dotted->proper APPLY 1) PUSH FREF 0 PUSH GREF set-minus APPLY 2) PUSH LREF 1 PUSH GREF find-setses TAPPLY 2) PUSH GREF apply TAPPLY 2) FRAME (CONST quote PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH CLOSE (0 -1) 0 (NIL . #1=(RET)) PUSH GREF apply TAPPLY 2) FRAME (CONST if PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (FREF 0 PUSH LREF 0 PUSH GREF find-setses TAPPLY 2) PUSH GREF apply TAPPLY 2) FRAME (CONST call/cc PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (FREF 0 PUSH LREF 0 PUSH GREF find-setses TAPPLY 2) PUSH GREF apply TAPPLY 2) FRAME (CONST defmacro PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (2 -1) 1 (FRAME (FRAME (LREF 1 PUSH GREF dotted->proper APPLY 1) PUSH FREF 0 PUSH GREF set-minus APPLY 2) PUSH LREF 2 PUSH GREF find-setses TAPPLY 2) PUSH GREF apply TAPPLY 2) FRAME (CONST values PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (FREF 0 PUSH LREF 0 PUSH GREF find-setses TAPPLY 2) PUSH GREF apply TAPPLY 2) FRAME (CONST receive PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (2 -1) 1 (FRAME (FRAME (FRAME (LREF 0 PUSH GREF dotted->proper APPLY 1) PUSH FREF 0 PUSH GREF set-minus APPLY 2) PUSH LREF 2 PUSH GREF find-setses APPLY 2) PUSH FRAME (FREF 0 PUSH LREF 1 PUSH GREF find-sets APPLY 2) PUSH GREF union TAPPLY 2) PUSH GREF apply TAPPLY 2) LREF 3 PUSH LREF 2 PUSH GREF find-setses TAPPLY 2) NIL . #1#) DEF find-sets HALT)
(CLOSE 3 0 (LREF 0 PUSH LREF 2 PUSH CLOSE 0 2 (FREF 0 PUSH FREF 1 PUSH CONST GREF PUSH GREF list* TAPPLY 3) PUSH LREF 2 PUSH CLOSE 1 1 (FREF 0 PUSH LREF 0 PUSH CONST FREF PUSH GREF list* TAPPLY 3) PUSH LREF 2 PUSH CLOSE 1 1 (FREF 0 PUSH LREF 0 PUSH CONST LREF PUSH GREF list* TAPPLY 3) PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-lookup TAPPLY 5) DEF compile-refer HALT)
(CLOSE 2 0 (NIL PUSH EXPND 1 BOX 0 CONST 0 PUSH LREF 2 PUSH LREF 0 PUSH LREF 1 PUSH CLOSE 2 2 (LREF 0 TEST (FRAME (FREF 0 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF eq? APPLY 2) TEST (LREF 1 . #0=(RET)) FRAME (CONST 1 PUSH LREF 1 PUSH GREF + APPLY 2) PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 1 UNBOX TAPPLY 2) NIL . #0#) LSET 0 TAPPLY 2) DEF find-index HALT)
(CLOSE 5 0 (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH EXPND 2 FRAME (LREF 0 PUSH LREF 2 PUSH GREF find-index APPLY 2) PUSH EXPND 1 LREF 0 TEST (LREF 0 PUSH EXPND 1 LREF 0 PUSH LREF 6 TAPPLY 1) FRAME (LREF 2 PUSH LREF 3 PUSH GREF find-index APPLY 2) PUSH EXPND 1 LREF 0 TEST (LREF 0 PUSH EXPND 1 LREF 0 PUSH LREF 8 TAPPLY 1) LREF 8 TAPPLY 0) DEF compile-lookup HALT)
(CLOSE 1 0 (CONST RET PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF eq? TAPPLY 2) DEF tail? HALT)
(CLOSE 6 0 (FRAME (LREF 1 PUSH GREF check-parameters APPLY 1) PUSH EXPND 1 FRAME (LREF 0 PUSH LREF 2 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 2 PUSH GREF len APPLY 1) . #0=(PUSH FRAME (LREF 0 PUSH LREF 3 PUSH GREF find-setses APPLY 2) PUSH FRAME (FRAME (LREF 0 PUSH NIL PUSH LREF 3 PUSH GREF find-frees APPLY 3) PUSH FRAME (FRAME (LREF 4 PUSH GREF cdr APPLY 1) PUSH FRAME (LREF 4 PUSH GREF car APPLY 1) PUSH GREF union APPLY 2) PUSH GREF intersection APPLY 2) PUSH EXPND 3 FRAME (LREF 9 PUSH FRAME (CONST (RET) PUSH LREF 8 PUSH LREF 1 PUSH LREF 0 PUSH LREF 6 PUSH LREF 3 PUSH LREF 3 PUSH GREF compile-body APPLY 7) PUSH FRAME (LREF 0 PUSH GREF len APPLY 1) PUSH LREF 2 PUSH LREF 4 PUSH CONST MACRO PUSH GREF list* APPLY 6) PUSH LREF 7 PUSH LREF 0 PUSH GREF collect-free TAPPLY 3)) FRAME (CONST -1 PUSH FRAME (CONST 1 PUSH FRAME (LREF 0 PUSH GREF len APPLY 1) PUSH GREF - APPLY 2) PUSH GREF list APPLY 2) . #0#) DEF compile-defmacro HALT)
(CLOSE 2 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (LREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 2 FRAME (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 PUSH GREF eq? TAPPLY 2) PUSH GREF any? APPLY 2) SHRNK 2 TEST (LREF 1 PUSH LREF 0 PUSH GREF macroexpand-all-sub TAPPLY 2) FRAME (LREF 0 PUSH GREF macroexpand-1 APPLY 1) PUSH EXPND 1 FRAME (LREF 1 PUSH LREF 0 PUSH GREF equal? APPLY 2) TEST (LREF 2 PUSH LREF 1 PUSH GREF macroexpand-all-sub TAPPLY 2) LREF 2 PUSH LREF 0 PUSH GREF macroexpand-all TAPPLY 2) LREF 0 RET) DEF macroexpand-all HALT)
(CLOSE 2 0 (LREF 0 PUSH LREF 1 PUSH CLOSE 1 1 (FREF 0 PUSH LREF 0 PUSH GREF macroexpand-all TAPPLY 2) PUSH GREF map TAPPLY 2) DEF map-macroexpand-all HALT)
(CLOSE 2 0 (LREF 0 PUSH EXPND 1 FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (CONST quote PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH CLOSE 1 0 (FRAME (NIL PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (quote) PUSH GREF append TAPPLY 2) PUSH GREF apply TAPPLY 2) FRAME (CONST ^ PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (1 -1) 1 (FRAME (FREF 0 PUSH FRAME (LREF 0 PUSH GREF dotted->proper APPLY 1) PUSH GREF append APPLY 2) PUSH EXPND 1 FRAME (FRAME (NIL PUSH FRAME (LREF 0 PUSH LREF 2 PUSH GREF map-macroexpand-all APPLY 2) PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append TAPPLY 2) PUSH GREF apply TAPPLY 2) FRAME (CONST if PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (FRAME (NIL PUSH FRAME (FREF 0 PUSH LREF 0 PUSH GREF map-macroexpand-all APPLY 2) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append TAPPLY 2) PUSH GREF apply TAPPLY 2) FRAME (CONST set! PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE 2 1 (FRAME (FRAME (NIL PUSH FRAME (FRAME (FREF 0 PUSH LREF 1 PUSH GREF macroexpand-all APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (set!) PUSH GREF append TAPPLY 2) PUSH GREF apply TAPPLY 2) FRAME (CONST def PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE 2 1 (FRAME (FRAME (NIL PUSH FRAME (FRAME (FREF 0 PUSH LREF 1 PUSH GREF macroexpand-all APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (def) PUSH GREF append TAPPLY 2) PUSH GREF apply TAPPLY 2) FRAME (CONST call/cc PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE 1 1 (FRAME (NIL PUSH FRAME (FRAME (FREF 0 PUSH LREF 0 PUSH GREF macroexpand-all APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (call/cc) PUSH GREF append TAPPLY 2) PUSH GREF apply TAPPLY 2) FRAME (CONST defmacro PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (2 -1) 1 (FRAME (FREF 0 PUSH FRAME (LREF 1 PUSH GREF dotted->proper APPLY 1) PUSH GREF append APPLY 2) PUSH EXPND 1 FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 0 PUSH LREF 3 PUSH GREF map-macroexpand-all APPLY 2) PUSH GREF append APPLY 2) PUSH FRAME (LREF 2 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (defmacro) PUSH GREF append TAPPLY 2) PUSH GREF apply TAPPLY 2) FRAME (CONST values PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (FRAME (NIL PUSH FRAME (FREF 0 PUSH LREF 0 PUSH GREF map-macroexpand-all APPLY 2) PUSH GREF append APPLY 2) PUSH CONST (values) PUSH GREF append TAPPLY 2) PUSH GREF apply TAPPLY 2) FRAME (CONST receive PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (2 -1) 1 (FRAME (FREF 0 PUSH FRAME (LREF 0 PUSH GREF dotted->proper APPLY 1) PUSH GREF append APPLY 2) PUSH EXPND 1 FRAME (FRAME (FRAME (NIL PUSH FRAME (LREF 0 PUSH LREF 3 PUSH GREF map-macroexpand-all APPLY 2) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FREF 0 PUSH LREF 2 PUSH GREF macroexpand-all APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (receive) PUSH GREF append TAPPLY 2) PUSH GREF apply TAPPLY 2) LREF 3 PUSH LREF 2 PUSH GREF map-macroexpand-all TAPPLY 2) DEF macroexpand-all-sub HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF macroexpand-1 APPLY 1) PUSH EXPND 1 FRAME (LREF 1 PUSH LREF 0 PUSH GREF equal? APPLY 2) TEST (LREF 1 RET) LREF 0 PUSH GREF macroexpand TAPPLY 1) DEF macroexpand HALT)
(MACRO declaim (0 -1) 0 (FRAME (NIL PUSH FRAME (LREF 0 PUSH CLOSE 1 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (CONST inline PUSH LREF 0 PUSH GREF eq? APPLY 2) TEST (NIL PUSH EXPND 1 BOX 0 FRAME (FRAME (LREF 2 PUSH GREF cdr APPLY 1) PUSH LREF 0 PUSH CLOSE 1 1 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (LREF 0 PUSH GREF proclaim-inline APPLY 1) FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH FREF 0 UNBOX TAPPLY 1) VOID . #0=(RET)) LSET 0 APPLY 1) SHRNK 1 CONST (values) . #0#) NIL . #0#) VOID . #0#) PUSH GREF map APPLY 2) PUSH GREF append APPLY 2) PUSH CONST (do) PUSH GREF append TAPPLY 2) HALT)
(FRAME (GREF table APPLY 0) DEF *inline-functions* HALT)
(CLOSE 1 0 (GREF t PUSH LREF 0 PUSH GREF *inline-functions* PUSH GREF table-put! TAPPLY 3) DEF proclaim-inline HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF symbol? APPLY 1) TEST (LREF 0 PUSH GREF *inline-functions* PUSH GREF table-exists? TAPPLY 2) NIL RET) DEF inline-function? HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (CONST ^ PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF eq? TAPPLY 2) NIL RET) DEF lambda-expression? HALT)
(CLOSE 2 0 (LREF 1 PUSH LREF 0 PUSH GREF *inline-functions* PUSH GREF table-put! TAPPLY 3) DEF register-inline-function HALT)
(CLOSE 1 0 (LREF 0 PUSH GREF *inline-functions* PUSH GREF table-get TAPPLY 2) DEF get-inline-function-body HALT)
(NIL DEF *exit-compile* HALT)
(CLOSE (0 -1) 0 (FRAME (LREF 0 PUSH GREF *stderr* PUSH GREF format PUSH GREF apply APPLY 3) FRAME (CONST "\n" PUSH GREF display APPLY 1) NIL PUSH GREF *exit-compile* TAPPLY 1) DEF compile-error HALT)
(CLOSE 1 0 (CONTI t PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 GSET *exit-compile* CONST (HALT) PUSH NIL PUSH CONST (nil) PUSH FRAME (NIL PUSH FREF 0 PUSH GREF macroexpand-all APPLY 2) PUSH GREF compile-recur TAPPLY 4) TAPPLY 1) DEF compile HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF compile APPLY 1) PUSH GREF run-binary TAPPLY 1) DEF eval HALT)
