(CLOSE 1 0 (LREF 0 TEST (GREF nil . #0=(RET)) GREF t . #0#) DEF no HALT)
(CLOSE 2 0 (FRAME (LREF 1 PUSH GREF pair? APPLY 1) TEST (FRAME (FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH LREF 0 APPLY 1) TEST (LREF 1 . #0=(RET)) FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 0 PUSH GREF any? SHIFT 2 APPLY 2) GREF nil . #0#) DEF any? HALT)
(CLOSE 3 0 (FRAME (LREF 1 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 2 PUSH FRAME (FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH LREF 0 APPLY 1) PUSH GREF cons APPLY 2) PUSH FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 0 PUSH GREF map1-loop SHIFT 3 APPLY 3) FRAME (LREF 2 PUSH GREF reverse! APPLY 1) PUSH EXPND 1 LREF 2 TEST (FRAME (FRAME (LREF 2 PUSH LREF 1 APPLY 1) PUSH LREF 3 PUSH GREF set-cdr! APPLY 2) LREF 0 . #0=(RET)) LREF 0 . #0#) DEF map1-loop HALT)
(CLOSE 3 0 (FRAME (LREF 1 PUSH GREF no PUSH GREF any? APPLY 2) TEST (LREF 2 PUSH GREF reverse! SHIFT 1 APPLY 1) FRAME (LREF 2 PUSH FRAME (FRAME (CONST nil PUSH LREF 1 PUSH GREF car PUSH GREF map1-loop APPLY 3) PUSH LREF 0 PUSH GREF apply APPLY 2) PUSH GREF cons APPLY 2) PUSH FRAME (CONST nil PUSH LREF 1 PUSH GREF cdr PUSH GREF map1-loop APPLY 3) PUSH LREF 0 PUSH GREF mapn-loop SHIFT 3 APPLY 3) DEF mapn-loop HALT)
(CLOSE (2 -1) 0 (LREF 2 TEST (CONST nil PUSH FRAME (LREF 2 PUSH LREF 1 PUSH GREF cons APPLY 2) PUSH LREF 0 PUSH GREF mapn-loop SHIFT 3 APPLY 3) CONST nil PUSH LREF 1 PUSH LREF 0 PUSH GREF map1-loop SHIFT 3 APPLY 3) DEF map HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF no APPLY 1) TEST (GREF nil RET) FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF no APPLY 1) TEST (FRAME (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF list APPLY 1) PUSH GREF list SHIFT 1 APPLY 1) FRAME (FRAME (LREF 0 PUSH GREF cddr APPLY 1) PUSH GREF pair APPLY 1) PUSH FRAME (FRAME (LREF 0 PUSH GREF cadr APPLY 1) PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF list APPLY 2) PUSH GREF cons SHIFT 2 APPLY 2) DEF pair HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF car SHIFT 1 APPLY 1) DEF cadr HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF cdr SHIFT 1 APPLY 1) DEF cddr HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (CONST unquote PUSH LREF 0 PUSH GREF is APPLY 2) TEST (LREF 1 PUSH GREF cadr SHIFT 1 APPLY 1) FRAME (CONST unquote-splicing PUSH LREF 0 PUSH GREF is APPLY 2) TEST (CONST "Illegal" PUSH GREF error SHIFT 1 APPLY 1) FRAME (CONST quasiquote PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (FRAME (LREF 1 PUSH GREF cadr APPLY 1) PUSH GREF qq-expand APPLY 1) PUSH GREF qq-expand SHIFT 1 APPLY 1) FRAME (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH GREF qq-expand APPLY 1) PUSH FRAME (FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH GREF qq-expand-list APPLY 1) PUSH CONST append PUSH GREF list SHIFT 3 APPLY 3) LREF 0 PUSH CONST quote PUSH GREF list SHIFT 2 APPLY 2) DEF qq-expand HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (CONST unquote PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cadr APPLY 1) PUSH CONST list PUSH GREF list SHIFT 2 APPLY 2) FRAME (CONST unquote-splicing PUSH LREF 0 PUSH GREF is APPLY 2) TEST (LREF 1 PUSH GREF cadr SHIFT 1 APPLY 1) FRAME (CONST quasiquote PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (FRAME (LREF 1 PUSH GREF cadr APPLY 1) PUSH GREF qq-expand APPLY 1) PUSH GREF qq-expand-list SHIFT 1 APPLY 1) FRAME (FRAME (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH GREF qq-expand APPLY 1) PUSH FRAME (FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH GREF qq-expand-list APPLY 1) PUSH CONST append PUSH GREF list APPLY 3) PUSH CONST list PUSH GREF list SHIFT 2 APPLY 2) FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH CONST quote PUSH GREF list SHIFT 2 APPLY 2) DEF qq-expand-list HALT)
(MACRO quasiquote 1 (LREF 0 PUSH GREF qq-expand SHIFT 1 APPLY 1) HALT)
(MACRO do (0 -1) (CONST nil PUSH FRAME (FRAME (FRAME (FRAME (CONST nil PUSH LREF 0 PUSH GREF append APPLY 2) PUSH CONST (nil) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(MACRO when (1 -1) (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (CONST nil PUSH LREF 1 PUSH GREF append APPLY 2) PUSH CONST (do) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(MACRO unless (1 -1) (FRAME (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (CONST nil PUSH LREF 1 PUSH GREF append APPLY 2) PUSH CONST (do) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (CONST nil PUSH CONST (do) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(MACRO def (1 -1) (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (FRAME (CONST nil PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (def) PUSH GREF append SHIFT 2 APPLY 2) FRAME (FRAME (CONST nil PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (def) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(MACRO set! (2 -1) (LREF 2 TEST (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (LREF 2 PUSH GREF pair APPLY 1) PUSH FRAME (LREF 1 PUSH LREF 0 PUSH GREF list APPLY 2) PUSH GREF cons APPLY 2) PUSH CLOSE 1 0 (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (LREF 0 PUSH GREF cadr APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (set!) PUSH GREF append SHIFT 2 APPLY 2) PUSH GREF map APPLY 2) PUSH GREF append APPLY 2) PUSH CONST (do) PUSH GREF append SHIFT 2 APPLY 2) FRAME (FRAME (CONST nil PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (set!) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(MACRO let (2 -1) (FRAME (CONST nil PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (CONST nil PUSH LREF 2 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (CONST nil PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(MACRO with (1 -1) (FRAME (CONST nil PUSH FRAME (FRAME (LREF 0 PUSH GREF pair APPLY 1) PUSH GREF cadr PUSH GREF map APPLY 2) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (CONST nil PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (LREF 0 PUSH GREF pair APPLY 1) PUSH GREF car PUSH GREF map APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(MACRO with* (1 -1) (LREF 0 TEST (FRAME (CONST nil PUSH FRAME (FRAME (LREF 0 PUSH GREF cadr APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (CONST nil PUSH FRAME (LREF 0 PUSH GREF cddr APPLY 1) TEST (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (FRAME (CONST nil PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 0 PUSH GREF cddr APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (with*) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) . #0=(PUSH GREF append APPLY 2)) LREF 1 . #0#) PUSH FRAME (FRAME (CONST nil PUSH FRAME (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append SHIFT 2 APPLY 2) FRAME (CONST nil PUSH LREF 1 PUSH GREF append APPLY 2) PUSH CONST (do) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(FRAME (CLOSE 2 0 (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (LREF 0 PUSH CONST 93 PUSH GREF read-delimited-list APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (CONST nil PUSH CONST (_) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append SHIFT 2 APPLY 2) PUSH CONST 91 PUSH GREF set-macro-character APPLY 2) HALT)
(MACRO awith (1 -1) (FRAME (CONST nil PUSH FRAME (FRAME (LREF 0 PUSH GREF pair APPLY 1) PUSH GREF cadr PUSH GREF map APPLY 2) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (FRAME (CONST nil PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (LREF 0 PUSH GREF pair APPLY 1) PUSH GREF car PUSH GREF map APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (loop) PUSH GREF append APPLY 2) PUSH CONST (set!) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (nil) PUSH GREF append APPLY 2) PUSH CONST (loop) PUSH GREF append APPLY 2) PUSH CONST (let) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(MACRO aif (1 -1) (FRAME (LREF 1 PUSH GREF no APPLY 1) TEST (LREF 0 RET) FRAME (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (FRAME (CONST nil PUSH FRAME (LREF 1 PUSH GREF cdr APPLY 1) TEST (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (CONST nil PUSH FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (aif) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) . #0=(PUSH GREF append APPLY 2)) LREF 1 . #0#) PUSH CONST (it) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (it) PUSH GREF append APPLY 2) PUSH CONST (let) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(MACRO awhen (1 -1) (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (CONST nil PUSH LREF 1 PUSH GREF append APPLY 2) PUSH CONST (do) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (aif) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(MACRO awhile (1 -1) (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (CONST nil PUSH CONST (loop) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (awhen) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (nil) PUSH GREF append APPLY 2) PUSH CONST (awith) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(MACRO w/uniq (1 -1) (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (FRAME (CONST nil PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (LREF 0 PUSH CLOSE 1 0 (CONST (uniq) PUSH LREF 0 PUSH GREF list SHIFT 2 APPLY 2) PUSH GREF map APPLY 2) PUSH GREF append PUSH GREF apply APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (with) PUSH GREF append SHIFT 2 APPLY 2) FRAME (FRAME (FRAME (CONST nil PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (FRAME (CONST nil PUSH CONST (uniq) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (let) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(MACRO and (0 -1) (LREF 0 TEST (FRAME (LREF 0 PUSH GREF cdr APPLY 1) TEST (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (CONST nil PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (and) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append SHIFT 2 APPLY 2) LREF 0 PUSH GREF car SHIFT 1 APPLY 1) CONST t RET) HALT)
(MACRO or (0 -1) (LREF 0 TEST (FRAME (GREF uniq APPLY 0) PUSH EXPND 1 FRAME (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (CONST nil PUSH FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (or) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (let) PUSH GREF append SHIFT 2 APPLY 2) UNDEF RET) HALT)
(MACRO caselet (2 -1) (FRAME (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (LREF 2 PUSH GREF nil PUSH EXPND 1 BOX 0 LREF 0 PUSH LREF 1 PUSH CLOSE 1 2 (FRAME (LREF 0 PUSH GREF no APPLY 1) TEST (CONST nil RET) FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF no APPLY 1) TEST (LREF 0 PUSH GREF car SHIFT 1 APPLY 1) FRAME (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (LREF 0 PUSH GREF cddr APPLY 1) PUSH FREF 1 UNBOX APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (LREF 0 PUSH GREF cadr APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (quote) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (is) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append SHIFT 2 APPLY 2) LSET 0 SHRNK 1 APPLY 1) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (let) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(MACRO case (1 -1) (FRAME (FRAME (FRAME (CONST nil PUSH LREF 1 PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (GREF uniq APPLY 0) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (caselet) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(CLOSE 2 0 (FRAME (LREF 1 PUSH LREF 0 PUSH GREF is APPLY 2) PUSH GREF no SHIFT 1 APPLY 1) DEF isnt HALT)
(CLOSE 1 0 (CONST 0 PUSH LREF 0 PUSH GREF nil PUSH EXPND 1 BOX 0 LREF 0 PUSH CLOSE 2 1 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (CONST 1 PUSH LREF 1 PUSH GREF + APPLY 2) PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 0 UNBOX SHIFT 2 APPLY 2) LREF 1 RET) LSET 0 SHRNK 1 SHIFT 2 APPLY 2) DEF len HALT)
(CLOSE 1 0 (FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF last SHIFT 1 APPLY 1) LREF 0 RET) DEF last HALT)
(CLOSE 1 0 (CONST nil PUSH LREF 0 PUSH GREF nil PUSH EXPND 1 BOX 0 LREF 0 PUSH CLOSE 2 1 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF cons APPLY 2) PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 0 UNBOX SHIFT 2 APPLY 2) LREF 1 RET) LSET 0 SHRNK 1 SHIFT 2 APPLY 2) DEF reverse HALT)
(CLOSE 2 0 (FRAME (LREF 1 PUSH GREF pair? APPLY 1) TEST (FRAME (FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH LREF 0 APPLY 1) TEST (LREF 1 . #0=(RET)) FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 0 PUSH GREF member-if SHIFT 2 APPLY 2) UNDEF . #0#) DEF member-if HALT)
(CLOSE 2 0 (LREF 1 PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 PUSH FREF 0 PUSH GREF is SHIFT 2 APPLY 2) PUSH GREF member-if SHIFT 2 APPLY 2) DEF member HALT)
(CLOSE (1 -1) 0 (LREF 1 TEST (FRAME (LREF 1 PUSH GREF car APPLY 1) . #0=(PUSH EXPND 1 FRAME (LREF 0 PUSH LREF 1 PUSH GREF display APPLY 2) FRAME (LREF 0 PUSH CONST "\n" PUSH GREF display APPLY 2) SHRNK 1 LREF 0 RET)) GREF *stdout* . #0#) DEF print HALT)
(CLOSE (1 -1) 0 (FRAME (GREF make-hash-table APPLY 0) PUSH LREF 1 TEST (FRAME (LREF 1 PUSH GREF car APPLY 1) . #0=(PUSH EXPND 2 FRAME (CONST 0 PUSH CONST index PUSH LREF 1 PUSH GREF hash-table-put! APPLY 3) LREF 0 PUSH FRAME (LREF 1 PUSH LREF 2 PUSH GREF write/ss-loop APPLY 2) PUSH LREF 2 PUSH GREF write/ss-print SHIFT 3 APPLY 3)) GREF *stdout* . #0#) DEF write/ss HALT)
(CLOSE 2 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (FRAME (LREF 0 PUSH LREF 1 PUSH GREF hash-table-exists? APPLY 2) PUSH GREF no APPLY 1) TEST (FRAME (GREF nil PUSH LREF 0 PUSH LREF 1 PUSH GREF hash-table-put! APPLY 3) FRAME (LREF 1 PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF write/ss-loop APPLY 2) PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF write/ss-loop SHIFT 2 APPLY 2) FRAME (FRAME (LREF 0 PUSH LREF 1 PUSH GREF hash-table-get APPLY 2) PUSH GREF no APPLY 1) TEST (FRAME (CONST index PUSH LREF 1 PUSH GREF hash-table-get APPLY 2) PUSH EXPND 1 FRAME (LREF 0 PUSH LREF 1 PUSH LREF 2 PUSH GREF hash-table-put! APPLY 3) FRAME (FRAME (LREF 0 PUSH CONST 1 PUSH GREF + APPLY 2) PUSH CONST index PUSH LREF 2 PUSH GREF hash-table-put! APPLY 3) SHRNK 1 . #1=(LREF 1 . #0=(RET))) UNDEF . #1#) LREF 1 . #0#) DEF write/ss-loop HALT)
(CLOSE 3 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH LREF 1 PUSH GREF hash-table-get APPLY 2) PUSH EXPND 1 LREF 0 TEST (FRAME (CONST 0 PUSH LREF 0 PUSH GREF < APPLY 2) . #4=(TEST (FRAME (LREF 3 PUSH CONST "#" PUSH GREF display APPLY 2) FRAME (LREF 3 PUSH FRAME (LREF 0 PUSH CONST -1 PUSH GREF - APPLY 2) PUSH GREF display APPLY 2) LREF 3 PUSH CONST "#" PUSH GREF display SHIFT 2 APPLY 2) LREF 0 TEST (FRAME (LREF 3 PUSH CONST "#" PUSH GREF display APPLY 2) FRAME (LREF 3 PUSH LREF 0 PUSH GREF display APPLY 2) FRAME (LREF 3 PUSH CONST "=" PUSH GREF display APPLY 2) FRAME (FRAME (LREF 0 PUSH CONST -1 PUSH GREF - APPLY 2) PUSH LREF 1 PUSH LREF 2 PUSH GREF hash-table-put! APPLY 3) . #3=(LREF 1 PUSH CONST "(" PUSH GREF nil PUSH EXPND 1 BOX 0 LREF 0 PUSH LREF 3 PUSH LREF 4 PUSH CLOSE 2 3 (FRAME (LREF 1 PUSH GREF no APPLY 1) TEST (FREF 0 PUSH CONST ")" PUSH GREF display SHIFT 2 APPLY 2) FRAME (FREF 0 PUSH LREF 0 PUSH GREF display APPLY 2) FRAME (FREF 0 PUSH FREF 1 PUSH FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH GREF write/ss-print APPLY 3) FRAME (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH GREF pair? APPLY 1) TEST (FRAME (FRAME (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH FREF 1 PUSH GREF hash-table-get APPLY 2) PUSH GREF no APPLY 1) . #2=(PUSH EXPND 1 LREF 0 TEST (LREF 0 . #1=(SHRNK 1 TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH CONST " " PUSH FREF 2 UNBOX SHIFT 2 APPLY 2) FRAME (FREF 0 PUSH CONST " . " PUSH GREF display APPLY 2) FRAME (FREF 0 PUSH FREF 1 PUSH FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH GREF write/ss-print APPLY 3) FREF 0 PUSH CONST ")" PUSH GREF display SHIFT 2 APPLY 2)) FRAME (FRAME (LREF 2 PUSH GREF cdr APPLY 1) PUSH GREF no APPLY 1) PUSH EXPND 1 LREF 0 TEST (LREF 0 . #0=(SHRNK 1 . #1#)) GREF nil . #0#)) UNDEF . #2#) LSET 0 SHRNK 1 SHIFT 2 APPLY 2)) UNDEF . #3#)) UNDEF . #4#) LREF 0 PUSH GREF write SHIFT 1 APPLY 1) DEF write/ss-print HALT)
(MACRO record (2 -1) (FRAME (FRAME (CONST nil PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (CONST nil PUSH LREF 2 PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (apply) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(MACRO record-case (1 -1) (FRAME (GREF uniq APPLY 0) PUSH EXPND 1 FRAME (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FRAME (FRAME (CONST nil PUSH FRAME (LREF 2 PUSH GREF nil PUSH EXPND 1 BOX 0 LREF 0 PUSH LREF 1 PUSH CLOSE 1 2 (LREF 0 TEST (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (LREF 0 PUSH GREF cddr APPLY 1) PUSH FRAME (LREF 0 PUSH GREF cadr APPLY 1) PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 3 FRAME (CONST else PUSH LREF 0 PUSH GREF is APPLY 2) TEST (LREF 3 PUSH GREF cdr SHIFT 1 APPLY 1) FRAME (FRAME (CONST nil PUSH FRAME (FRAME (LREF 4 PUSH GREF cdr APPLY 1) PUSH FREF 1 UNBOX APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (FRAME (FRAME (CONST nil PUSH LREF 2 PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (CONST nil PUSH FRAME (FREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (cdr) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (record) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append SHIFT 2 APPLY 2) UNDEF RET) LSET 0 SHRNK 1 APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FRAME (CONST nil PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (car) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (case) PUSH GREF append APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (let) PUSH GREF append SHIFT 2 APPLY 2) HALT)
(CLOSE 1 0 (LREF 0 TEST (FRAME (FRAME (LREF 0 PUSH GREF pair? APPLY 1) PUSH GREF no APPLY 1) PUSH EXPND 1 LREF 0 TEST (LREF 0 . #2=(SHRNK 1 . #0=(TEST (CONST nil PUSH LREF 0 PUSH GREF nil PUSH EXPND 1 BOX 0 LREF 0 PUSH CLOSE 2 1 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF cons APPLY 2) PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 0 UNBOX SHIFT 2 APPLY 2) FRAME (LREF 1 PUSH LREF 0 PUSH GREF cons APPLY 2) PUSH GREF reverse! SHIFT 1 APPLY 1) LSET 0 SHRNK 1 SHIFT 2 APPLY 2) LREF 0 RET))) FRAME (FRAME (LREF 1 PUSH GREF last APPLY 1) PUSH GREF cdr APPLY 1) PUSH EXPND 1 LREF 0 TEST (LREF 0 . #1=(SHRNK 1 . #2#)) GREF nil . #1#) UNDEF . #0#) DEF dotted->proper HALT)
(CLOSE 2 0 (LREF 0 TEST (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (LREF 2 PUSH LREF 0 PUSH GREF member APPLY 2) TEST (LREF 2 . #0=(SHRNK 1 PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF set-union SHIFT 2 APPLY 2)) FRAME (LREF 2 PUSH LREF 0 PUSH GREF cons APPLY 2) . #0#) LREF 1 RET) DEF set-union HALT)
(CLOSE 2 0 (LREF 0 TEST (FRAME (LREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF member APPLY 2) TEST (LREF 1 PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF set-minus SHIFT 2 APPLY 2) FRAME (LREF 1 PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF set-minus APPLY 2) PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF cons SHIFT 2 APPLY 2) CONST nil RET) DEF set-minus HALT)
(CLOSE 2 0 (LREF 0 TEST (FRAME (LREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF member APPLY 2) TEST (FRAME (LREF 1 PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF set-intersect APPLY 2) PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF cons SHIFT 2 APPLY 2) LREF 1 PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF set-intersect SHIFT 2 APPLY 2) CONST nil RET) DEF set-intersect HALT)
(GREF nil DEF *exit-compile* HALT)
(CLOSE (0 -1) 0 (FRAME (LREF 0 PUSH GREF print APPLY 1) GREF nil PUSH GREF *exit-compile* SHIFT 1 APPLY 1) DEF compile-error HALT)
(CLOSE 1 0 (CONTI t PUSH LREF 0 PUSH CLOSE 1 1 (LREF 0 GSET *exit-compile* CONST (HALT) PUSH CONST nil PUSH CONST (nil) PUSH FRAME (CONST nil PUSH FREF 0 PUSH GREF macroexpand-all APPLY 2) PUSH GREF compile-recur SHIFT 4 APPLY 4) SHIFT 1 APPLY 1) DEF compile HALT)
(CLOSE 4 0 (FRAME (LREF 0 PUSH GREF symbol? APPLY 1) TEST (FRAME (LREF 2 PUSH LREF 0 PUSH GREF member APPLY 2) TEST (FRAME (LREF 3 PUSH CONST UNBOX PUSH GREF list* APPLY 2) . #3=(PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-refer SHIFT 3 APPLY 3)) LREF 3 . #3#) FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (LREF 0 PUSH EXPND 1 FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (CONST quote PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 5 PUSH CLOSE 1 1 (FREF 0 PUSH LREF 0 PUSH CONST CONST PUSH GREF list* SHIFT 3 APPLY 3) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST ^ PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE (1 -1) 3 (FREF 0 PUSH FREF 1 PUSH FREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-lambda SHIFT 5 APPLY 5) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST if PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE (2 -1) 3 (LREF 2 TEST (FRAME (LREF 2 PUSH GREF cdr APPLY 1) TEST (FRAME (FREF 0 PUSH FREF 1 PUSH FREF 2 PUSH FRAME (FRAME (CONST nil PUSH LREF 2 PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append APPLY 2) PUSH GREF compile-recur APPLY 4) . #2=(PUSH FRAME (FREF 0 PUSH FREF 1 PUSH FREF 2 PUSH LREF 1 PUSH GREF compile-recur APPLY 4) PUSH EXPND 2 FRAME (LREF 1 PUSH LREF 0 PUSH CONST TEST PUSH GREF list* APPLY 3) PUSH FREF 1 PUSH FREF 2 PUSH LREF 2 PUSH GREF compile-recur SHIFT 4 APPLY 4)) FRAME (FREF 0 PUSH FREF 1 PUSH FREF 2 PUSH FRAME (LREF 2 PUSH GREF car APPLY 1) PUSH GREF compile-recur APPLY 4) . #2#) FRAME (FREF 0 PUSH GREF compile-undef APPLY 1) . #2#) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST set! PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE 2 3 (FREF 2 PUSH FREF 1 PUSH FREF 0 PUSH LREF 0 PUSH LREF 1 PUSH CLOSE 0 5 (FRAME (FREF 2 PUSH FREF 1 PUSH CONST GSET PUSH GREF list* APPLY 3) PUSH FREF 3 PUSH FREF 4 PUSH FREF 0 PUSH GREF compile-recur SHIFT 4 APPLY 4) PUSH FREF 2 PUSH FREF 1 PUSH FREF 0 PUSH LREF 1 PUSH CLOSE 1 4 (FRAME (FREF 1 PUSH LREF 0 PUSH CONST FSET PUSH GREF list* APPLY 3) PUSH FREF 2 PUSH FREF 3 PUSH FREF 0 PUSH GREF compile-recur SHIFT 4 APPLY 4) PUSH FREF 2 PUSH FREF 1 PUSH FREF 0 PUSH LREF 1 PUSH CLOSE 1 4 (FRAME (FREF 1 PUSH LREF 0 PUSH CONST LSET PUSH GREF list* APPLY 3) PUSH FREF 2 PUSH FREF 3 PUSH FREF 0 PUSH GREF compile-recur SHIFT 4 APPLY 4) PUSH FREF 2 PUSH LREF 0 PUSH GREF compile-lookup SHIFT 5 APPLY 5) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST def PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE 2 3 (FRAME (FREF 0 PUSH LREF 0 PUSH CONST DEF PUSH GREF list* APPLY 3) PUSH FREF 1 PUSH FREF 2 PUSH LREF 1 PUSH GREF compile-recur SHIFT 4 APPLY 4) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST call/cc PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE 1 3 (FRAME (FRAME (FRAME (FREF 0 PUSH GREF tail? APPLY 1) TEST (CONST (SHIFT 1 APPLY 1) . #1=(PUSH FREF 1 PUSH FREF 2 PUSH LREF 0 PUSH GREF compile-recur APPLY 4)) CONST (APPLY 1) . #1#) PUSH CONST PUSH PUSH FRAME (FREF 0 PUSH GREF tail? APPLY 1) TEST (CONST t . #0=(PUSH CONST CONTI PUSH GREF list* APPLY 4)) CONST nil . #0#) PUSH EXPND 1 FRAME (FREF 0 PUSH GREF tail? APPLY 1) TEST (LREF 0 RET) FREF 0 PUSH LREF 0 PUSH CONST FRAME PUSH GREF list* SHIFT 3 APPLY 3) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST defmacro PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 5 PUSH CLOSE (2 -1) 1 (FREF 0 PUSH LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-defmacro SHIFT 4 APPLY 4) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST values PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE (0 -1) 3 (FREF 0 PUSH FREF 1 PUSH FREF 2 PUSH LREF 0 PUSH GREF compile-values SHIFT 4 APPLY 4) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST receive PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH LREF 4 PUSH LREF 5 PUSH CLOSE (2 -1) 3 (FREF 0 PUSH FREF 1 PUSH FREF 2 PUSH LREF 2 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-receive SHIFT 6 APPLY 6) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (LREF 2 PUSH GREF cdr APPLY 1) PUSH FRAME (LREF 2 PUSH GREF car APPLY 1) PUSH EXPND 2 FRAME (LREF 0 PUSH GREF direct-invoke? APPLY 1) TEST (LREF 7 PUSH LREF 6 PUSH LREF 5 PUSH LREF 1 PUSH FRAME (LREF 0 PUSH GREF cddr APPLY 1) PUSH FRAME (LREF 0 PUSH GREF cadr APPLY 1) PUSH GREF compile-apply-direct SHIFT 6 APPLY 6) LREF 7 PUSH LREF 6 PUSH LREF 5 PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-apply SHIFT 5 APPLY 5) LREF 3 PUSH LREF 0 PUSH CONST CONST PUSH GREF list* SHIFT 3 APPLY 3) DEF compile-recur HALT)
(CLOSE 1 0 (LREF 0 PUSH CONST UNDEF PUSH GREF list* SHIFT 2 APPLY 2) DEF compile-undef HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH CONST ^ PUSH GREF is SHIFT 2 APPLY 2) UNDEF RET) DEF direct-invoke? HALT)
(CLOSE 5 0 (FRAME (LREF 1 PUSH GREF len APPLY 1) PUSH EXPND 1 FRAME (FRAME (LREF 5 PUSH GREF tail? APPLY 1) TEST (FRAME (LREF 0 PUSH CONST APPLY PUSH LREF 0 PUSH CONST SHIFT PUSH GREF list APPLY 4) . #0=(PUSH LREF 4 PUSH LREF 3 PUSH LREF 1 PUSH GREF compile-recur APPLY 4)) FRAME (LREF 0 PUSH CONST APPLY PUSH GREF list APPLY 2) . #0#) PUSH EXPND 1 FRAME (LREF 0 PUSH LREF 5 PUSH LREF 4 PUSH LREF 3 PUSH GREF compile-apply-args APPLY 4) PUSH EXPND 1 FRAME (LREF 7 PUSH GREF tail? APPLY 1) TEST (LREF 0 RET) LREF 7 PUSH LREF 0 PUSH CONST FRAME PUSH GREF list* SHIFT 3 APPLY 3) DEF compile-apply HALT)
(CLOSE 4 0 (LREF 3 PUSH LREF 0 PUSH GREF nil PUSH EXPND 1 BOX 0 LREF 0 PUSH LREF 2 PUSH LREF 3 PUSH CLOSE 2 3 (LREF 0 TEST (FRAME (FRAME (LREF 1 PUSH CONST PUSH PUSH GREF list* APPLY 2) PUSH FREF 0 PUSH FREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF compile-recur APPLY 4) PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 2 UNBOX SHIFT 2 APPLY 2) LREF 1 RET) LSET 0 SHRNK 1 SHIFT 2 APPLY 2) DEF compile-apply-args HALT)
(CLOSE 6 0 (FRAME (LREF 0 PUSH GREF check-parameters APPLY 1) PUSH EXPND 1 FRAME (FRAME (LREF 4 PUSH GREF car APPLY 1) PUSH LREF 0 PUSH GREF append APPLY 2) PUSH EXPND 1 FRAME (FRAME (LREF 0 PUSH LREF 3 PUSH GREF find-setses APPLY 2) PUSH LREF 6 PUSH GREF set-union APPLY 2) PUSH FRAME (LREF 5 PUSH GREF cdr APPLY 1) PUSH FRAME (LREF 4 PUSH GREF len APPLY 1) PUSH EXPND 3 FRAME (CONST 0 PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 10 PUSH LREF 9 PUSH LREF 2 PUSH LREF 1 PUSH LREF 6 PUSH LREF 3 PUSH LREF 4 PUSH GREF compile-body APPLY 7) . #1=(PUSH LREF 9 PUSH LREF 8 PUSH LREF 7 PUSH GREF compile-apply-args SHIFT 4 APPLY 4)) FRAME (FRAME (FRAME (LREF 10 PUSH GREF tail? APPLY 1) TEST (LREF 10 . #0=(PUSH LREF 9 PUSH LREF 2 PUSH LREF 1 PUSH LREF 6 PUSH LREF 3 PUSH LREF 4 PUSH GREF compile-body APPLY 7)) FRAME (LREF 10 PUSH LREF 0 PUSH CONST SHRNK PUSH GREF list* APPLY 3) . #0#) PUSH LREF 0 PUSH CONST EXPND PUSH GREF list* APPLY 3) . #1#) DEF compile-apply-direct HALT)
(CLOSE 5 0 (FRAME (LREF 0 PUSH GREF check-parameters APPLY 1) PUSH EXPND 1 FRAME (LREF 0 PUSH LREF 1 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF len APPLY 1) . #0=(PUSH FRAME (LREF 0 PUSH LREF 2 PUSH GREF find-setses APPLY 2) PUSH FRAME (FRAME (LREF 0 PUSH CONST nil PUSH LREF 2 PUSH GREF find-frees APPLY 3) PUSH FRAME (FRAME (LREF 3 PUSH GREF cdr APPLY 1) PUSH FRAME (LREF 3 PUSH GREF car APPLY 1) PUSH GREF set-union APPLY 2) PUSH GREF set-intersect APPLY 2) PUSH EXPND 3 FRAME (LREF 8 PUSH FRAME (CONST (RET) PUSH LREF 7 PUSH LREF 1 PUSH LREF 0 PUSH LREF 5 PUSH LREF 3 PUSH LREF 3 PUSH GREF compile-body APPLY 7) PUSH FRAME (LREF 0 PUSH GREF len APPLY 1) PUSH LREF 2 PUSH CONST CLOSE PUSH GREF list* APPLY 5) PUSH LREF 6 PUSH LREF 0 PUSH GREF collect-free SHIFT 3 APPLY 3)) FRAME (CONST -1 PUSH FRAME (CONST 1 PUSH FRAME (LREF 0 PUSH GREF len APPLY 1) PUSH GREF - APPLY 2) PUSH GREF list APPLY 2) . #0#) DEF compile-lambda HALT)
(CLOSE 3 0 (LREF 0 TEST (FRAME (FRAME (LREF 2 PUSH CONST PUSH PUSH GREF list* APPLY 2) PUSH LREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF compile-refer APPLY 3) PUSH LREF 1 PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH GREF collect-free SHIFT 3 APPLY 3) LREF 2 RET) DEF collect-free HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF dotted->proper APPLY 1) PUSH EXPND 1 FRAME (LREF 1 PUSH CLOSE 1 0 (FRAME (LREF 0 PUSH GREF symbol? APPLY 1) PUSH GREF no SHIFT 1 APPLY 1) PUSH GREF member-if APPLY 2) TEST (FRAME (CONST "parameter must be symbol" PUSH GREF compile-error APPLY 1) . #0=(LREF 0 RET)) UNDEF . #0#) DEF check-parameters HALT)
(CLOSE 7 0 (FRAME (FRAME (LREF 3 PUSH LREF 5 PUSH GREF set-intersect APPLY 2) PUSH LREF 4 PUSH GREF set-union APPLY 2) PUSH FRAME (LREF 3 PUSH LREF 1 PUSH GREF cons APPLY 2) PUSH EXPND 2 LREF 4 TEST (FRAME (LREF 4 PUSH GREF nil PUSH EXPND 1 BOX 0 LREF 0 PUSH LREF 1 PUSH LREF 2 PUSH LREF 9 PUSH CLOSE 1 4 (LREF 0 TEST (FRAME (FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 3 UNBOX APPLY 1) PUSH FREF 1 PUSH FREF 2 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF compile-recur SHIFT 4 APPLY 4) FREF 0 RET) LSET 0 SHRNK 1 APPLY 1) . #0=(SHRNK 2 PUSH LREF 0 PUSH LREF 4 PUSH GREF make-boxes SHIFT 3 APPLY 3)) FRAME (LREF 8 PUSH GREF compile-undef APPLY 1) . #0#) DEF compile-body HALT)
(CLOSE 3 0 (CONST 0 PUSH LREF 1 PUSH GREF nil PUSH EXPND 1 BOX 0 LREF 0 PUSH LREF 1 PUSH LREF 3 PUSH CLOSE 2 3 (LREF 0 TEST (FRAME (FREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF member APPLY 2) TEST (FRAME (FRAME (CONST 1 PUSH LREF 1 PUSH GREF + APPLY 2) PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 2 UNBOX APPLY 2) PUSH LREF 1 PUSH CONST BOX PUSH GREF list* SHIFT 3 APPLY 3) FRAME (CONST 1 PUSH LREF 1 PUSH GREF + APPLY 2) PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 2 UNBOX SHIFT 2 APPLY 2) FREF 0 RET) LSET 0 SHRNK 1 SHIFT 2 APPLY 2) DEF make-boxes HALT)
(CLOSE 4 0 (FRAME (LREF 0 PUSH GREF len APPLY 1) PUSH EXPND 1 FRAME (CONST 0 PUSH LREF 0 PUSH GREF is APPLY 2) TEST (LREF 4 PUSH GREF compile-undef SHIFT 1 APPLY 1) FRAME (LREF 4 PUSH LREF 0 PUSH CONST VALS PUSH GREF list* APPLY 3) PUSH LREF 3 PUSH LREF 2 PUSH LREF 1 PUSH GREF compile-apply-args SHIFT 4 APPLY 4) DEF compile-values HALT)
(CLOSE 6 0 (FRAME (LREF 0 PUSH GREF check-parameters APPLY 1) PUSH EXPND 1 FRAME (FRAME (LREF 4 PUSH GREF car APPLY 1) PUSH LREF 0 PUSH GREF append APPLY 2) PUSH EXPND 1 FRAME (LREF 1 PUSH LREF 2 PUSH GREF is APPLY 2) TEST (FRAME (LREF 2 PUSH GREF len APPLY 1) . #0=(PUSH FRAME (FRAME (LREF 0 PUSH LREF 4 PUSH GREF find-setses APPLY 2) PUSH LREF 6 PUSH GREF set-union APPLY 2) PUSH FRAME (LREF 5 PUSH GREF cdr APPLY 1) PUSH EXPND 3 FRAME (FRAME (FRAME (LREF 10 PUSH FRAME (LREF 4 PUSH GREF len APPLY 1) PUSH CONST SHRNK PUSH GREF list* APPLY 3) PUSH LREF 9 PUSH LREF 1 PUSH LREF 0 PUSH LREF 7 PUSH LREF 3 PUSH LREF 3 PUSH GREF compile-body APPLY 7) PUSH LREF 2 PUSH CONST RECV PUSH GREF list* APPLY 3) PUSH LREF 9 PUSH LREF 8 PUSH LREF 6 PUSH GREF compile-recur SHIFT 4 APPLY 4)) FRAME (CONST -1 PUSH FRAME (CONST 1 PUSH FRAME (LREF 1 PUSH GREF len APPLY 1) PUSH GREF - APPLY 2) PUSH GREF list APPLY 2) . #0#) DEF compile-receive HALT)
(CLOSE 3 0 (FRAME (LREF 1 PUSH FRAME (LREF 2 PUSH GREF dotted->proper APPLY 1) PUSH GREF set-union APPLY 2) PUSH EXPND 1 LREF 1 PUSH CONST nil PUSH GREF nil PUSH EXPND 1 BOX 0 LREF 0 PUSH LREF 1 PUSH CLOSE 2 2 (LREF 1 TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH FRAME (FRAME (FREF 0 PUSH FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH GREF find-free APPLY 2) PUSH LREF 0 PUSH GREF set-union APPLY 2) PUSH FREF 1 UNBOX SHIFT 2 APPLY 2) LREF 0 RET) LSET 0 SHRNK 1 SHIFT 2 APPLY 2) DEF find-frees HALT)
(CLOSE 2 0 (FRAME (LREF 0 PUSH GREF symbol? APPLY 1) TEST (FRAME (LREF 1 PUSH LREF 0 PUSH GREF member APPLY 2) TEST (CONST nil . #2=(RET)) LREF 0 PUSH GREF list SHIFT 1 APPLY 1) FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (LREF 0 PUSH EXPND 1 FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (CONST ^ PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (1 -1) 1 (LREF 0 PUSH FREF 0 PUSH LREF 1 PUSH GREF find-frees SHIFT 3 APPLY 3) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST quote PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH CLOSE 1 0 (CONST nil . #2#) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST if PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (CONST nil PUSH FREF 0 PUSH LREF 0 PUSH GREF find-frees SHIFT 3 APPLY 3) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST set! PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE 2 1 (FRAME (FREF 0 PUSH LREF 1 PUSH GREF find-free APPLY 2) PUSH FRAME (FREF 0 PUSH LREF 0 PUSH GREF member APPLY 2) TEST (CONST nil . #1=(PUSH GREF set-union SHIFT 2 APPLY 2)) FRAME (LREF 0 PUSH GREF list APPLY 1) . #1#) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST def PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE 2 1 (FRAME (FREF 0 PUSH LREF 1 PUSH GREF find-free APPLY 2) PUSH FRAME (FREF 0 PUSH LREF 0 PUSH GREF member APPLY 2) TEST (CONST nil . #0=(PUSH GREF set-union SHIFT 2 APPLY 2)) FRAME (LREF 0 PUSH GREF list APPLY 1) . #0#) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST call/cc PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (CONST nil PUSH FREF 0 PUSH LREF 0 PUSH GREF find-frees SHIFT 3 APPLY 3) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST defmacro PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (2 -1) 1 (LREF 1 PUSH FREF 0 PUSH LREF 2 PUSH GREF find-frees SHIFT 3 APPLY 3) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST values PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (CONST nil PUSH FREF 0 PUSH LREF 0 PUSH GREF find-frees SHIFT 3 APPLY 3) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST receive PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (2 -1) 1 (FRAME (LREF 0 PUSH FREF 0 PUSH LREF 2 PUSH GREF find-frees APPLY 3) PUSH FRAME (FREF 0 PUSH LREF 1 PUSH GREF find-free APPLY 2) PUSH GREF set-union SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) CONST nil PUSH LREF 3 PUSH LREF 2 PUSH GREF find-frees SHIFT 3 APPLY 3) CONST nil . #2#) DEF find-free HALT)
(CLOSE 2 0 (LREF 0 PUSH CONST nil PUSH GREF nil PUSH EXPND 1 BOX 0 LREF 0 PUSH LREF 2 PUSH CLOSE 2 2 (LREF 1 TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH FRAME (FRAME (FREF 0 PUSH FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH GREF find-sets APPLY 2) PUSH LREF 0 PUSH GREF set-union APPLY 2) PUSH FREF 1 UNBOX SHIFT 2 APPLY 2) LREF 0 RET) LSET 0 SHRNK 1 SHIFT 2 APPLY 2) DEF find-setses HALT)
(CLOSE 2 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (LREF 0 PUSH EXPND 1 FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (CONST set! PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE 2 1 (FRAME (FREF 0 PUSH LREF 1 PUSH GREF find-sets APPLY 2) PUSH FRAME (FREF 0 PUSH LREF 0 PUSH GREF member APPLY 2) TEST (FRAME (LREF 0 PUSH GREF list APPLY 1) . #1=(PUSH GREF set-union SHIFT 2 APPLY 2)) CONST nil . #1#) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST def PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE 2 1 (FREF 0 PUSH LREF 1 PUSH GREF find-sets SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST ^ PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (1 -1) 1 (FRAME (FRAME (LREF 0 PUSH GREF dotted->proper APPLY 1) PUSH FREF 0 PUSH GREF set-minus APPLY 2) PUSH LREF 1 PUSH GREF find-setses SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST quote PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH CLOSE (0 -1) 0 (CONST nil . #0=(RET)) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST if PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (FREF 0 PUSH LREF 0 PUSH GREF find-setses SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST call/cc PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (FREF 0 PUSH LREF 0 PUSH GREF find-setses SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST defmacro PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (2 -1) 1 (FRAME (FRAME (LREF 1 PUSH GREF dotted->proper APPLY 1) PUSH FREF 0 PUSH GREF set-minus APPLY 2) PUSH LREF 2 PUSH GREF find-setses SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST values PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (FREF 0 PUSH LREF 0 PUSH GREF find-setses SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST receive PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (2 -1) 1 (FRAME (FRAME (FRAME (LREF 0 PUSH GREF dotted->proper APPLY 1) PUSH FREF 0 PUSH GREF set-minus APPLY 2) PUSH LREF 2 PUSH GREF find-setses APPLY 2) PUSH FRAME (FREF 0 PUSH LREF 1 PUSH GREF find-sets APPLY 2) PUSH GREF set-union SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) LREF 3 PUSH LREF 2 PUSH GREF find-setses SHIFT 2 APPLY 2) CONST nil . #0#) DEF find-sets HALT)
(CLOSE 3 0 (LREF 0 PUSH LREF 2 PUSH CLOSE 0 2 (FREF 0 PUSH FREF 1 PUSH CONST GREF PUSH GREF list* SHIFT 3 APPLY 3) PUSH LREF 2 PUSH CLOSE 1 1 (FREF 0 PUSH LREF 0 PUSH CONST FREF PUSH GREF list* SHIFT 3 APPLY 3) PUSH LREF 2 PUSH CLOSE 1 1 (FREF 0 PUSH LREF 0 PUSH CONST LREF PUSH GREF list* SHIFT 3 APPLY 3) PUSH LREF 1 PUSH LREF 0 PUSH GREF compile-lookup SHIFT 5 APPLY 5) DEF compile-refer HALT)
(CLOSE 2 0 (CONST 0 PUSH LREF 1 PUSH GREF nil PUSH EXPND 1 BOX 0 LREF 0 PUSH LREF 1 PUSH CLOSE 2 2 (LREF 0 TEST (FRAME (FREF 0 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF is APPLY 2) TEST (LREF 1 . #0=(RET)) FRAME (CONST 1 PUSH LREF 1 PUSH GREF + APPLY 2) PUSH FRAME (LREF 0 PUSH GREF cdr APPLY 1) PUSH FREF 1 UNBOX SHIFT 2 APPLY 2) GREF nil . #0#) LSET 0 SHRNK 1 SHIFT 2 APPLY 2) DEF find-index HALT)
(CLOSE 5 0 (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH FRAME (LREF 1 PUSH GREF car APPLY 1) PUSH EXPND 2 FRAME (LREF 0 PUSH LREF 2 PUSH GREF find-index APPLY 2) PUSH EXPND 1 LREF 0 TEST (LREF 0 PUSH LREF 5 SHIFT 1 APPLY 1) FRAME (LREF 2 PUSH LREF 3 PUSH GREF find-index APPLY 2) PUSH EXPND 1 LREF 0 TEST (LREF 0 PUSH LREF 7 SHIFT 1 APPLY 1) LREF 8 SHIFT 0 APPLY 0) DEF compile-lookup HALT)
(CLOSE 1 0 (CONST RET PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF is SHIFT 2 APPLY 2) DEF tail? HALT)
(CLOSE 4 0 (FRAME (LREF 1 PUSH GREF check-parameters APPLY 1) PUSH EXPND 1 FRAME (CONST (RET) PUSH CONST nil PUSH CONST nil PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH LREF 3 PUSH LREF 0 PUSH LREF 0 PUSH GREF compile-body APPLY 7) PUSH FRAME (LREF 0 PUSH LREF 2 PUSH GREF is APPLY 2) TEST (FRAME (LREF 2 PUSH GREF len APPLY 1) . #0=(PUSH EXPND 2 LREF 6 PUSH LREF 1 PUSH LREF 0 PUSH LREF 3 PUSH CONST MACRO PUSH GREF list* SHIFT 5 APPLY 5)) FRAME (CONST -1 PUSH FRAME (CONST 1 PUSH FRAME (LREF 0 PUSH GREF len APPLY 1) PUSH GREF - APPLY 2) PUSH GREF list APPLY 2) . #0#) DEF compile-defmacro HALT)
(CLOSE 2 0 (FRAME (LREF 0 PUSH GREF pair? APPLY 1) TEST (FRAME (LREF 1 PUSH FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH GREF member APPLY 2) TEST (LREF 1 PUSH LREF 0 PUSH GREF macroexpand-all-sub SHIFT 2 APPLY 2) FRAME (LREF 0 PUSH GREF macroexpand-1 APPLY 1) PUSH EXPND 1 FRAME (LREF 1 PUSH LREF 0 PUSH GREF iso APPLY 2) TEST (LREF 2 PUSH LREF 1 PUSH GREF macroexpand-all-sub SHIFT 2 APPLY 2) LREF 2 PUSH LREF 0 PUSH GREF macroexpand-all SHIFT 2 APPLY 2) LREF 0 RET) DEF macroexpand-all HALT)
(CLOSE 2 0 (LREF 0 PUSH LREF 1 PUSH CLOSE 1 1 (FREF 0 PUSH LREF 0 PUSH GREF macroexpand-all SHIFT 2 APPLY 2) PUSH GREF map SHIFT 2 APPLY 2) DEF map-macroexpand-all HALT)
(CLOSE 2 0 (LREF 0 PUSH EXPND 1 FRAME (LREF 0 PUSH GREF car APPLY 1) PUSH EXPND 1 FRAME (CONST quote PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH CLOSE 1 0 (FRAME (CONST nil PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (quote) PUSH GREF append SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST ^ PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (1 -1) 1 (FRAME (FREF 0 PUSH FRAME (LREF 0 PUSH GREF dotted->proper APPLY 1) PUSH GREF append APPLY 2) PUSH EXPND 1 FRAME (FRAME (CONST nil PUSH FRAME (LREF 0 PUSH LREF 2 PUSH GREF map-macroexpand-all APPLY 2) PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (^) PUSH GREF append SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST if PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (FRAME (CONST nil PUSH FRAME (FREF 0 PUSH LREF 0 PUSH GREF map-macroexpand-all APPLY 2) PUSH GREF append APPLY 2) PUSH CONST (if) PUSH GREF append SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST set! PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE 2 1 (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FREF 0 PUSH LREF 1 PUSH GREF macroexpand-all APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (set!) PUSH GREF append SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST def PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE 2 1 (FRAME (FRAME (CONST nil PUSH FRAME (FRAME (FREF 0 PUSH LREF 1 PUSH GREF macroexpand-all APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 0 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (def) PUSH GREF append SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST call/cc PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE 1 1 (FRAME (CONST nil PUSH FRAME (FRAME (FREF 0 PUSH LREF 0 PUSH GREF macroexpand-all APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (call/cc) PUSH GREF append SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST defmacro PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (2 -1) 1 (FRAME (FREF 0 PUSH FRAME (LREF 1 PUSH GREF dotted->proper APPLY 1) PUSH GREF append APPLY 2) PUSH EXPND 1 FRAME (FRAME (FRAME (CONST nil PUSH FRAME (LREF 0 PUSH LREF 3 PUSH GREF map-macroexpand-all APPLY 2) PUSH GREF append APPLY 2) PUSH FRAME (LREF 2 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (defmacro) PUSH GREF append SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST values PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (0 -1) 1 (FRAME (CONST nil PUSH FRAME (FREF 0 PUSH LREF 0 PUSH GREF map-macroexpand-all APPLY 2) PUSH GREF append APPLY 2) PUSH CONST (values) PUSH GREF append SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) FRAME (CONST receive PUSH LREF 0 PUSH GREF is APPLY 2) TEST (FRAME (LREF 1 PUSH GREF cdr APPLY 1) PUSH LREF 3 PUSH CLOSE (2 -1) 1 (FRAME (FREF 0 PUSH FRAME (LREF 0 PUSH GREF dotted->proper APPLY 1) PUSH GREF append APPLY 2) PUSH EXPND 1 FRAME (FRAME (FRAME (CONST nil PUSH FRAME (LREF 0 PUSH LREF 3 PUSH GREF map-macroexpand-all APPLY 2) PUSH GREF append APPLY 2) PUSH FRAME (FRAME (FREF 0 PUSH LREF 2 PUSH GREF macroexpand-all APPLY 2) PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH FRAME (LREF 1 PUSH GREF list APPLY 1) PUSH GREF append APPLY 2) PUSH CONST (receive) PUSH GREF append SHIFT 2 APPLY 2) PUSH GREF apply SHIFT 2 APPLY 2) LREF 3 PUSH LREF 2 PUSH GREF map-macroexpand-all SHIFT 2 APPLY 2) DEF macroexpand-all-sub HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF macroexpand-1 APPLY 1) PUSH EXPND 1 FRAME (LREF 1 PUSH LREF 0 PUSH GREF iso APPLY 2) TEST (LREF 1 RET) LREF 0 PUSH GREF macroexpand SHIFT 1 APPLY 1) DEF macroexpand HALT)
(CLOSE 1 0 (FRAME (LREF 0 PUSH GREF compile APPLY 1) PUSH GREF run-binary SHIFT 1 APPLY 1) DEF eval HALT)
