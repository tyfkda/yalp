(FRAME (GSET *macro-table* (HALT)) (GREF make-hash-table (APPLY 0)))
(CLOSE (2 2) 0 (LREF 1 (PUSH (LREF 0 (PUSH (GREF *macro-table* (PUSH (GREF hash-table-put! (SHIFT 3 (APPLY 3))))))))) (GSET register-macro (HALT)))
(CLOSE (1 1) 0 (LREF 0 (PUSH (GREF *macro-table* (PUSH (GREF hash-table-exists? (SHIFT 2 (APPLY 2))))))) (GSET macro? (HALT)))
(CLOSE (1 1) 0 (LREF 0 (TEST (GREF nil #0=(RET)) (GREF t #0#))) (GSET null (HALT)))
(CLOSE (1 1) 0 (LREF 0 (TEST (GREF nil #0=(RET)) (GREF t #0#))) (GSET no (HALT)))
(CLOSE (2 2) 0 (LREF 1 (TEST (FRAME (PUSH (FRAME (PUSH (GREF cons (SHIFT 2 (APPLY 2)))) (FRAME (PUSH (LREF 0 (APPLY 1))) (LREF 1 (PUSH (GREF car (APPLY 1))))))) (FRAME (PUSH (LREF 0 (PUSH (GREF map (APPLY 2))))) (LREF 1 (PUSH (GREF cdr (APPLY 1)))))) (CONST () (RET)))) (GSET map (HALT)))
(CLOSE (1 1) 0 (FRAME (TEST (GREF nil (RET)) (FRAME (TEST (FRAME (PUSH (GREF list (SHIFT 1 (APPLY 1)))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (FRAME (PUSH (FRAME (PUSH (GREF cons (SHIFT 2 (APPLY 2)))) (FRAME (PUSH (FRAME (PUSH (GREF list (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (LREF 0 (PUSH (GREF cadr (APPLY 1))))))) (FRAME (PUSH (GREF pair (APPLY 1))) (LREF 0 (PUSH (GREF cddr (APPLY 1))))))) (FRAME (PUSH (GREF no (APPLY 1))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (GSET pair (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (GREF car (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (GSET cadr (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (GREF cdr (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (GSET cddr (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (GREF car (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF cadr (APPLY 1))))) (GSET caadr (HALT)))
(MACRO quasiquote (1 1) (GREF nil (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (BOX 0 (LREF 0 (PUSH (CLOSE (1 1) 1 (FRAME (TEST (FRAME (PUSH (CONST quote (PUSH (GREF list (SHIFT 2 (APPLY 2)))))) (LREF 0 (PUSH (GREF list (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (CONST list (PUSH (GREF list (SHIFT 2 (APPLY 2)))))) (LREF 0 (PUSH (GREF cadr (APPLY 1))))) (FRAME (TEST (LREF 0 (PUSH (GREF cadr (SHIFT 1 (APPLY 1))))) (FRAME (PUSH (CONST list (PUSH (GREF list (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (CONST append (PUSH (GREF cons (APPLY 2))))) (LREF 0 (PUSH (FREF 0 (UNBOX (PUSH (GREF map (APPLY 2)))))))))) (CONST unquote-splicing (PUSH (FRAME (PUSH (GREF is (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (CONST unquote (PUSH (FRAME (PUSH (GREF is (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (FRAME (PUSH (GREF no (APPLY 1))) (LREF 0 (PUSH (GREF consp (APPLY 1)))))) (LSET 0 (FRAME (PUSH (CLOSE (1 1) 0 (FRAME (TEST (LREF 0 (PUSH (GREF cadr (SHIFT 1 (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (CONST quote (PUSH (GREF list (SHIFT 2 (APPLY 2)))))) (LREF 0 (PUSH (GREF caadr (APPLY 1))))) (CONST "unexpected" (PUSH (GREF error (SHIFT 1 (APPLY 1)))))) (CONST quote (PUSH (FRAME (PUSH (GREF is (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (CONST list (PUSH (FRAME (PUSH (GREF is (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1)))))))) (SHIFT 1 (APPLY 1)))) (FREF 0 (PUSH (LREF 0 (UNBOX (APPLY 1))))))))))) (SHIFT 1 (APPLY 1))))))) (HALT))
(MACRO def (2 2) (FRAME (PUSH (FRAME (PUSH (CONST (set!) (PUSH (GREF append (SHIFT 3 (APPLY 3)))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (LREF 1 (PUSH (GREF list (APPLY 1))))) (HALT))
(MACRO defn (2 -1) (FRAME (PUSH (FRAME (PUSH (CONST (set!) (PUSH (GREF append (SHIFT 3 (APPLY 3)))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 2 (PUSH (FRAME (PUSH (CONST (^) (PUSH (GREF append (APPLY 3))))) (LREF 1 (PUSH (GREF list (APPLY 1))))))))) (HALT))
(MACRO with (1 -1) (FRAME (PUSH (FRAME (PUSH (GREF append (SHIFT 2 (APPLY 2)))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 1 (PUSH (FRAME (PUSH (CONST (^) (PUSH (GREF append (APPLY 3))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (GREF car (PUSH (GREF map (APPLY 2))))) (LREF 0 (PUSH (GREF pair (APPLY 1)))))))))))) (FRAME (PUSH (GREF cadr (PUSH (GREF map (APPLY 2))))) (LREF 0 (PUSH (GREF pair (APPLY 1)))))) (HALT))
(MACRO let (2 -1) (FRAME (PUSH (FRAME (PUSH (GREF append (SHIFT 2 (APPLY 2)))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 2 (PUSH (FRAME (PUSH (CONST (^) (PUSH (GREF append (APPLY 3))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (GREF append (APPLY 1))) (LREF 0 (PUSH (GREF list (APPLY 1)))))))))))) (LREF 1 (PUSH (GREF list (APPLY 1))))) (HALT))
(MACRO do (0 -1) (FRAME (PUSH (GREF append (SHIFT 1 (APPLY 1)))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 0 (PUSH (CONST (()) (PUSH (CONST (^) (PUSH (GREF append (APPLY 3)))))))))) (HALT))
(MACRO when (1 -1) (FRAME (PUSH (FRAME (PUSH (CONST (if) (PUSH (GREF append (SHIFT 3 (APPLY 3)))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 1 (PUSH (CONST (do) (PUSH (GREF append (APPLY 2)))))))) (HALT))
(MACRO unless (1 -1) (FRAME (PUSH (FRAME (PUSH (CONST (if) (PUSH (GREF append (SHIFT 3 (APPLY 3)))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (not) (PUSH (GREF append (APPLY 2))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 1 (PUSH (CONST (do) (PUSH (GREF append (APPLY 2)))))))) (HALT))
(MACRO aif (1 -1) (FRAME (PUSH (FRAME (PUSH (CONST (it) (PUSH (CONST (let) (PUSH (GREF append (SHIFT 4 (APPLY 4)))))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (TEST (FRAME #0=(PUSH (CONST (it) (PUSH (CONST (if) (PUSH (GREF append (APPLY 3))))))) (FRAME (PUSH (FRAME (PUSH (GREF append (APPLY 2))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 1 (PUSH (GREF car (APPLY 1))))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (aif) (PUSH (GREF append (APPLY 2))))) (LREF 1 (PUSH (GREF cdr (APPLY 1)))))))) (LREF 1 #0#)) (LREF 1 (PUSH (GREF cddr (APPLY 1))))))) (HALT))
(MACRO w/uniq (1 -1) (FRAME (TEST (LREF 1 (PUSH (FRAME (PUSH (CONST (with) (PUSH (GREF append (SHIFT 3 (APPLY 3)))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST () (PUSH (GREF + (PUSH (GREF apply (APPLY 3))))))) (LREF 0 (PUSH (CLOSE (1 1) 0 (CONST (uniq) (PUSH (LREF 0 (PUSH (GREF list (SHIFT 2 (APPLY 2))))))) (PUSH (GREF map (APPLY 2))))))))))) (LREF 1 (PUSH (FRAME (PUSH (FRAME (PUSH (CONST (let) (PUSH (GREF append (SHIFT 4 (APPLY 4)))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (GREF list (APPLY 1))) (CONST (uniq) (PUSH (GREF append (APPLY 1))))))))) (LREF 0 (PUSH (GREF consp (APPLY 1))))) (HALT))
(MACRO and (0 -1) (LREF 0 (TEST (FRAME (TEST (FRAME (PUSH (FRAME (PUSH (CONST (if) (PUSH (GREF append (SHIFT 3 (APPLY 3)))))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 0 (PUSH (GREF car (APPLY 1))))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (and) (PUSH (GREF append (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))) (LREF 0 (PUSH (GREF car (SHIFT 1 (APPLY 1)))))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (CONST t (RET)))) (HALT))
(MACRO or (0 -1) (LREF 0 (TEST (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (FRAME (PUSH (FRAME (PUSH (FRAME (PUSH (CONST (let) (PUSH (GREF append (SHIFT 4 (APPLY 4)))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (GREF list (APPLY 1))) (FREF 0 (PUSH (GREF car (APPLY 1))))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (FRAME (PUSH (FRAME (PUSH (CONST (if) (PUSH (GREF append (APPLY 4))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (or) (PUSH (GREF append (APPLY 2))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))))))) (SHIFT 1 (APPLY 1)))))) (GREF uniq (APPLY 0))) (UNDEF (RET)))) (HALT))
(MACRO afn (1 -1) (FRAME (PUSH (CONST (()) (PUSH (CONST (self) (PUSH (CONST (let) (PUSH (GREF append (SHIFT 4 (APPLY 4)))))))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (self) (PUSH (CONST (set!) (PUSH (GREF append (APPLY 3))))))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 1 (PUSH (FRAME (PUSH (CONST (^) (PUSH (GREF append (APPLY 3))))) (LREF 0 (PUSH (GREF list (APPLY 1))))))))))) (HALT))
(MACRO caselet (2 -1) (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (CLOSE (1 1) 3 (FRAME (PUSH (FRAME (PUSH (FRAME (PUSH (CONST (let) (PUSH (GREF append (SHIFT 4 (APPLY 4)))))) (FREF 2 (PUSH (GREF list (APPLY 1)))))) (FREF 1 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (GREF list (APPLY 1))) (FREF 0 (PUSH (LREF 0 (APPLY 1)))))) (SHIFT 1 (APPLY 1)))))))))) (CONST () (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (BOX 0 (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 2 (FRAME (TEST (CONST () (RET)) (FRAME (TEST (LREF 0 (PUSH (GREF car (SHIFT 1 (APPLY 1))))) (FRAME (PUSH (FRAME (PUSH (FRAME (PUSH (CONST (if) (PUSH (GREF append (SHIFT 4 (APPLY 4)))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (FRAME (PUSH (CONST (is) (PUSH (GREF append (APPLY 3))))) (FREF 1 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (quote) (PUSH (GREF append (APPLY 2))))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 0 (PUSH (GREF cadr (APPLY 1))))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (FREF 0 (UNBOX (APPLY 1)))) (LREF 0 (PUSH (GREF cddr (APPLY 1)))))))) (FRAME (PUSH (GREF no (APPLY 1))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))) (APPLY 1))))))) (HALT))
(MACRO case (1 -1) (LREF 1 (PUSH (FRAME (PUSH (FRAME (PUSH (CONST (caselet) (PUSH (GREF append (SHIFT 4 (APPLY 4)))))) (FRAME (PUSH (GREF list (APPLY 1))) (GREF uniq (APPLY 0))))) (LREF 0 (PUSH (GREF list (APPLY 1))))))) (HALT))
(CLOSE (2 2) 0 (FRAME (PUSH (GREF no (SHIFT 1 (APPLY 1)))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (GSET isnt (HALT)))
(CLOSE (1 1) 0 (CONST 0 (PUSH (LREF 0 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (CLOSE (1 1) 0 (BOX 0 (LREF 0 (PUSH (CLOSE (2 2) 1 (FRAME (TEST (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (CONST 1 (PUSH (LREF 1 (PUSH (GREF + (APPLY 2))))))) (LREF 1 (RET))) (LREF 0 (PUSH (GREF consp (APPLY 1))))) (LSET 0 (RET)))))) (APPLY 1))))))))) (GSET len (HALT)))
(CLOSE (1 1) 0 (FRAME (TEST (FRAME (PUSH (GREF last-pair (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (LREF 0 (RET))) (FRAME (PUSH (GREF consp (APPLY 1))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (GSET last-pair (HALT)))
(CLOSE (1 1) 0 (FRAME (TEST (CONST () (PUSH (LREF 0 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (CLOSE (1 1) 0 (BOX 0 (LREF 0 (PUSH (CLOSE (2 2) 1 (FRAME (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 3 (FRAME (FRAME (TEST (FREF 1 (PUSH (LREF 0 (PUSH (FREF 2 (UNBOX (SHIFT 2 (APPLY 2)))))))) (FREF 1 (RET))) (LREF 0 (PUSH (GREF consp (APPLY 1))))) (FREF 0 (PUSH (FREF 1 (PUSH (GREF rplacd (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (LSET 0 (RET)))))) (APPLY 1))))))))) (LREF 0 (RET))) (LREF 0 (PUSH (GREF consp (APPLY 1))))) (GSET reverse! (HALT)))
(MACRO record (2 -1) (FRAME (PUSH (FRAME (PUSH (CONST (apply) (PUSH (GREF append (SHIFT 3 (APPLY 3)))))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 2 (PUSH (FRAME (PUSH (CONST (^) (PUSH (GREF append (APPLY 3))))) (LREF 1 (PUSH (GREF list (APPLY 1)))))))))) (LREF 0 (PUSH (GREF list (APPLY 1))))) (HALT))
(MACRO record-case (1 -1) (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 2 (FRAME (PUSH (FRAME (PUSH (FRAME (PUSH (CONST (let) (PUSH (GREF append (SHIFT 4 (APPLY 4)))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FREF 1 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (FRAME (PUSH (CONST (case) (PUSH (GREF append (APPLY 3))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (car) (PUSH (GREF append (APPLY 2))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))))) (FREF 0 (PUSH (FRAME (APPLY 1) (CONST () (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (BOX 0 (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 2 (LREF 0 (TEST (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (0 0) 3 (FRAME (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (CLOSE (1 1) 3 (FRAME (PUSH (FRAME (PUSH (FRAME (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (3 3) 4 (FRAME (TEST (FREF 0 (PUSH (GREF cdr (SHIFT 1 (APPLY 1))))) (FRAME (PUSH (FRAME (PUSH (FRAME (PUSH (GREF append (SHIFT 3 (APPLY 3)))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (GREF list (APPLY 1))) (LREF 2 (PUSH (FRAME (PUSH (FRAME (PUSH (CONST (record) (PUSH (GREF append (APPLY 4))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (cdr) (PUSH (GREF append (APPLY 2))))) (FREF 3 (PUSH (GREF list (APPLY 1)))))))) (LREF 1 (PUSH (GREF list (APPLY 1)))))))))) (FRAME (PUSH (FREF 2 (UNBOX (APPLY 1)))) (FREF 1 (PUSH (GREF cdr (APPLY 1))))))) (CONST else (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 3 (APPLY 3)))))))))))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (LREF 0 (PUSH (GREF cadr (APPLY 1)))))) (LREF 0 (PUSH (GREF cddr (APPLY 1))))) (SHIFT 1 (APPLY 1)))))))))) (FREF 0 (PUSH (GREF car (APPLY 1))))) (SHIFT 0 (APPLY 0))))))))) (UNDEF (RET)))) (LSET 0 (RET)))))))) (APPLY 1)))))))))))) (SHIFT 1 (APPLY 1)))))))) (GREF uniq (APPLY 0))) (HALT))
(CLOSE (1 1) 0 (FRAME (TEST (FRAME #0=(TEST (LREF 0 (RET)) (CONST () (PUSH (LREF 0 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (CLOSE (1 1) 0 (BOX 0 (LREF 0 (PUSH (CLOSE (2 2) 1 (FRAME (TEST (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF cons (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1)))))))) (FRAME (PUSH (GREF reverse! (SHIFT 1 (APPLY 1)))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF cons (APPLY 2)))))))) (LREF 0 (PUSH (GREF consp (APPLY 1))))) (LSET 0 (RET)))))) (APPLY 1)))))))))) (FRAME (PUSH (GREF no (APPLY 1))) (FRAME (PUSH (GREF cdr (APPLY 1))) (LREF 0 (PUSH (GREF last-pair (APPLY 1))))))) (UNDEF #0#)) (LREF 0 (PUSH (GREF consp (APPLY 1))))) (GSET dotted->proper (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (GREF nil #0=(RET)) (FRAME (TEST (GREF t #0#) (FRAME (PUSH (LREF 0 (PUSH (GREF set-member? (SHIFT 2 (APPLY 2)))))) (LREF 1 (PUSH (GREF cdr (APPLY 1)))))) (FRAME (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))) (LREF 1 (PUSH (GREF car (APPLY 1))))))) (LREF 1 (PUSH (GREF no (APPLY 1))))) (GSET set-member? (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (LREF 1 (RET)) (LREF 1 (PUSH (LREF 0 (PUSH (GREF cons (SHIFT 2 (APPLY 2)))))))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF set-member? (APPLY 2))))))) (GSET set-cons (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (LREF 1 (RET)) (FRAME (PUSH (FRAME (PUSH (GREF set-union (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-cons (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (GSET set-union (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (CONST () (RET)) (FRAME (TEST (LREF 1 (PUSH (FRAME (PUSH (GREF set-minus (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))) (FRAME (PUSH (FRAME (PUSH (GREF cons (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-minus (APPLY 2))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-member? (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (GSET set-minus (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (CONST () (RET)) (FRAME (TEST (FRAME (PUSH (FRAME (PUSH (GREF cons (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-intersect (APPLY 2))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-intersect (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-member? (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (GSET set-intersect (HALT)))
(CLOSE (1 1) 0 (CONST (HALT) (PUSH (CONST () (PUSH (CONST (()) (PUSH (LREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4))))))))))) (GSET compile (HALT)))
(CLOSE (4 4) 0 (FRAME (TEST (FRAME (TEST (FRAME #0=(PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF compile-refer (SHIFT 3 (APPLY 3)))))))) (LREF 3 (PUSH (CONST UNBOX (PUSH (GREF list (APPLY 2))))))) (LREF 3 #0#)) (LREF 2 (PUSH (LREF 0 (PUSH (GREF set-member? (APPLY 2))))))) (FRAME (TEST (LREF 0 (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (CLOSE (1 1) 4 (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 5 (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (CONST CONST (PUSH (GREF list (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (1 -1) 3 (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF compile-lambda (SHIFT 5 (APPLY 5))))))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (2 -1) 3 (FRAME (TEST (FRAME #1=(PUSH (FRAME (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 3 (FRAME (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))))))))) (LREF 1 (PUSH (LREF 0 (PUSH (CONST TEST (PUSH (GREF list (APPLY 3))))))))) (SHIFT 2 (APPLY 2)))))))))) (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 1 (PUSH (GREF compile-recur (APPLY 4)))))))))))) (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (GREF compile-undef (APPLY 3))))))))) (FRAME (TEST (FRAME #1# (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FRAME (PUSH (GREF compile-recur (APPLY 4))) (LREF 2 (PUSH (GREF car (APPLY 1)))))))))))) (FRAME #1# (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FRAME (PUSH (GREF compile-recur (APPLY 4))) (LREF 2 (PUSH (CONST (if) (PUSH (GREF append (APPLY 2))))))))))))))) (FRAME (PUSH (GREF no (APPLY 1))) (LREF 2 (PUSH (GREF cdr (APPLY 1))))))) (LREF 2 (PUSH (GREF no (APPLY 1))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (2 2) 3 (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 4 (FRAME (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (FREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))))))))) (FREF 1 (PUSH (LREF 0 (PUSH (CONST GSET (PUSH (GREF list (APPLY 3))))))))) (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 4 (FRAME (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (FREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))))))))) (FREF 1 (PUSH (LREF 0 (PUSH (CONST FSET (PUSH (GREF list (APPLY 3))))))))) (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 4 (FRAME (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (FREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))))))))) (FREF 1 (PUSH (LREF 0 (PUSH (CONST LSET (PUSH (GREF list (APPLY 3))))))))) (PUSH (FREF 2 (PUSH (LREF 0 (PUSH (GREF compile-lookup (SHIFT 5 (APPLY 5))))))))))))))))))))))))))))))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (1 1) 3 (FRAME (PUSH (FREF 0 (PUSH (CLOSE (1 1) 1 (FRAME (TEST (LREF 0 (RET)) (LREF 0 (PUSH (FREF 0 (PUSH (CONST FRAME (PUSH (GREF list (SHIFT 3 (APPLY 3)))))))))) (FREF 0 (PUSH (GREF tail? (APPLY 1))))) (SHIFT 1 (APPLY 1)))))) (FRAME (PUSH (CONST CONTI (PUSH (GREF list (APPLY 2))))) (FRAME (PUSH (CONST PUSH (PUSH (GREF list (APPLY 2))))) (FRAME (TEST (FRAME #2=(PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 0 (PUSH (GREF compile-recur (APPLY 4))))))))) (CONST (APPLY 1) (PUSH (CONST 1 (PUSH (CONST SHIFT (PUSH (GREF list (APPLY 3))))))))) (CONST (APPLY 1) #2#)) (FREF 0 (PUSH (GREF tail? (APPLY 1)))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (2 -1) 1 (FREF 0 (PUSH (LREF 2 (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF compile-defmacro (SHIFT 4 (APPLY 4))))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (PUSH (FRAME (PUSH (FREF 4 (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (2 2) 4 (FRAME (TEST (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (GREF compile-apply-macro (SHIFT 4 (APPLY 4))))))))))) (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF compile-apply (SHIFT 5 (APPLY 5)))))))))))))) (LREF 0 (PUSH (GREF macro? (APPLY 1))))) (SHIFT 2 (APPLY 2)))))))))))) (FREF 4 (PUSH (GREF car (APPLY 1)))))) (FREF 4 (PUSH (GREF cdr (APPLY 1)))))) (CONST defmacro (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST call/cc (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST set! (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST if (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST ^ (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST quote (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))))))) (LREF 0 (PUSH (GREF car (APPLY 1))))) (SHIFT 1 (APPLY 1))))))))))))) (LREF 3 (PUSH (LREF 0 (PUSH (CONST CONST (PUSH (GREF list (SHIFT 3 (APPLY 3)))))))))) (LREF 0 (PUSH (GREF consp (APPLY 1)))))) (LREF 0 (PUSH (GREF symbolp (APPLY 1))))) (GSET compile-recur (HALT)))
(CLOSE (3 3) 0 (LREF 2 (PUSH (CONST UNDEF (PUSH (GREF list (SHIFT 2 (APPLY 2))))))) (GSET compile-undef (HALT)))
(CLOSE (5 5) 0 (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (LREF 4 (PUSH (CLOSE (1 1) 5 (FRAME (PUSH (FREF 3 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (CLOSE (1 1) 3 (BOX 0 (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 4 (FRAME (TEST (FRAME (TEST (LREF 1 (RET)) (LREF 1 (PUSH (FREF 1 (PUSH (CONST FRAME (PUSH (GREF list (SHIFT 3 (APPLY 3)))))))))) (FREF 1 (PUSH (GREF tail? (APPLY 1))))) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (FRAME (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (FRAME (PUSH (GREF compile-recur (APPLY 4))) (LREF 0 (PUSH (GREF car (APPLY 1)))))))))) (LREF 1 (PUSH (CONST PUSH (PUSH (GREF list (APPLY 2))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))))))) (APPLY 1)))))))))))))) (FRAME (TEST (FRAME #0=(PUSH (FREF 1 (PUSH (FREF 2 (PUSH (FREF 4 (PUSH (GREF compile-recur (APPLY 4))))))))) (FRAME (PUSH (FRAME (PUSH (CONST (SHIFT) (PUSH (GREF append (APPLY 3))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))) (FRAME (PUSH (GREF list (APPLY 1))) (FRAME (PUSH (CONST (APPLY) (PUSH (GREF append (APPLY 2))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))))) (FRAME #0# (FRAME (PUSH (CONST (APPLY) (PUSH (GREF append (APPLY 2))))) (LREF 0 (PUSH (GREF list (APPLY 1))))))) (FREF 0 (PUSH (GREF tail? (APPLY 1)))))) (SHIFT 1 (APPLY 1)))))))))))))) (LREF 1 (PUSH (GREF len (APPLY 1))))) (GSET compile-apply (HALT)))
(CLOSE (5 5) 0 (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (LREF 4 (PUSH (CLOSE (1 1) 5 (FRAME (TEST (FRAME #0=(PUSH (FRAME (PUSH (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (3 3) 5 (FRAME (PUSH (FREF 3 (PUSH (LREF 0 (PUSH (GREF collect-free (SHIFT 3 (APPLY 3)))))))) (FREF 1 (PUSH (FRAME (PUSH (FRAME (PUSH (LREF 2 (PUSH (CONST CLOSE (PUSH (GREF list (APPLY 5))))))) (LREF 0 (PUSH (GREF len (APPLY 1)))))) (FRAME (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (GREF make-boxes (APPLY 3))))))) (FREF 2 (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (FREF 4 (PUSH (FREF 0 (PUSH (GREF compile-lambda-bodies (APPLY 5))))))))))))))))) (SHIFT 3 (APPLY 3)))))))))))))) (FRAME (PUSH (FRAME (PUSH (GREF set-intersect (APPLY 2))) (FRAME (PUSH (FRAME (PUSH (GREF set-union (APPLY 2))) (FREF 2 (PUSH (GREF car (APPLY 1)))))) (FREF 2 (PUSH (GREF cdr (APPLY 1))))))) (LREF 0 (PUSH (CONST () (PUSH (FREF 3 (PUSH (GREF find-frees (APPLY 3))))))))))) (FRAME (PUSH (FREF 3 (PUSH (GREF find-setses (APPLY 2))))) (LREF 0 (PUSH (GREF dotted->proper (APPLY 1))))))) (FRAME (PUSH (FRAME (PUSH (GREF list (APPLY 2))) (FREF 4 (PUSH (GREF len (APPLY 1)))))) (FREF 4 (PUSH (GREF len (APPLY 1)))))) (FRAME #0# (CONST -1 (PUSH (FRAME (PUSH (GREF list (APPLY 2))) (CONST 1 (PUSH (FRAME (PUSH (GREF - (APPLY 2))) (LREF 0 (PUSH (GREF len (APPLY 1)))))))))))) (LREF 0 (PUSH (FREF 4 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))))))) (LREF 0 (PUSH (GREF dotted->proper (APPLY 1))))) (GSET compile-lambda (HALT)))
(CLOSE (5 5) 0 (FRAME (PUSH (FRAME (PUSH (FRAME (PUSH (LREF 1 (PUSH (CLOSE (3 3) 1 (FREF 0 (PUSH (FRAME (SHIFT 1 (APPLY 1)) (CONST () (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (CLOSE (1 1) 3 (BOX 0 (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 4 (FRAME (TEST (FREF 1 (RET)) (FRAME (PUSH (FREF 2 (PUSH (FREF 3 (PUSH (FRAME (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4)))) (LREF 0 (PUSH (GREF car (APPLY 1)))))))))) (FRAME (PUSH (FREF 0 (UNBOX (APPLY 1)))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))))))) (APPLY 1))))))))))))) (SHIFT 3 (APPLY 3)))))) (LREF 2 (PUSH (LREF 0 (PUSH (GREF cons (APPLY 2)))))))) (FRAME (PUSH (LREF 3 (PUSH (GREF set-union (APPLY 2))))) (LREF 2 (PUSH (LREF 4 (PUSH (GREF set-intersect (APPLY 2))))))))) (CONST RET (PUSH (GREF list (APPLY 1))))) (GSET compile-lambda-bodies (HALT)))
(CLOSE (3 3) 0 (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (CONST () (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (BOX 0 (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 2 (FRAME (TEST (LREF 0 (RET)) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (FRAME (PUSH (LREF 0 (PUSH (GREF set-union (APPLY 2))))) (FREF 1 (PUSH (FRAME (PUSH (GREF find-free (APPLY 2))) (LREF 1 (PUSH (GREF car (APPLY 1)))))))))) (LREF 1 (PUSH (GREF cdr (APPLY 1)))))) (LREF 1 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))) (APPLY 1))))))))))) (SHIFT 1 (APPLY 1)))))) (LREF 1 (PUSH (FRAME (PUSH (GREF set-union (APPLY 2))) (LREF 2 (PUSH (GREF dotted->proper (APPLY 1)))))))) (GSET find-frees (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (FRAME (TEST (CONST () #0=(RET)) (LREF 0 (PUSH (GREF list (SHIFT 1 (APPLY 1)))))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF set-member? (APPLY 2))))))) (FRAME (TEST (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 2 (FRAME (TEST (LREF 0 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 2 (FRAME (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 3 (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (1 -1) 1 (LREF 0 (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (CLOSE (1 1) 0 (CONST () (RET)) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (0 -1) 1 (CONST () (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (0 -1) 1 (CONST () (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (0 -1) 1 (CONST () (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 2 (PUSH (CLOSE (2 -1) 1 (LREF 1 (PUSH (FREF 0 (PUSH (LREF 2 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3))))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (CONST () (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (GREF find-frees (SHIFT 3 (APPLY 3)))))))))) (CONST defmacro (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST call/cc (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST set! (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST if (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST quote (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST ^ (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))) (LREF 0 (PUSH (GREF car (APPLY 1))))) (SHIFT 1 (APPLY 1))))))))) (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-free (SHIFT 2 (APPLY 2)))))))) (FREF 1 (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))) (LREF 0 (PUSH (GREF expand-macro-if-so (APPLY 1))))) (CONST () #0#)) (LREF 0 (PUSH (GREF consp (APPLY 1)))))) (LREF 0 (PUSH (GREF symbolp (APPLY 1))))) (GSET find-free (HALT)))
(CLOSE (3 3) 0 (FRAME (TEST (LREF 2 (RET)) (FRAME (PUSH (LREF 1 (PUSH (FRAME (PUSH (GREF collect-free (SHIFT 3 (APPLY 3)))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))))) (FRAME (PUSH (LREF 1 (PUSH (FRAME (PUSH (GREF compile-refer (APPLY 3))) (LREF 0 (PUSH (GREF car (APPLY 1)))))))) (LREF 2 (PUSH (CONST PUSH (PUSH (GREF list (APPLY 2))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (GSET collect-free (HALT)))
(CLOSE (2 2) 0 (LREF 0 (PUSH (CONST () (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (LREF 1 (PUSH (CLOSE (1 1) 1 (BOX 0 (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 2 (FRAME (TEST (LREF 0 (RET)) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (FRAME (PUSH (LREF 0 (PUSH (GREF set-union (APPLY 2))))) (FREF 1 (PUSH (FRAME (PUSH (GREF find-sets (APPLY 2))) (LREF 1 (PUSH (GREF car (APPLY 1)))))))))) (LREF 1 (PUSH (GREF cdr (APPLY 1)))))) (LREF 1 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))) (APPLY 1))))))))))) (GSET find-setses (HALT)))
(CLOSE (2 2) 0 (FRAME (TEST (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 2 (FRAME (TEST (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-sets (SHIFT 2 (APPLY 2))))))) (FREF 1 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (CLOSE (1 1) 2 (FRAME (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (1 1) 3 (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (2 2) 1 (FRAME (PUSH (FRAME (TEST (FRAME #0=(PUSH (GREF set-union (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF list (APPLY 1))))) (CONST () #0#)) (FREF 0 (PUSH (LREF 0 (PUSH (GREF set-member? (APPLY 2)))))))) (FREF 0 (PUSH (LREF 1 (PUSH (GREF find-sets (APPLY 2))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (1 -1) 1 (FRAME (PUSH (LREF 1 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FREF 0 (PUSH (GREF set-minus (APPLY 2))))) (LREF 0 (PUSH (GREF dotted->proper (APPLY 1)))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (CLOSE (0 -1) 0 (CONST () (RET)) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (0 -1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (0 -1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2))))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FRAME (TEST (FRAME (PUSH (FREF 1 (PUSH (CLOSE (2 -1) 1 (FRAME (PUSH (LREF 2 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2)))))) (FRAME (PUSH (FREF 0 (PUSH (GREF set-minus (APPLY 2))))) (LREF 1 (PUSH (GREF dotted->proper (APPLY 1)))))) (PUSH (GREF apply (SHIFT 2 (APPLY 2)))))))) (FREF 0 (PUSH (GREF cdr (APPLY 1))))) (FREF 1 (PUSH (FREF 2 (PUSH (GREF find-setses (SHIFT 2 (APPLY 2)))))))) (CONST defmacro (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST call/cc (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST if (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST quote (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST ^ (PUSH (LREF 0 (PUSH (GREF is (APPLY 2)))))))) (CONST set! (PUSH (LREF 0 (PUSH (GREF is (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))))) (LREF 0 (PUSH (GREF car (APPLY 1))))) (SHIFT 1 (APPLY 1)))))))))) (FREF 1 (PUSH (LREF 0 (PUSH (GREF isnt (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))))) (LREF 0 (PUSH (GREF expand-macro-if-so (APPLY 1))))) (CONST () (RET))) (LREF 0 (PUSH (GREF consp (APPLY 1))))) (GSET find-sets (HALT)))
(CLOSE (3 3) 0 (CONST 0 (PUSH (LREF 1 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (LREF 0 (PUSH (LREF 2 (PUSH (CLOSE (1 1) 2 (BOX 0 (FREF 1 (PUSH (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 3 (FRAME (TEST (FREF 1 (RET)) (FRAME (TEST (FRAME (PUSH (LREF 1 (PUSH (CONST BOX (PUSH (GREF list (SHIFT 3 (APPLY 3)))))))) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (APPLY 2)))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (CONST 1 (PUSH (LREF 1 (PUSH (GREF + (APPLY 2)))))))) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (CONST 1 (PUSH (LREF 1 (PUSH (GREF + (APPLY 2)))))))) (FREF 2 (PUSH (FRAME (PUSH (GREF set-member? (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))))) (APPLY 1))))))))))))) (GSET make-boxes (HALT)))
(CLOSE (3 3) 0 (LREF 2 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (CONST GREF (PUSH (GREF list (SHIFT 3 (APPLY 3))))))))) (PUSH (LREF 2 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (CONST FREF (PUSH (GREF list (SHIFT 3 (APPLY 3))))))))) (PUSH (LREF 2 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (CONST LREF (PUSH (GREF list (SHIFT 3 (APPLY 3))))))))) (PUSH (LREF 1 (PUSH (LREF 0 (PUSH (GREF compile-lookup (SHIFT 5 (APPLY 5))))))))))))))))))) (GSET compile-refer (HALT)))
(CLOSE (2 2) 0 (CONST 0 (PUSH (LREF 1 (PUSH (FRAME (SHIFT 2 (APPLY 2)) (CONST () (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (BOX 0 (FREF 0 (PUSH (LREF 0 (PUSH (CLOSE (2 2) 2 (FRAME (TEST (GREF nil #0=(RET)) (FRAME (TEST (LREF 1 #0#) (FRAME (PUSH (FRAME (PUSH (FREF 0 (UNBOX (SHIFT 2 (APPLY 2))))) (LREF 0 (PUSH (GREF cdr (APPLY 1)))))) (CONST 1 (PUSH (LREF 1 (PUSH (GREF + (APPLY 2)))))))) (FREF 1 (PUSH (FRAME (PUSH (GREF is (APPLY 2))) (LREF 0 (PUSH (GREF car (APPLY 1))))))))) (LREF 0 (PUSH (GREF no (APPLY 1))))) (LSET 0 (RET)))))))) (APPLY 1))))))))))) (GSET find-index (HALT)))
(CLOSE (5 5) 0 (FRAME (PUSH (FRAME (PUSH (LREF 0 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (LREF 4 (PUSH (CLOSE (2 2) 4 (FRAME (PUSH (FREF 3 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (FREF 0 (PUSH (LREF 1 (PUSH (CLOSE (1 1) 5 (LREF 0 (TEST (LREF 0 (PUSH (FREF 3 (SHIFT 1 (APPLY 1))))) (FRAME (PUSH (FREF 4 (PUSH (FREF 2 (PUSH (FREF 1 (PUSH (CLOSE (1 1) 3 (LREF 0 (TEST (LREF 0 (PUSH (FREF 1 (SHIFT 1 (APPLY 1))))) (FREF 2 (PUSH (FREF 0 (SHIFT 1 (APPLY 1))))))) (SHIFT 1 (APPLY 1)))))))))) (FREF 0 (PUSH (FREF 4 (PUSH (GREF find-index (APPLY 2))))))))) (SHIFT 1 (APPLY 1)))))))))))))) (LREF 0 (PUSH (FREF 3 (PUSH (GREF find-index (APPLY 2))))))) (SHIFT 2 (APPLY 2)))))))))))) (LREF 1 (PUSH (GREF car (APPLY 1)))))) (LREF 1 (PUSH (GREF cdr (APPLY 1))))) (GSET compile-lookup (HALT)))
(CLOSE (1 1) 0 (CONST RET (PUSH (FRAME (PUSH (GREF is (SHIFT 2 (APPLY 2)))) (LREF 0 (PUSH (GREF car (APPLY 1))))))) (GSET tail? (HALT)))
(CLOSE (4 4) 0 (FRAME (PUSH (LREF 0 (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (CLOSE (1 1) 4 (FRAME (PUSH (FRAME (TEST (FRAME #0=(PUSH (FRAME (TEST (FRAME #1=(PUSH (FREF 3 (PUSH (FREF 0 (PUSH (CLOSE (3 3) 2 (FREF 0 (PUSH (LREF 2 (PUSH (FRAME (PUSH (FREF 1 (PUSH (CONST MACRO (PUSH (GREF list (SHIFT 5 (APPLY 5)))))))) (LREF 1 (PUSH (LREF 0 (PUSH (GREF list (APPLY 2))))))))))) (SHIFT 3 (APPLY 3)))))))) (FREF 2 (PUSH (GREF len (APPLY 1))))) (FRAME #1# (CONST 1 (PUSH (FRAME (PUSH (GREF - (APPLY 2))) (LREF 0 (PUSH (GREF len (APPLY 1))))))))) (LREF 0 (PUSH (FREF 2 (PUSH (GREF is (APPLY 2)))))))) (FREF 2 (PUSH (GREF len (APPLY 1))))) (CONST -1 #0#)) (LREF 0 (PUSH (FREF 2 (PUSH (GREF is (APPLY 2)))))))) (CONST () (PUSH (CONST () (PUSH (FRAME (PUSH (FREF 1 (PUSH (LREF 0 (PUSH (GREF compile-lambda-bodies (APPLY 5))))))) (LREF 0 (PUSH (GREF list (APPLY 1)))))))))) (SHIFT 1 (APPLY 1)))))))))))) (LREF 1 (PUSH (GREF dotted->proper (APPLY 1))))) (GSET compile-defmacro (HALT)))
(CLOSE (4 4) 0 (FRAME (PUSH (LREF 1 (PUSH (LREF 2 (PUSH (LREF 3 (PUSH (CLOSE (1 1) 3 (FREF 0 (PUSH (FREF 1 (PUSH (FREF 2 (PUSH (LREF 0 (PUSH (GREF compile-recur (SHIFT 4 (APPLY 4))))))))))) (SHIFT 1 (APPLY 1)))))))))) (LREF 0 (PUSH (GREF macroexpand (APPLY 1))))) (GSET compile-apply-macro (HALT)))
(CLOSE (1 1) 0 (FRAME (TEST (FRAME (PUSH (FRAME (PUSH (LREF 0 (PUSH (CLOSE (2 2) 1 (FRAME (TEST (FRAME (PUSH (LREF 1 (PUSH (CLOSE (1 1) 1 (FREF 0 (PUSH (LREF 0 (PUSH (GREF apply (SHIFT 2 (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))) (LREF 0 (PUSH (GREF *macro-table* (PUSH (GREF hash-table-get (APPLY 2))))))) (FREF 0 (RET))) (LREF 0 (PUSH (GREF macro? (APPLY 1))))) (SHIFT 2 (APPLY 2)))))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (LREF 0 (PUSH (GREF cdr (APPLY 1))))) (LREF 0 (RET))) (LREF 0 (PUSH (GREF consp (APPLY 1))))) (GSET macroexpand-1 (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (FRAME (TEST (FREF 0 (RET)) (LREF 0 (PUSH (GREF macroexpand (SHIFT 1 (APPLY 1)))))) (FREF 0 (PUSH (LREF 0 (PUSH (GREF iso (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))) (LREF 0 (PUSH (GREF macroexpand-1 (APPLY 1))))) (GSET macroexpand (HALT)))
(CLOSE (1 1) 0 (FRAME (TEST (FRAME #0=(TEST (FRAME (PUSH (LREF 0 (PUSH (CLOSE (1 1) 1 (FRAME (TEST (FREF 0 (RET)) (LREF 0 (PUSH (GREF expand-macro-if-so (SHIFT 1 (APPLY 1)))))) (FREF 0 (PUSH (LREF 0 (PUSH (GREF iso (APPLY 2))))))) (SHIFT 1 (APPLY 1)))))) (LREF 0 (PUSH (GREF macroexpand (APPLY 1))))) (LREF 0 (RET))) (FRAME (PUSH (GREF macro? (APPLY 1))) (LREF 0 (PUSH (GREF car (APPLY 1)))))) (UNDEF #0#)) (LREF 0 (PUSH (GREF consp (APPLY 1))))) (GSET expand-macro-if-so (HALT)))
(CLOSE (1 1) 0 (FRAME (PUSH (GREF run-binary (SHIFT 1 (APPLY 1)))) (LREF 0 (PUSH (GREF compile (APPLY 1))))) (GSET eval (HALT)))
