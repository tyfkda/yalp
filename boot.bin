(11 11 10)
(3 (9 2 0 (26 1 29 6 -2 . #0=(3 (5 (#\nl nil) 0 3 (1 0 0 2 read-char 4 1) 0 2 member 4 2) 7 (11 11 17) 19 1 0 . #0#)) 0 5 #\; 0 2 set-macro-character 4 2) 10)
(3 (9 2 0 (3 (1 0 0 2 read 4 1) 0 5 quote 0 2 list 8 2) 0 5 #\' 0 2 set-macro-character 4 2) 10)
(3 (9 2 0 (3 (1 0 0 5 #\] 0 2 read-delimited-list 4 2) 0 5 (_) 0 5 ^ 0 2 list 8 3) 0 5 #\[ 0 2 set-macro-character 4 2) 10)
(25 defun (2 -1) 0 (3 (1 2 0 1 1 0 5 ^ 0 2 list* 4 3) 0 1 0 0 5 def 0 2 list 8 3) 10)
(9 1 0 (1 0 7 (29 . #0=(17)) 5 t . #0#) 16 not 10)
(9 1 0 (1 0 30 30 17) 16 caar 9 1 0 (1 0 30 31 17) 16 cdar 9 1 0 (1 0 31 30 17) 16 cadr 9 1 0 (1 0 31 31 17) 16 cddr 9 1 0 (1 0 30 31 30 17) 16 cadar 9 1 0 (1 0 31 31 30 17) 16 caddr 9 1 0 (1 0 31 31 31 17) 16 cdddr 9 1 0 (1 0 31 31 31 30 17) 16 cadddr 9 1 0 (1 0 31 31 31 31 17) 16 cddddr 9 1 0 (1 0 31 31 31 31 30 17) 16 caddddr 9 1 0 (1 0 31 31 31 31 31 17) 16 cdddddr 10)
(9 1 0 (5 int 0 3 (1 0 0 2 type 4 1) 38 17) 16 int? 9 1 0 (5 pair 0 3 (1 0 0 2 type 4 1) 38 17) 16 pair? 9 1 0 (5 symbol 0 3 (1 0 0 2 type 4 1) 38 17) 16 symbol? 9 1 0 (5 string 0 3 (1 0 0 2 type 4 1) 38 17) 16 string? 9 1 0 (5 flonum 0 3 (1 0 0 2 type 4 1) 38 17) 16 flonum? 10)
(9 2 0 #0=(3 (1 1 0 2 pair? 4 1) 7 (3 (1 1 30 0 1 0 4 1) 7 (1 1 . #1=(17)) 1 1 31 0 1 0 0 19 0 2 . #0#) 29 . #1#) 16 any? 10)
(9 2 0 #0=(1 1 7 (3 (1 1 30 0 1 0 4 1) 7 (1 1 31 0 1 0 0 19 0 2 . #0#) 29 . #1=(17)) 5 t . #1#) 16 all? 10)
(9 (2 -1) 0 (26 4 1 2 7 (29 6 -2 29 6 -4 3 (1 2 0 1 1 0 2 cons 4 2) 6 -3 . #0=(3 (1 -3 0 2 not 0 2 any? 4 2) 7 (1 -4 0 2 reverse! 8 1) 3 (1 -4 0 3 (3 (1 -3 0 2 car 0 2 map 4 2) 0 1 0 0 2 apply 4 2) 0 2 cons 4 2) 0 3 (1 -3 0 2 cdr 0 2 map 4 2) 0 19 1 2 . #0#)) 29 6 -2 29 6 -4 1 1 6 -3 . #1=(3 (1 -3 0 2 pair? 4 1) 7 (3 (1 -4 0 3 (1 -3 30 0 1 0 4 1) 0 2 cons 4 2) 0 1 -3 31 0 19 1 2 . #1#) 3 (1 -4 0 2 reverse! 4 1) 6 -5 1 -3 7 (1 -4 7 (3 (3 (1 -3 0 1 0 4 1) 0 1 -4 0 2 set-cdr! 4 2) 1 -5 . #2=(17)) 1 -3 0 1 0 8 1) 1 -5 . #2#)) 16 map 10)
(25 do (0 -1) 0 (3 (1 0 0 29 0 5 ^ 0 2 list* 4 3) 0 2 list 8 1) 10)
(25 when (1 -1) 0 (3 (1 1 0 5 do 0 2 list* 4 2) 0 1 0 0 5 if 0 2 list 8 3) 10)
(25 unless (1 -1) 0 (3 (1 1 0 5 do 0 2 list* 4 2) 0 5 (do) 0 1 0 0 5 if 0 2 list 8 4) 10)
(25 set! (2 -1) 0 (1 2 7 (3 (1 2 0 5 set! 0 2 list* 4 2) 0 3 (1 1 0 1 0 0 5 set! 0 2 list 4 3) 0 5 do 0 2 list 8 3) 1 1 0 1 0 0 5 set! 0 2 list 8 3) 10)
(25 and (0 -1) 0 (1 0 7 (1 0 31 7 (5 ('nil) 0 3 (1 0 31 0 5 and 0 2 list* 4 2) 0 1 0 30 0 5 if 0 2 list* 8 4) 1 0 30 . #0=(17)) 5 t . #0#) 10)
(25 let1 (2 -1) 0 (1 1 0 3 (1 2 0 3 (1 0 0 2 list 4 1) 0 5 ^ 0 2 list* 4 3) 0 2 list 8 2) 10)
(25 let (1 -1) 0 (26 3 3 (1 0 0 2 symbol? 4 1) 7 (1 0 7 (1 1 31 6 -4 1 1 30 6 -3 1 0 6 -2 3 (3 (1 -3 0 2 cadr 0 2 map 4 2) 0 1 -2 0 2 list* 4 2) 0 3 (3 (1 -4 0 3 (1 -3 0 2 car 0 2 map 4 2) 0 5 ^ 0 2 list* 4 3) 0 1 -2 0 5 set! 0 2 list 4 3) 0 29 0 1 -2 0 5 let1 0 2 list 8 5) 3 . #1=((1 0 0 9 1 0 (26 1 3 (1 0 0 2 pair? 4 1) 7 (3 (1 0 31 0 2 single? 4 1) 6 -2 7 (11 . #0=(1 0 6 -2 31 30 17)) 3 (1 0 0 5 "malformed let: %@" 0 2 compile-error 4 2) . #0#) 11 . #0#) 0 2 map 4 2) 0 3 (1 1 0 3 (1 0 0 2 car 0 2 map 4 2) 0 5 ^ 0 2 list* 4 3) 0 2 list* 8 2)) 3 . #1#) 10)
(25 let* (1 -1) 0 (1 0 7 (3 (3 (3 (1 1 0 1 0 31 0 5 let* 0 2 list* 4 3) 0 2 list 4 1) 0 1 0 30 0 2 append 4 2) 0 5 let1 0 2 list* 8 2) 1 1 0 5 do 0 2 list* 8 2) 10)
(25 alet (1 -1) 0 (1 1 0 1 0 0 5 loop 0 5 let 0 2 list* 8 4) 10)
(9 2 0 (26 4 1 0 7 (1 0 31 6 -3 1 0 30 6 -2 31 6 -5 1 -2 30 6 -4 5 t 0 1 -4 38 7 (1 -3 7 (5 "else clause must comes at last in cond" 0 2 compile-error 8 1) 1 -5 0 5 do 0 2 list* 8 2) 1 -3 0 1 -5 0 1 -4 0 1 1 8 3) 29 17) 16 cond-template 10)
(25 cond (0 -1) 0 (9 3 0 (3 (1 2 0 5 cond 0 2 list* 4 2) 0 3 (1 1 0 5 do 0 2 list* 4 2) 0 1 0 0 5 if 0 2 list 8 4) 0 1 0 0 2 cond-template 8 2) 10)
(25 acond (0 -1) 0 (9 3 0 (26 1 3 (2 gensym 4 0) 6 -2 3 (3 (1 2 0 5 acond 0 2 list* 4 2) 0 3 (1 1 0 1 -2 0 5 it 0 5 let1 0 2 list* 4 4) 0 1 -2 0 5 if 0 2 list 4 4) 0 1 0 0 1 -2 0 5 let1 0 2 list 8 4) 0 1 0 0 2 cond-template 8 2) 10)
(25 aif (1 -1) 0 (3 (1 1 0 5 it 0 5 if 0 2 list* 4 3) 0 1 0 0 5 it 0 5 let1 0 2 list 8 4) 10)
(25 awhen (1 -1) 0 (3 (1 1 0 5 do 0 2 list* 4 2) 0 1 0 0 5 aif 0 2 list 8 3) 10)
(25 let-gensym (1 -1) 0 (3 (1 0 0 2 pair? 4 1) 7 (1 1 0 3 (1 0 0 9 1 0 (5 (gensym) 0 1 0 0 2 list 8 2) 0 2 map 4 2) 0 5 let 0 2 list* 8 3) 1 1 0 5 (gensym) 0 1 0 0 5 let1 0 2 list* 8 4) 10)
(25 while (1 -1) 0 (26 1 3 (2 gensym 4 0) 6 -2 3 (3 (3 (3 (1 -2 0 2 list 4 1) 0 2 list 4 1) 0 1 1 0 2 append 4 2) 0 1 0 0 5 when 0 2 list* 4 3) 0 29 0 1 -2 0 5 let 0 2 list 8 4) 10)
(25 awhile (1 -1) 0 (26 1 3 (2 gensym 4 0) 6 -2 3 (3 (3 (3 (1 -2 0 2 list 4 1) 0 2 list 4 1) 0 1 1 0 2 append 4 2) 0 1 0 0 5 awhen 0 2 list* 4 3) 0 29 0 1 -2 0 5 let 0 2 list 8 4) 10)
(25 until (1 -1) 0 (26 1 3 (2 gensym 4 0) 6 -2 3 (3 (3 (3 (1 -2 0 2 list 4 1) 0 2 list 4 1) 0 1 1 0 2 append 4 2) 0 1 0 0 5 unless 0 2 list* 4 3) 0 29 0 1 -2 0 5 let 0 2 list 8 4) 10)
(25 or (0 -1) 0 (26 1 1 0 7 (3 (2 gensym 4 0) 6 -2 3 (3 (1 0 31 0 5 or 0 2 list* 4 2) 0 1 -2 0 1 -2 0 5 if 0 2 list 4 4) 0 1 0 30 0 1 -2 0 5 let1 0 2 list 8 4) 29 17) 10)
(25 case (1 -1) 0 (26 1 3 (2 gensym 4 0) 6 -2 3 (3 (1 1 0 1 -2 0 9 1 1 (26 2 1 0 31 6 -3 1 0 30 6 -2 5 t 0 1 -2 38 7 (1 0 17) 3 (1 -2 0 2 pair? 4 1) 7 (1 -3 0 3 (3 (1 -2 0 5 quote 0 2 list 4 2) 0 12 0 0 5 member 0 2 list 4 3) 0 2 list* 8 2) 1 -3 0 3 (3 (1 -2 0 5 quote 0 2 list 4 2) 0 12 0 0 5 eq? 0 2 list 4 3) 0 2 list* 8 2) 0 2 map 4 2) 0 5 cond 0 2 list* 4 2) 0 1 0 0 1 -2 0 5 let1 0 2 list 8 4) 10)
(25 dolist (1 -1) 0 (26 4 1 0 6 -2 31 30 6 -3 1 0 30 6 -2 3 (2 gensym 4 0) 6 -5 3 (2 gensym 4 0) 6 -4 3 (3 (3 (3 (3 (3 (1 -4 0 5 cdr 0 2 list 4 2) 0 1 -5 0 2 list 4 2) 0 2 list 4 1) 0 1 1 0 2 append 4 2) 0 3 (1 -4 0 5 car 0 2 list 4 2) 0 1 -2 0 5 let1 0 2 list* 4 4) 0 3 (1 -4 0 5 pair? 0 2 list 4 2) 0 5 when 0 2 list 4 3) 0 3 (3 (1 -3 0 1 -4 0 2 list 4 2) 0 2 list 4 1) 0 1 -5 0 5 let 0 2 list 8 4) 10)
(25 for0-n (2 -1) 0 (26 2 3 (2 gensym 4 0) 6 -3 3 (2 gensym 4 0) 6 -2 3 (3 (3 (3 (3 (3 (5 (1) 0 1 0 0 5 + 0 2 list* 4 3) 0 1 -3 0 2 list 4 2) 0 2 list 4 1) 0 1 2 0 2 append 4 2) 0 3 (1 -2 0 1 0 0 5 < 0 2 list 4 3) 0 5 when 0 2 list* 4 3) 0 3 (3 (5 (0) 0 1 0 0 2 list* 4 2) 0 2 list 4 1) 0 1 -3 0 5 let 0 2 list 4 4) 0 1 1 0 1 -2 0 5 let1 0 2 list 8 4) 10)
(9 1 0 (26 4 3 (1 0 0 2 type 4 1) 6 -2 5 pair 0 1 -2 38 7 (29 6 -3 5 0 6 -5 1 0 6 -4 . #0=(3 (1 -4 0 2 pair? 4 1) 7 (5 1 0 1 -5 0 32 2 0 1 -4 31 0 19 2 2 . #0#) 1 -5 . #1=(17))) 5 string 0 1 -2 38 7 (1 0 0 2 string-length 8 1) 5 vector 0 1 -2 38 7 (1 0 0 2 vector-length 8 1) 5 0 . #1#) 16 length 10)
(9 1 0 #0=(3 (1 0 31 0 2 pair? 4 1) 7 (1 0 31 0 19 0 1 . #0#) 1 0 17) 16 last 10)
(9 1 0 (26 3 29 6 -2 29 6 -4 1 0 6 -3 . #0=(3 (1 -3 0 2 pair? 4 1) 7 (3 (1 -4 0 1 -3 30 0 2 cons 4 2) 0 1 -3 31 0 19 1 2 . #0#) 1 -4 17)) 16 reverse 10)
(9 2 0 (26 4 29 6 -2 29 6 -4 1 1 6 -3 . #0=(3 (1 -3 0 2 pair? 4 1) 7 (3 (1 -4 0 3 (1 -3 0 1 0 4 1) 0 2 cons 4 2) 0 1 -3 31 0 19 1 2 . #0#) 3 (1 -4 0 2 reverse! 4 1) 6 -5 1 -3 7 (1 -4 7 (3 (3 (1 -3 0 1 0 4 1) 0 1 -4 0 2 set-cdr! 4 2) 1 -5 . #1=(17)) 1 -3 0 1 0 8 1) 1 -5 . #1#)) 16 maplist 10)
(9 2 0 (1 1 0 1 0 0 9 1 1 (1 0 0 12 0 38 17) 0 2 any? 8 2) 16 member 10)
(9 2 0 (26 1 . #0=(1 1 7 (1 0 0 1 1 6 -2 30 30 38 7 (1 1 30 . #1=(17)) 1 1 31 0 1 0 0 19 0 2 . #0#) 29 . #1#)) 16 assoc 10)
(9 3 0 (1 2 0 3 (1 1 0 1 0 0 2 cons 4 2) 0 2 cons 8 2) 16 acons 10)
(9 2 0 (26 1 . #0=(1 0 7 (1 0 30 6 -2 3 (1 1 0 1 -2 0 2 member 4 2) 7 (1 1 . #1=(0 1 0 31 0 19 0 2 . #0#)) 3 (1 1 0 1 -2 0 2 cons 4 2) . #1#) 1 1 17)) 16 union 10)
(9 2 0 #0=(1 0 7 (3 (1 1 0 1 0 30 0 2 member 4 2) 7 (3 (1 1 0 1 0 31 0 2 intersection 4 2) 0 1 0 30 0 2 cons 8 2) 1 1 0 1 0 31 0 19 0 2 . #0#) 29 17) 16 intersection 10)
(9 1 0 (26 1 3 (1 0 0 2 pair? 4 1) 7 (1 0 31 6 -2 7 (29 . #0=(17)) 5 t . #0#) 29 . #0#) 16 single? 10)
(9 2 0 (26 1 3 (1 0 0 2 reverse! 4 1) 6 -2 3 (1 1 0 1 0 0 2 set-cdr! 4 2) 1 -2 17) 16 nreconc 10)
(9 (1 -1) 0 (26 1 1 1 7 (1 1 30 . #0=(6 -2 3 (1 -2 0 3 (1 0 0 2 create-ss-table 4 1) 0 1 0 0 2 write/ss-print 4 3) 1 0 17)) 2 *stdout* . #0#) 16 write/ss 10)
(5 0 0 26 1 3 (2 gensym 4 0) 6 -2 0 9 1 1 (26 3 9 3 0 (26 1 3 (1 1 0 1 0 0 2 table-get 4 2) 7 (11 17) 3 (1 2 0 1 0 0 2 table-get 4 2) 6 -2 3 (1 -2 0 1 1 0 1 0 0 2 table-put! 4 3) 1 -2 0 5 1 0 32 2 0 1 2 0 1 0 0 2 table-put! 8 3) 6 -3 3 (5 eq? 0 2 table 4 1) 6 -2 3 (5 0 0 12 0 0 1 -2 0 2 table-put! 4 3) 29 6 -4 20 -4 1 -2 0 1 -4 0 1 -3 0 12 0 0 9 1 4 (26 5 . #0=(3 (1 0 0 2 type 4 1) 6 -2 3 (5 (pair vector) 0 1 -2 0 2 member 4 2) 7 (3 (1 0 0 12 3 0 2 table-exists? 4 2) 7 (12 0 0 1 0 0 12 3 0 12 1 8 3) 3 (29 0 1 0 0 12 3 0 2 table-put! 4 3) 1 -2 6 -3 5 pair 0 1 -3 38 7 (3 (1 0 30 0 12 2 21 4 1) 1 0 31 0 19 0 1 . #0#) 5 vector 0 1 -3 38 7 (3 (1 0 0 2 length 4 1) 6 -4 29 6 -5 5 0 6 -6 . #1=(1 -4 0 1 -6 0 39 2 7 (3 (3 (1 -6 0 1 0 0 2 vector-get 4 2) 0 12 2 21 4 1) 5 1 0 1 -6 0 32 2 0 19 4 1 . #1#) 11 . #2=(17))) 29 . #2#) 11 . #2#)) 13 -4 3 (1 0 0 1 -4 21 4 1) 1 -2 17) 16 create-ss-table 26 -2 10)
(9 3 0 (26 9 3 (1 0 0 1 1 0 2 table-get 4 2) 6 -2 7 (5 0 0 1 -2 0 39 2 7 (1 -2 0 5 -1 0 33 2 0 5 "#%@#" 0 1 2 0 2 format 8 3) 1 . #7=(-2 7 (3 (1 -2 0 5 "#%@=" 0 1 2 0 2 format 4 3) 3 (1 -2 0 5 -1 0 33 2 0 1 0 0 1 1 0 2 table-put! 4 3) . #6=(3 (1 0 0 2 type 4 1) 6 -3 5 pair 0 1 -3 38 7 (3 (1 0 31 0 2 single? 4 1) 7 (3 (1 0 31 0 1 1 0 2 table-get 4 2) 6 -4 7 (29 . #4=(6 -4 7 (3 (1 2 0 1 -4 31 0 2 display 4 2) 1 2 0 1 0 6 -5 31 30 0 2 write 8 2) 29 6 -5 1 0 6 -7 5 "(" 6 -6 . #1=(1 -7 7 (3 (1 2 0 1 -6 0 2 display 4 2) 3 (1 2 0 1 1 0 1 -7 30 0 2 write/ss-print 4 3) 1 -7 31 6 -8 7 (3 (1 -8 0 2 pair? 4 1) 6 -9 7 (29 . #2=(6 -9 7 #0=(3 (1 2 0 5 " . " 0 2 display 4 2) 3 (1 2 0 1 1 0 1 -8 0 2 write/ss-print 4 3) . #3=(1 2 0 5 ")" 0 2 display 8 2)) 3 (1 -8 0 1 1 0 2 table-get 4 2) 6 -10 7 #0# 1 -8 0 5 " " 0 19 4 2 . #1#)) 5 t . #2#) 29 . #2#) 11 . #3#))) 3 (5 ((quote . "'") (quasiquote . "`") (unquote . ",") (unquote-splicing . ",@")) 0 1 0 30 0 2 assoc 4 2) . #4#) 29 . #4#) 5 vector 0 1 -3 38 7 (3 (1 0 0 2 vector-length 4 1) 6 -4 29 6 -5 5 0 6 -7 5 "#(" 6 -6 . #5=(1 -4 0 1 -7 0 39 2 7 (3 (1 2 0 1 -6 0 2 display 4 2) 3 (1 2 0 1 1 0 3 (1 -7 0 1 0 0 2 vector-get 4 2) 0 2 write/ss-print 4 3) 5 1 0 1 -7 0 32 2 0 5 " " 0 19 4 2 . #5#) 11 1 2 0 5 ")" 0 2 display 8 2)) 1 2 0 1 0 0 2 write 8 2)) 11 . #6#)) 1 . #7#) 16 write/ss-print 10)
(9 2 0 (26 4 29 6 -2 1 1 6 -5 29 6 -4 1 0 6 -3 . #0=(1 -5 7 (5 0 0 1 -3 0 41 2 7 (1 -5 31 0 3 (1 -4 0 1 -5 30 0 2 cons 4 2) 0 5 1 0 1 -3 0 33 2 0 19 1 3 . #0#) 1 . #1=(-4 0 2 reverse! 8 1)) 1 . #1#)) 16 take 10)
(9 2 0 #0=(1 1 7 (5 0 0 1 0 0 41 2 7 (1 1 31 0 5 1 0 1 0 0 33 2 0 19 0 2 . #0#) 1 1 . #1=(17)) 11 . #1#) 16 drop 10)
(9 2 0 (3 (1 0 0 1 1 0 2 drop 4 2) 30 17) 16 elt 10)
(9 2 0 (26 3 29 6 -2 5 0 6 -4 1 1 6 -3 . #0=(7 (3 (1 -3 30 0 1 0 4 1) 7 (1 -4 . #1=(17)) 5 1 0 1 -4 0 32 2 0 1 -3 31 0 19 1 2 1 -3 . #0#) 29 . #1#)) 16 position-if 10)
(9 2 0 (1 1 0 1 0 0 9 1 1 (12 0 0 1 0 38 17) 0 2 position-if 8 2) 16 position 10)
(9 1 0 (26 2 1 0 6 -2 7 (29 . #2=(6 -2 7 (1 -2 . #0=(17)) 3 (1 0 0 2 pair? 4 1) 7 (3 (1 0 0 2 last 4 1) 31 6 -3 7 (29 . #1=(6 -3 7 (1 -3 . #0#) 29 . #0#)) 5 t . #1#) 29 . #1#)) 5 t . #2#) 16 list? 10)
(9 2 0 (3 (1 1 30 0 1 0 0 2 set-car! 4 2) 1 1 31 0 1 0 0 2 set-cdr! 8 2) 16 copy-pair! 10)
(9 2 0 (26 3 29 6 -2 29 6 -4 1 1 6 -3 . #0=(7 (3 (1 -3 30 0 1 0 4 1) 7 (1 -4 . #1=(0 1 -3 31 0 19 1 2 1 -3 . #0#)) 3 (1 -4 0 1 -3 30 0 2 cons 4 2) . #1#) 1 -4 0 2 reverse! 8 1)) 16 remove-if 10)
(9 2 0 (1 1 0 1 0 0 9 1 1 (26 1 3 (1 0 0 12 0 4 1) 6 -2 7 (29 . #0=(17)) 5 t . #0#) 0 2 remove-if 8 2) 16 remove-if-not 10)
(9 1 0 (3 (1 0 0 2 pair? 4 1) 7 (3 (1 0 31 0 2 copy-list 4 1) 0 3 (1 0 30 0 2 copy-list 4 1) 0 2 cons 8 2) 1 0 17) 16 copy-list 10)
(9 2 0 (26 1 5 0 0 3 (1 1 0 1 0 0 2 logand 4 2) 38 6 -2 7 (29 . #0=(17)) 5 t . #0#) 16 bit? 10)
(25 with-open-file (1 -1) 0 (26 2 1 0 6 -2 31 30 6 -3 1 0 30 6 -2 3 (3 (3 (5 (result) 0 3 (1 -2 0 5 close 0 2 list 4 2) 0 2 list* 4 2) 0 1 1 0 2 append 4 2) 0 5 result 0 5 let1 0 2 list* 4 3) 0 3 (1 -3 0 5 open 0 2 list 4 2) 0 1 -2 0 5 let1 0 2 list 8 4) 10)
(3 (2 gensym 4 0) 16 *bq-clobberable* 10)
(3 (29 0 5 quote 0 2 list 4 2) 16 *bq-quote-nil* 10)
(3 (9 2 0 (3 (1 0 0 2 read 4 1) 0 5 quasiquote 0 2 list 8 2) 0 5 #\` 0 2 set-macro-character 4 2) 10)
(3 (9 2 0 (26 2 3 (1 0 0 2 read-char 4 1) 6 -2 6 -3 5 #\@ 0 1 -3 38 7 (3 (1 0 0 2 read 4 1) 0 5 unquote-splicing 0 2 list 8 2) 5 #\. 0 1 -3 38 7 (3 (1 0 0 2 read 4 1) 0 5 unquote-dot 0 2 list 8 2) 3 (1 0 0 1 -2 0 2 unread-char 4 2) 3 (1 0 0 2 read 4 1) 0 5 unquote 0 2 list 8 2) 0 5 #\, 0 2 set-macro-character 4 2) 10)
(25 quasiquote 1 0 (1 0 0 2 bq-completely-process 8 1) 10)
(9 1 0 (3 (1 0 0 2 bq-process 4 1) 0 2 bq-simplify 8 1) 16 bq-completely-process 10)
(9 1 0 (26 4 . #0=(3 (1 0 0 2 pair? 4 1) 6 -2 7 (5 quasiquote 0 1 0 30 38 7 (3 (1 0 6 -2 31 30 0 2 bq-completely-process 4 1) 0 19 0 1 . #0#) 5 unquote 0 1 0 30 38 7 (1 0 6 -2 31 30 17) 5 unquote-splicing 0 1 0 30 38 7 (1 0 6 -2 31 30 0 5 ",@~S after `" 0 2 error 8 2) 5 unquote-dot 0 1 0 30 38 7 (1 0 6 -2 31 30 0 5 ",.~S after `" 0 2 error 8 2) 29 6 -2 29 6 -4 1 0 6 -3 . #2=(3 (1 -3 0 2 pair? 4 1) 6 -5 7 (5 unquote 0 1 -3 30 38 7 (1 -3 6 -5 31 31 7 (3 (1 -3 0 5 "Malformed ,~S" 0 2 error 4 2) . #1=(3 (3 (1 -3 6 -5 31 30 0 2 list 4 1) 0 1 -4 0 2 nreconc 4 2) 0 5 append 0 2 cons 8 2)) 11 . #1#) 5 unquote-splicing 0 1 -3 30 38 7 (3 (1 -3 0 5 "Dotted ,@~S" 0 2 error 4 2) . #4=(5 unquote-dot 0 1 -3 30 38 7 (3 (1 -3 0 5 "Dotted ,.~S" 0 2 error 4 2) . #3=(3 (1 -4 0 3 (1 -3 30 0 2 bracket 4 1) 0 2 cons 4 2) 0 1 -3 31 0 19 1 2 . #2#)) 11 . #3#)) 11 . #4#) 3 (3 (3 (1 -3 0 5 quote 0 2 list 4 2) 0 2 list 4 1) 0 1 -4 0 2 nreconc 4 2) 0 5 append 0 2 cons 8 2)) 1 0 0 5 quote 0 2 list 8 2)) 16 bq-process 10)
(9 1 0 (26 1 3 (1 0 0 2 pair? 4 1) 6 -2 7 (5 unquote 0 1 0 30 38 7 (1 0 6 -2 31 30 0 5 list 0 2 list 8 2) 5 unquote-splicing 0 1 0 30 38 7 (1 0 6 -2 31 30 17) 5 unquote-dot 0 1 0 30 38 7 (1 0 6 -2 31 30 0 2 *bq-clobberable* 0 2 list 8 2) 3 (1 0 0 2 bq-process 4 1) 0 5 list 0 2 list 8 2) 3 (1 0 0 2 bq-process 4 1) 0 5 list 0 2 list 8 2) 16 bracket 10)
(9 2 0 (26 2 3 (1 1 0 2 pair? 4 1) 6 -2 7 (3 (1 1 31 0 1 0 0 2 maptree 4 2) 6 -3 3 (1 1 30 0 1 0 4 1) 6 -2 3 (1 1 30 0 1 -2 0 2 equal? 4 2) 7 (3 (1 1 31 0 1 -3 0 2 equal? 4 2) 7 (1 1 17) 1 . #0=(-3 0 1 -2 0 2 cons 8 2)) 1 . #0#) 1 1 0 1 0 8 1) 16 maptree 10)
(9 1 0 (26 2 3 (1 0 0 2 pair? 4 1) 7 (5 unquote-splicing 0 1 0 30 38 6 -2 7 (1 -2 . #0=(17)) 5 unquote-dot 0 1 0 30 38 6 -3 7 (1 -3 . #0#) 29 . #0#) 29 . #0#) 16 bq-splicing-frob 10)
(9 1 0 (26 3 3 (1 0 0 2 pair? 4 1) 7 (5 unquote 0 1 0 30 38 6 -2 7 (1 -2 . #0=(17)) 5 unquote-splicing 0 1 0 30 38 6 -3 7 (1 -3 . #0#) 5 unquote-dot 0 1 0 30 38 6 -4 7 (1 -4 . #0#) 29 . #0#) 29 . #0#) 16 bq-frob 10)
(9 1 0 (26 2 3 (1 0 0 2 pair? 4 1) 7 (5 quote 0 1 0 30 38 7 (1 0 . #0=(6 -2 5 append 0 1 -2 30 38 6 -3 7 (1 -2 0 2 bq-simplify-args 8 1) 1 -2 . #1=(17))) 3 (1 0 0 2 bq-simplify 0 2 maptree 4 2) . #0#) 1 0 . #1#) 16 bq-simplify 10)
(9 1 0 (26 4 29 6 -2 29 6 -4 3 (1 0 31 0 2 reverse 4 1) 6 -3 . #0=(7 (3 (1 -3 30 0 2 pair? 4 1) 6 -5 7 (5 list 0 1 -3 6 -5 30 30 38 7 (3 (1 -3 6 -5 30 31 0 2 bq-splicing-frob 0 2 any? 4 2) 6 -5 7 (5 . #4=(list* 0 1 -3 6 -5 30 30 38 7 (3 (1 -3 6 -5 30 31 0 2 bq-splicing-frob 0 2 any? 4 2) 6 -5 7 (5 . #3=(quote 0 1 -3 6 -5 30 30 38 7 (3 (1 -3 6 -5 30 31 30 0 2 pair? 4 1) 7 (3 (1 -3 6 -5 30 31 30 0 2 bq-frob 4 1) 6 -5 7 (2 . #2=(*bq-clobberable* 0 1 -3 6 -5 30 30 38 7 (3 (1 -4 0 1 -3 6 -5 30 31 30 0 5 append! 0 2 bq-attach-append 4 3) . #1=(0 1 -3 31 0 19 1 2 1 -3 . #0#)) 3 (1 -4 0 1 -3 30 0 5 append 0 2 bq-attach-append 4 3) . #1#)) 3 (1 -3 0 2 cddar 4 1) 6 -5 7 (2 . #2#) 3 (1 -4 0 3 (3 (3 (1 -3 0 2 caadar 4 1) 0 5 quote 0 2 list 4 2) 0 2 list 4 1) 0 2 bq-attach-conses 4 2) . #1#) 2 . #2#) 2 . #2#)) 3 (3 (1 -4 0 3 (1 -3 30 0 2 last 4 1) 30 0 5 append 0 2 bq-attach-append 4 3) 0 3 (3 (1 -3 6 -5 30 31 0 2 reverse 4 1) 31 0 2 reverse 4 1) 0 2 bq-attach-conses 4 2) . #1#) 5 . #3#)) 3 (1 -4 0 1 -3 6 -5 30 31 0 2 bq-attach-conses 4 2) . #1#) 5 . #4#) 3 (1 -4 0 1 -3 30 0 5 append 0 2 bq-attach-append 4 3) . #1#) 1 -4 17)) 16 bq-simplify-args 10)
(9 1 0 (26 2 1 0 6 -2 7 (29 . #2=(6 -2 7 (1 -2 . #0=(17)) 3 (1 0 0 2 pair? 4 1) 7 (5 quote 0 1 0 30 38 . #1=(6 -3 7 (1 -3 . #0#) 29 . #0#)) 29 . #1#)) 5 t . #2#) 16 null-or-quoted 10)
(9 3 0 (26 2 3 (1 1 0 2 null-or-quoted 4 1) 7 (3 (1 2 0 2 null-or-quoted 4 1) 7 (3 (1 2 6 -2 31 30 0 1 1 6 -2 31 30 0 2 append 4 2) 0 5 quote 0 2 list 8 2) 1 . #3=(2 6 -2 7 (29 . #2=(6 -2 7 #0=(3 (1 1 0 2 bq-splicing-frob 4 1) 7 (1 1 0 1 0 0 2 list 8 2) 1 1 17) 3 (2 *bq-quote-nil* 0 1 2 0 2 equal? 4 2) 6 -3 7 #0# 3 (1 2 0 2 pair? 4 1) 7 (1 0 0 1 2 30 38 7 (1 2 31 0 1 1 0 1 2 30 0 2 list* 8 3) 1 . #1=(2 0 1 1 0 1 0 0 2 list 8 3)) 1 . #1#)) 5 t . #2#)) 1 . #3#) 16 bq-attach-append 10)
(9 2 0 (26 2 3 (1 0 0 2 null-or-quoted 0 2 all? 4 2) 7 (3 (1 1 0 2 null-or-quoted 4 1) 7 (3 (1 1 6 -2 31 30 0 3 (1 0 0 2 cadr 0 2 map 4 2) 0 2 append 4 2) 0 5 quote 0 2 list 8 2) 1 . #4=(1 6 -2 7 (29 . #3=(6 -2 7 #0=(1 0 0 5 list 0 2 cons 8 2) 3 (2 *bq-quote-nil* 0 1 1 0 2 equal? 4 2) 6 -3 7 #0# 3 (1 1 0 2 pair? 4 1) 7 (5 list 0 1 1 30 38 6 -2 7 #1=(3 (1 1 31 0 1 0 0 2 append 4 2) 0 1 1 30 0 2 cons 8 2) 5 list* 0 1 1 30 38 6 -3 7 #1# 3 . #2=((3 (1 1 0 2 list 4 1) 0 1 0 0 2 append 4 2) 0 5 list* 0 2 cons 8 2)) 3 . #2#)) 5 t . #3#)) 1 . #4#) 16 bq-attach-conses 10)
(9 3 0 (26 1 . #0=(3 (1 0 0 2 symbol? 4 1) 7 (3 (5 1 0 1 0 0 1 1 0 2 add-var-info 4 3) 1 1 0 1 0 0 2 traverse-refer 8 2) 3 (1 0 0 2 pair? 4 1) 7 (3 (1 1 0 1 0 0 2 expand-macro 4 2) 6 -2 3 (1 -2 0 2 pair? 4 1) 7 (1 2 0 1 1 0 1 -2 0 2 traverse-list 8 3) 1 2 0 1 1 0 1 -2 0 19 0 3 . #0#) 1 0 0 5 :CONST 0 2 list 8 2)) 16 traverse 10)
(9 3 0 (26 5 1 0 6 -2 30 6 -3 5 quote 0 1 -3 38 7 (1 -2 31 0 9 1 0 (1 0 0 5 :CONST 0 2 list 8 2) 0 2 apply 8 2) 5 ^ 0 1 -3 38 7 (1 -2 31 0 1 1 0 9 (1 -1) 1 (12 0 0 1 1 0 1 0 0 2 traverse-lambda 8 3) 0 2 apply 8 2) 5 if 0 1 -3 38 7 (1 -2 31 0 1 1 0 1 2 0 9 (2 -1) 2 (12 0 0 12 1 0 1 2 0 1 1 0 1 0 0 2 traverse-if 8 5) 0 2 apply 8 2) 5 set! 0 1 -3 38 7 (1 -2 31 0 1 1 0 9 2 1 (12 0 0 1 1 0 1 0 0 5 :SET 0 2 traverse-set! 8 4) 0 2 apply 8 2) 5 def 0 1 -3 38 7 (1 -2 31 0 1 1 0 9 2 1 (3 (1 0 0 2 inline-function? 4 1) 7 (3 (1 1 0 1 0 0 2 register-inline-function 4 2) . #0=(12 0 0 1 1 0 1 0 0 5 :DEF 0 2 traverse-set! 8 4)) 11 . #0#) 0 2 apply 8 2) 5 call/cc 0 1 -3 38 7 (1 -2 31 0 1 1 0 1 2 0 9 1 2 (12 0 0 12 1 0 1 0 0 2 traverse-call/cc 8 3) 0 2 apply 8 2) 5 defmacro 0 1 -3 38 7 (1 -2 31 0 1 1 0 9 (2 -1) 1 (12 0 0 1 2 0 1 1 0 1 0 0 2 traverse-defmacro 8 4) 0 2 apply 8 2) 5 values 0 1 -3 38 7 (1 -2 31 0 1 1 0 1 2 0 9 (0 -1) 2 (12 0 0 12 1 0 1 0 0 2 traverse-values 8 3) 0 2 apply 8 2) 5 receive 0 1 -3 38 7 (1 -2 31 0 1 1 0 1 2 0 9 (2 -1) 2 (12 0 0 12 1 0 1 2 0 1 1 0 1 0 0 2 traverse-receive 8 5) 0 2 apply 8 2) 1 0 31 6 -5 1 0 30 6 -4 3 (1 -4 0 2 direct-invoke? 4 1) 7 (1 2 0 1 1 0 1 -5 0 1 -4 6 -6 31 31 0 1 -4 6 -6 31 30 0 2 traverse-apply-direct 8 5) 3 (1 -4 0 2 inline-function? 4 1) 7 (1 2 0 1 1 0 1 -5 0 1 -4 0 2 traverse-inline-apply 8 4) 1 2 0 1 1 0 1 -5 0 1 -4 0 2 traverse-apply 8 4) 16 traverse-list 10)
(9 2 0 (26 1 3 (1 0 0 1 1 0 2 scope-local-has? 4 2) 6 -2 7 (11 . #0=(1 0 0 5 :REF 0 2 list 8 2)) 3 (1 0 0 1 1 0 2 scope-upper-vars-has? 4 2) 7 (3 (1 0 0 1 1 0 2 register-fref 4 2) . #0#) 11 . #0#) 16 traverse-refer 10)
(9 4 0 (26 7 3 (1 1 0 2 symbol? 4 1) 7 (11 . #5=(3 (1 1 0 1 3 0 2 scope-upper-vars-has? 4 2) 6 -3 3 (1 1 0 1 3 0 2 scope-local-has? 4 2) 6 -2 6 -4 7 (11 . #4=(3 (1 2 0 2 lambda-expression? 4 1) 7 (1 2 6 -4 31 31 6 -5 1 2 6 -4 31 30 6 -4 3 (1 3 0 1 -5 0 1 -4 0 2 prepare-lambda-node 4 3) 6 -6 5 :DEF 0 1 0 38 7 (3 (1 -6 0 1 1 0 1 3 0 2 do-register-set! 4 3) . #0=(3 (1 -5 0 1 -6 0 2 traverse-lambda-exec 4 2) 1 -6 0 1 1 0 1 0 0 2 list 8 3)) 1 -2 6 -7 7 #1=(3 (1 -6 0 1 1 0 1 3 0 2 register-set! 4 3) . #0#) 1 -3 6 -8 7 #1# 29 . #0#) 3 (29 0 1 3 0 1 2 0 2 traverse 4 3) 6 -4 5 :SET 0 1 0 38 7 (1 -2 6 -5 7 #2=(3 (1 -4 0 1 1 0 1 3 0 2 register-set! 4 3) . #3=(1 -4 0 1 1 0 1 0 0 2 list 8 3)) 1 -3 6 -6 7 #2# 11 . #3#) 11 . #3#)) 1 -3 7 (3 (1 1 0 1 3 0 2 register-fref 4 2) . #4#) 11 . #4#)) 3 (1 1 0 5 "`set!` requires symbol, but `%@`" 0 2 compile-error 4 2) . #5#) 16 traverse-set! 10)
(9 5 0 (1 2 7 (1 2 31 7 (3 (5 "malformed if" 0 2 compile-error 4 1) . #1=(1 2 7 (3 (1 4 0 1 3 0 1 2 30 0 2 traverse 4 3) . #0=(0 3 (1 4 0 1 3 0 1 1 0 2 traverse 4 3) 0 3 (29 0 1 3 0 1 0 0 2 traverse 4 3) 0 5 :IF 0 2 list 8 4)) 5 (:VOID) . #0#)) 11 . #1#) 11 . #1#) 16 traverse-if 10)
(9 3 0 (26 4 3 (1 0 0 2 direct-invoke? 4 1) 7 (1 0 6 -2 31 31 6 -3 1 0 6 -2 31 30 6 -2 0 3 (1 -2 0 2 check-parameters 4 1) 38 7 (11 . #1=(5 1 0 3 (1 -2 0 2 length 4 1) 38 7 (11 . #0=(3 (1 1 0 1 -2 0 2 expand-scope 4 2) 6 -4 3 (1 2 0 1 -4 0 1 -3 0 2 traverse-body 4 3) 6 -5 3 (5 128 0 1 -2 30 0 1 -4 0 2 add-var-info 4 3) 1 -5 0 1 -4 0 5 :CONTI-DIRECT 0 2 list 8 3)) 3 (1 -2 0 5 "Illegal parameters, call/cc requires 1 parameter function, but `%@`" 0 2 compile-error 4 2) . #0#)) 3 (5 "Not implemented: rest param for call/cc" 0 2 compile-error 4 1) . #1#) 3 (1 2 0 1 1 0 1 0 0 2 traverse 4 3) 0 5 :CONTI 0 2 list 8 2) 16 traverse-call/cc 10)
(9 3 0 (26 4 1 1 7 (3 (29 0 29 0 2 cons 4 2) . #1=(6 -3 3 (1 0 0 2 check-parameters 4 1) 6 -2 0 1 0 38 7 (3 (1 0 0 2 length 4 1) . #0=(6 -5 3 (1 2 0 1 -2 0 2 create-scope 4 2) 6 -4 1 -3 0 1 -5 0 1 -2 0 1 -4 0 2 create-lambda-node 8 4)) 3 (5 -1 0 5 1 0 3 (1 -2 0 2 length 4 1) 0 33 2 0 2 list 4 2) . #0#)) 29 . #1#) 16 prepare-lambda-node 10)
(9 2 0 (26 2 3 (1 0 0 2 lambda-body-node-get 4 1) 6 -3 3 (1 0 0 2 lambda-scope-get 4 1) 6 -2 1 1 7 (3 (3 (5 t 0 1 -2 0 1 1 0 2 traverse-body 4 3) 0 1 -3 0 2 copy-pair! 4 2) . #0=(1 0 17)) 11 . #0#) 16 traverse-lambda-exec 10)
(9 3 0 (1 1 0 3 (1 2 0 1 1 0 1 0 0 2 prepare-lambda-node 4 3) 0 2 traverse-lambda-exec 8 2) 16 traverse-lambda 10)
(9 3 0 (1 0 0 1 1 0 1 2 0 9 1 2 (26 1 1 0 31 6 -2 7 (29 . #0=(0 12 1 0 1 0 30 0 2 traverse 8 3)) 12 0 . #0#) 0 2 maplist 8 2) 16 traverse-body 10)
(9 2 0 (26 2 3 (1 1 0 2 scope-block-top-get 4 1) 6 -3 3 (1 0 0 2 scope-upper-block-top-get 4 1) 6 -2 1 -3 0 1 -2 38 17) 16 upper-scope-is? 10)
(9 3 0 (26 3 3 (1 0 0 1 1 0 2 var-is-set? 4 2) 6 -2 7 (3 (1 -2 0 2 single? 4 1) 7 (3 (1 -2 30 0 2 lambda-node? 4 1) 7 (3 (1 0 0 1 1 0 2 scope-local-has? 4 2) 7 (3 (5 16 0 1 0 0 1 1 0 2 var-has-attr? 4 3) 7 (5 32 . #0=(17)) 5 16 . #0#) 1 2 7 (3 (1 0 0 1 1 0 2 get-var-info 4 2) 28 -3 2 1 -4 7 (3 (1 -4 0 1 1 0 2 upper-scope-is? 4 2) . #1=(7 (5 8 . #0#) 5 64 . #0#)) 3 (1 1 0 2 scope-block-top-get 4 1) 0 3 (1 -2 30 0 2 lambda-scope-get 4 1) 38 . #1#) 5 64 . #0#) 5 . #2=(64 . #0#)) 5 . #2#) 5 . #2#) 16 detect-call-type 10)
(9 4 0 (26 2 3 (1 0 0 2 symbol? 4 1) 7 (3 (1 2 0 1 0 0 2 traverse-refer 4 2) . #0=(6 -3 3 (1 3 0 1 2 0 1 0 0 2 detect-call-type 4 3) 6 -2 3 (1 -2 0 1 0 0 1 2 0 2 add-var-info 4 3) 3 (1 1 0 1 2 0 9 1 1 (29 0 12 0 0 1 0 0 2 traverse 8 3) 0 2 map 4 2) 0 1 -3 0 1 -2 0 5 :APPLY 0 2 list 8 4)) 3 (29 0 1 2 0 1 0 0 2 traverse 4 3) . #0#) 16 traverse-apply 10)
(9 4 0 (26 1 3 (1 0 0 2 get-inline-function-body 4 1) 6 -2 1 3 0 1 2 0 3 (1 1 0 1 -2 0 2 list* 4 2) 0 2 traverse 8 3) 16 traverse-inline-apply 10)
(9 5 0 (26 6 . #1=(3 (1 0 0 2 check-parameters 4 1) 6 -2 1 0 0 1 -2 38 7 (5 0 . #2=(0 3 (1 -2 0 2 length 4 1) 0 33 2 6 -4 3 (1 2 0 2 length 4 1) 6 -3 1 -2 0 1 0 38 6 -5 7 (1 -4 0 1 -3 38 7 (3 (1 2 0 1 3 0 9 1 1 (29 0 12 0 0 1 0 0 2 traverse 8 3) 0 2 map 4 2) 6 -5 3 (1 3 0 1 -2 0 2 expand-scope 4 2) 6 -6 3 (1 4 0 1 -6 0 1 1 0 2 traverse-body 4 3) 6 -7 0 1 -5 0 1 -6 0 5 :INVOKE 0 2 list 8 4) 1 -4 0 1 -3 0 39 2 7 (5 "few" . #0=(6 -5 1 -4 0 1 -3 0 1 -5 0 5 "Too %s arguments, %@ for %@" 0 2 compile-error 8 4)) 5 "many" . #0#) 1 -4 0 1 -3 0 39 2 7 (1 4 0 1 3 0 1 2 0 1 1 0 1 -2 0 19 0 5 . #1#) 1 -4 0 1 -3 0 41 2 7 (1 4 0 1 3 0 3 (3 (3 (3 (3 (1 2 0 1 -4 0 2 drop 4 2) 0 5 list 0 2 list* 4 2) 0 2 list 4 1) 0 3 (1 2 0 1 -4 0 2 take 4 2) 0 2 append 4 2) 0 3 (1 1 0 1 -2 0 5 ^ 0 2 list* 4 3) 0 2 list* 4 2) 0 2 traverse 8 3) 1 4 0 1 3 0 3 (5 (nil) 0 1 2 0 2 append 4 2) 0 1 1 0 1 -2 0 19 0 5 . #1#)) 5 1 . #2#)) 16 traverse-apply-direct 10)
(9 4 0 (26 4 3 (1 1 0 2 check-parameters 4 1) 6 -2 3 (1 3 0 1 -2 0 2 create-scope 4 2) 6 -3 3 (5 t 0 1 -3 0 1 2 0 2 traverse-body 4 3) 6 -4 1 -2 0 1 1 38 7 (3 (1 1 0 2 length 4 1) . #0=(6 -5 1 -4 0 1 -5 0 1 0 0 1 -3 0 5 :MACRO 0 2 list 8 5)) 3 (5 -1 0 5 1 0 3 (1 -2 0 2 length 4 1) 0 33 2 0 2 list 4 2) . #0#) 16 traverse-defmacro 10)
(9 3 0 (3 (1 0 0 1 1 0 1 2 0 1 0 0 9 1 3 (12 0 31 7 (12 1 . #0=(0 12 2 0 1 0 30 0 2 traverse 8 3)) 29 . #0#) 0 2 maplist 4 2) 0 5 :VALS 0 2 list 8 2) 16 traverse-values 10)
(9 5 0 (26 5 3 (1 0 0 2 check-parameters 4 1) 6 -2 3 (29 0 1 3 0 1 1 0 2 traverse 4 3) 6 -4 1 -2 0 1 0 38 7 (3 (1 0 0 2 length 4 1) . #0=(6 -3 3 (1 3 0 1 -2 0 2 expand-scope 4 2) 6 -5 3 (1 4 0 1 -5 0 1 2 0 2 traverse-body 4 3) 6 -6 0 1 -4 0 1 -3 0 1 -5 0 5 :RECV 0 2 list 8 5)) 3 (5 -1 0 5 1 0 3 (1 -2 0 2 length 4 1) 0 33 2 0 2 list 4 2) . #0#) 16 traverse-receive 10)
(9 1 0 (26 3 3 (1 0 0 2 list? 4 1) 7 (11 . #6=(3 (1 0 0 9 1 0 (5 (&rest &body) 0 1 0 0 2 member 8 2) 0 2 position-if 4 2) 6 -2 7 (3 (1 0 0 5 1 0 1 -2 0 32 2 0 2 drop 4 2) 6 -4 3 (1 0 0 1 -2 0 2 take 4 2) 6 -3 3 (1 -4 0 2 single? 4 1) 7 (11 . #4=(3 (1 -4 0 1 -3 0 2 append! 4 2) . #5=(6 -2 3 (1 0 0 9 1 0 (26 1 3 (1 0 0 2 symbol? 4 1) 6 -2 7 (29 . #0=(17)) 5 t . #0#) 0 2 any? 4 2) 6 -3 7 (3 (1 -3 30 0 5 "parameter must be symbol, but `%@`" 0 2 compile-error 4 2) . #3=(29 6 -3 1 -2 6 -4 . #1=(7 (3 (1 -4 31 0 1 -4 30 0 2 member 4 2) 7 (3 (1 -4 30 0 5 "Duplicated parameter `%@`" 0 2 compile-error 4 2) . #2=(1 -4 31 0 19 2 1 1 -4 . #1#)) 11 . #2#) 11 1 -2 17))) 11 . #3#))) 3 (1 -4 0 5 "&rest requires only 1 name, but %@" 0 2 compile-error 4 2) . #4#) 1 0 . #5#)) 3 (1 0 0 5 "parameters must be list, but %@" 0 2 compile-error 4 2) . #6#) 16 check-parameters 10)
(9 1 0 (3 (1 0 0 2 pair? 4 1) 7 (1 0 30 0 5 ^ 38 . #0=(17)) 29 . #0#) 16 direct-invoke? 10)
(9 2 0 (26 4 1 0 30 6 -2 3 (1 -2 0 2 symbol? 4 1) 6 -3 7 (29 . #1=(6 -3 7 #0=(1 0 17) 3 (1 -2 0 1 1 0 2 scope-local-has? 4 2) 6 -4 7 #0# 3 (1 -2 0 1 1 0 2 scope-upper-vars-has? 4 2) 6 -5 7 #0# 1 0 0 2 macroexpand 8 1)) 5 t . #1#) 16 expand-macro 10)
(9 1 0 (26 1 . #0=(3 (1 0 0 2 macroexpand-1 4 1) 6 -2 3 (1 0 0 1 -2 0 2 equal? 4 2) 7 (1 0 17) 1 -2 0 19 0 1 . #0#)) 16 macroexpand 10)
(9 2 0 (5 0 0 1 1 0 29 0 5 t 0 29 0 3 (1 0 0 9 1 0 (5 0 0 1 0 0 2 cons 8 2) 0 2 map 4 2) 0 2 vector 8 6) 16 create-scope 10)
(9 2 0 (1 1 0 3 (1 0 0 9 1 0 (5 0 0 1 0 0 2 cons 8 2) 0 2 map 4 2) 0 2 expand-scope2 8 2) 16 expand-scope 10)
(9 2 0 (5 0 0 1 1 0 29 0 29 0 29 0 1 0 0 2 vector 8 6) 16 expand-scope2 10)
(9 1 0 (5 0 0 1 0 0 2 vector-get 8 2) 16 scope-local-infos 10)
(9 1 0 (5 1 0 1 0 0 2 vector-get 8 2) 16 scope-frees 10)
(9 1 0 (5 2 0 1 0 0 2 vector-get 8 2) 16 scope-block-top? 10)
(9 1 0 (5 3 0 1 0 0 2 vector-get 8 2) 16 scope-sets 10)
(9 1 0 (5 4 0 1 0 0 2 vector-get 8 2) 16 scope-outer-scope 10)
(9 1 0 (5 5 0 1 0 0 2 vector-get 8 2) 16 scope-work-size 10)
(9 2 0 (1 1 0 5 1 0 1 0 0 2 vector-set! 8 3) 16 scope-frees-set! 10)
(9 2 0 (1 1 0 5 3 0 1 0 0 2 vector-set! 8 3) 16 scope-sets-set! 10)
(9 2 0 (1 1 0 5 5 0 1 0 0 2 vector-set! 8 3) 16 scope-work-size-set! 10)
(9 2 0 (1 1 0 5 4 0 1 0 0 2 vector-set! 8 3) 16 scope-outer-scope-set! 10)
(9 1 0 (26 3 29 6 -2 5 0 6 -4 3 (1 0 0 2 scope-outer-scope 4 1) 6 -3 . #0=(3 (1 -3 0 2 scope-block-top? 4 1) 7 (1 -4 17) 3 (3 (1 -3 0 2 scope-local-infos 4 1) 0 2 length 4 1) 0 1 -4 0 32 2 0 3 (1 -3 0 2 scope-outer-scope 4 1) 0 19 1 2 . #0#)) 16 scope-upper-work-size 10)
(9 2 0 (26 3 29 6 -2 1 0 6 -3 . #1=(3 (1 1 0 1 -3 0 2 scope-local-only-has? 4 2) 6 -4 7 (3 (1 -3 0 2 scope-block-top? 4 1) 7 (1 -4 . #0=(17)) 3 (1 -3 0 2 scope-upper-work-size 4 1) 0 1 -4 0 32 2 0 5 -2 0 33 2 . #0#) 3 (1 -3 0 2 scope-block-top? 4 1) 7 (11 . #0#) 3 (1 -3 0 2 scope-outer-scope 4 1) 0 19 1 1 . #1#)) 16 scope-local-has? 10)
(9 2 0 (3 (1 0 0 2 scope-local-infos 4 1) 0 1 1 0 9 1 1 (12 0 0 1 0 30 38 17) 0 2 position-if 8 2) 16 scope-local-only-has? 10)
(9 1 0 (26 1 3 (1 0 0 2 scope-local-infos 4 1) 6 -2 30 30 0 1 0 0 2 scope-local-has? 8 2) 16 get-scope-local-offset 10)
(9 1 0 (26 2 29 6 -2 1 0 6 -3 . #0=(3 (1 -3 0 2 scope-block-top? 4 1) 7 (1 -3 17) 3 (1 -3 0 2 scope-outer-scope 4 1) 0 19 1 1 . #0#)) 16 scope-block-top-get 10)
(9 1 0 (3 (3 (1 0 0 2 scope-block-top-get 4 1) 0 2 scope-outer-scope 4 1) 0 2 scope-block-top-get 8 1) 16 scope-upper-block-top-get 10)
(9 2 0 (3 (1 1 0 2 scope-block-top-get 4 1) 0 3 (1 0 0 2 scope-block-top-get 4 1) 38 17) 16 same-scope-block? 10)
(9 2 0 (3 (3 (1 0 0 2 scope-block-top-get 4 1) 0 2 scope-frees 4 1) 0 1 1 0 2 position 8 2) 16 scope-frees-has? 10)
(9 2 0 (26 3 29 6 -2 3 (1 0 0 2 scope-block-top-get 4 1) 6 -3 . #0=(3 (1 -3 0 2 scope-outer-scope 4 1) 6 -4 7 (3 (1 1 0 1 -4 0 2 scope-local-only-has? 4 2) 7 (1 -4 . #1=(17)) 1 -4 0 19 1 1 . #0#) 29 . #1#)) 16 scope-upper-vars-has? 10)
(9 1 0 (26 4 29 6 -2 5 0 6 -4 1 0 6 -3 . #0=(3 (3 (1 -3 0 2 scope-local-infos 4 1) 0 2 length 4 1) 0 1 -4 0 32 2 6 -5 3 (1 -3 0 2 scope-block-top? 4 1) 7 (1 -5 17) 1 -5 0 3 (1 -3 0 2 scope-outer-scope 4 1) 0 19 1 2 . #0#)) 16 scope-local-count 10)
(9 1 0 (1 0 31 17) 16 var-info-flag-get 10)
(9 2 0 (1 1 0 1 0 0 2 set-cdr! 8 2) 16 var-info-flag-set! 10)
(9 2 0 (26 3 3 (1 1 0 2 symbol? 4 1) 7 (29 6 -2 1 0 6 -3 . #0=(7 (3 (1 1 0 1 -3 0 2 scope-local-only-has? 4 2) 6 -4 7 (1 -3 0 3 (1 -4 0 3 (1 -3 0 2 scope-local-infos 4 1) 0 2 elt 4 2) 0 27 2 . #1=(17)) 3 (1 -3 0 2 scope-outer-scope 4 1) 0 19 1 1 1 -3 . #0#) 29 0 29 0 27 2 . #1#)) 29 0 29 0 27 2 . #1#) 16 get-var-info 10)
(9 3 0 (26 2 3 (1 1 0 1 0 0 2 get-var-info 4 2) 28 -2 2 1 -2 7 (3 (3 (1 2 0 3 (1 -2 0 2 var-info-flag-get 4 1) 0 2 logior 4 2) 0 1 -2 0 2 var-info-flag-set! 4 2) 1 -2 . #0=(17)) 11 . #0#) 16 add-var-info 10)
(9 3 0 (26 2 3 (1 1 0 1 0 0 2 get-var-info 4 2) 28 -2 2 1 -2 7 (3 (1 2 0 3 (1 -2 0 2 var-info-flag-get 4 1) 0 2 bit? 4 2) 7 (1 -2 . #0=(17)) 29 . #0#) 29 . #0#) 16 var-has-attr? 10)
(9 2 0 (26 3 29 6 -2 1 0 6 -3 . #0=(7 (3 (3 (1 -3 0 2 scope-sets 4 1) 0 1 1 0 2 assoc 4 2) 6 -4 7 (1 -4 31 . #1=(17)) 3 (1 -3 0 2 scope-outer-scope 4 1) 0 19 1 1 1 -3 . #0#) 11 . #1#)) 16 var-is-set? 10)
(9 2 0 (26 4 3 (5 2 0 1 1 0 1 0 0 2 add-var-info 4 3) 29 6 -2 1 0 6 -3 . #0=(7 (3 (1 1 0 1 -3 0 2 scope-local-has? 4 2) 7 (11 . #2=(17)) 3 (1 -3 0 2 scope-block-top-get 4 1) 6 -4 3 (1 -4 0 2 scope-frees 4 1) 6 -5 3 (1 -5 0 1 1 0 2 member 4 2) 7 (11 . #1=(3 (1 -4 0 2 scope-outer-scope 4 1) 0 19 1 1 1 -3 . #0#)) 3 (3 (1 -5 0 1 1 0 2 cons 4 2) 0 1 -4 0 2 scope-frees-set! 4 2) . #1#) 11 . #2#)) 16 register-fref 10)
(9 3 0 (26 3 3 (5 4 0 1 1 0 1 0 0 2 add-var-info 4 3) 3 (1 1 0 1 0 0 2 get-var-info 4 2) 28 -2 2 1 -2 7 (3 (1 0 0 1 -3 0 2 same-scope-block? 4 2) 7 (1 2 . #0=(6 -4 0 1 1 0 1 -3 0 2 do-register-set! 8 3)) 29 . #0#) 11 17) 16 register-set! 10)
(9 3 0 (26 2 3 (1 0 0 2 scope-sets 4 1) 6 -2 3 (1 -2 0 1 1 0 2 assoc 4 2) 6 -3 7 (3 (1 -3 31 0 1 2 0 2 cons 4 2) 0 1 -3 0 2 set-cdr! 8 2) 3 (1 -2 0 3 (1 2 0 2 list 4 1) 0 1 1 0 2 acons 4 3) 0 1 0 0 2 scope-sets-set! 8 2) 16 do-register-set! 10)
(9 1 0 (26 3 29 6 -2 5 0 6 -4 1 0 6 -3 . #0=(3 (1 -3 0 2 scope-block-top? 4 1) 7 (3 (1 -3 0 2 scope-work-size 4 1) 0 1 -4 0 41 2 7 (1 -4 0 1 -3 0 2 scope-work-size-set! 8 2) 11 17) 3 (3 (1 -3 0 2 scope-local-infos 4 1) 0 2 length 4 1) 0 1 -4 0 32 2 0 3 (1 -3 0 2 scope-outer-scope 4 1) 0 19 1 2 . #0#)) 16 calc-scope-work-size 10)
(9 4 0 (1 3 0 1 2 0 3 (29 0 29 0 2 cons 4 2) 0 1 0 0 5 :LAMBDA 0 2 list 8 5) 16 create-lambda-node 10)
(9 1 0 (5 :LAMBDA 0 1 0 30 38 17) 16 lambda-node? 10)
(2 cadr 16 lambda-scope-get 10)
(2 caddr 16 lambda-body-slot-get 10)
(2 cadddr 16 lambda-varnum-get 10)
(2 caddddr 16 lambda-body-node-get 10)
(9 2 0 (1 1 0 1 0 31 0 2 set-car! 8 2) 16 lambda-scope-set! 10)
(9 3 0 (26 2 1 0 6 -2 30 6 -3 5 :CONST 0 1 -3 38 7 (1 -2 31 0 1 2 0 9 1 1 (12 0 0 1 0 0 5 5 0 2 list* 8 3) 0 2 apply 8 2) 5 :VOID 0 1 -3 38 7 (1 -2 31 0 1 2 0 9 0 1 (12 0 0 5 11 0 2 list* 8 2) 0 2 apply 8 2) 5 :REF 0 1 -3 38 7 (1 -2 31 0 1 1 0 1 2 0 9 1 2 (26 3 3 (1 0 0 12 1 0 2 scope-local-has? 4 2) 6 -2 7 (1 -2 6 -3 0 5 1 0 27 2 . #2=(28 -2 2 5 2 0 1 -2 38 6 -4 7 (12 . #1=(0 . #0=(0 1 -3 0 1 -2 0 2 list* 8 3))) 3 (1 0 0 12 1 0 2 var-is-set? 4 2) 7 (3 (12 0 0 5 21 0 2 list* 4 2) . #0#) 12 . #1#)) 3 (1 0 0 12 1 0 2 scope-frees-has? 4 2) 6 -3 7 (1 -3 6 -4 0 5 12 0 27 2 . #2#) 1 0 0 5 2 0 27 2 . #2#) 0 2 apply 8 2) 5 :SET 0 1 -3 38 7 (1 -2 31 0 1 1 0 1 2 0 9 2 2 (12 0 0 12 1 0 1 1 0 1 0 0 2 compile-set! 8 4) 0 2 apply 8 2) 5 :DEF 0 1 -3 38 7 (1 -2 31 0 1 1 0 1 2 0 9 2 2 (3 (12 0 0 1 0 0 5 16 0 2 list* 4 3) 0 12 1 0 1 1 0 2 compile-recur 8 3) 0 2 apply 8 2) 5 :IF 0 1 -3 38 7 (1 -2 31 0 1 1 0 1 2 0 9 3 2 (3 (3 (12 0 0 12 1 0 1 2 0 2 compile-recur 4 3) 0 3 (12 0 0 12 1 0 1 1 0 2 compile-recur 4 3) 0 5 7 0 2 list* 4 3) 0 12 1 0 1 0 0 2 compile-recur 8 3) 0 2 apply 8 2) 5 :LAMBDA 0 1 -3 38 7 (1 -2 31 0 1 1 0 1 2 0 9 4 2 (26 2 3 (1 0 0 2 scope-frees 4 1) 6 -2 3 (3 (3 (5 17 0 2 list 4 1) 0 1 0 0 1 3 0 3 (1 0 0 2 scope-local-infos 4 1) 0 2 compile-body 4 4) 0 1 1 0 2 copy-pair! 4 2) 3 (1 0 0 2 scope-work-size 4 1) 6 -3 3 (12 0 0 5 0 0 1 -3 38 7 (1 1 . #3=(0 3 (1 -2 0 2 length 4 1) 0 1 2 0 5 9 0 2 list* 4 5)) 3 (1 1 0 1 -3 0 5 26 0 2 list* 4 3) . #3#) 0 12 1 0 1 -2 0 2 collect-free 8 3) 0 2 apply 8 2) 5 :INVOKE 0 1 -3 38 7 (1 -2 31 0 1 2 0 1 1 0 9 3 2 (26 3 3 (1 0 0 2 scope-frees 4 1) 6 -4 3 (1 0 0 2 scope-local-infos 4 1) 6 -3 12 1 6 -2 5 17 0 1 -2 30 38 6 -2 3 (1 0 0 2 calc-scope-work-size 4 1) 3 (12 1 0 1 0 0 1 2 0 1 -3 0 2 compile-body 4 4) 0 1 0 0 12 0 0 1 1 0 2 compile-args-for-local 8 4) 0 2 apply 8 2) 5 :MACRO 0 1 -3 38 7 (1 -2 31 0 1 1 0 1 2 0 9 4 2 (26 4 3 (3 (5 17 0 2 list 4 1) 0 1 0 0 1 3 0 3 (1 0 0 2 scope-local-infos 4 1) 0 2 compile-body 4 4) 6 -4 3 (1 0 0 2 scope-frees 4 1) 6 -3 3 (1 0 0 2 scope-local-infos 4 1) 6 -2 3 (1 0 0 2 scope-work-size 4 1) 6 -5 3 (12 0 0 5 0 0 1 -5 38 7 (1 -4 . #4=(0 3 (1 -3 0 2 length 4 1) 0 1 2 0 1 1 0 5 25 0 2 list* 4 6)) 3 (1 -4 0 1 -5 0 5 26 0 2 list* 4 3) . #4#) 0 12 1 0 1 -3 0 2 collect-free 8 3) 0 2 apply 8 2) 5 :APPLY 0 1 -3 38 7 (1 -2 31 0 1 1 0 1 2 0 9 3 2 (12 0 0 12 1 0 1 0 0 1 2 0 1 1 0 2 compile-apply 8 5) 0 2 apply 8 2) 5 :CONTI 0 1 -3 38 7 (1 -2 31 0 1 1 0 1 2 0 9 1 2 (12 0 0 12 1 0 1 0 0 2 compile-conti 8 3) 0 2 apply 8 2) 5 :CONTI-DIRECT 0 1 -3 38 7 (1 -2 31 0 1 1 0 1 2 0 9 2 2 (3 (1 0 0 2 calc-scope-work-size 4 1) 12 0 0 12 1 0 1 1 0 1 0 0 2 compile-conti-direct 8 4) 0 2 apply 8 2) 5 :VALS 0 1 -3 38 7 (1 -2 31 0 1 1 0 1 2 0 9 1 2 (26 1 3 (1 0 0 2 length 4 1) 6 -2 5 0 0 1 -2 38 7 (12 0 0 5 11 0 2 list* 8 2) 3 (12 0 0 1 -2 0 5 27 0 2 list* 4 3) 0 12 1 0 1 0 0 2 compile-args 8 3) 0 2 apply 8 2) 5 :RECV 0 1 -3 38 7 (1 -2 31 0 1 2 0 1 1 0 9 4 2 (26 2 3 (1 0 0 2 calc-scope-work-size 4 1) 3 (1 0 0 2 scope-frees 4 1) 6 -3 12 1 6 -2 5 17 0 1 -2 30 38 6 -2 3 (3 (12 1 0 1 0 0 1 3 0 3 (1 0 0 2 scope-local-infos 4 1) 0 2 compile-body 4 4) 0 1 1 0 3 (1 0 0 2 get-scope-local-offset 4 1) 0 5 28 0 2 list* 4 4) 0 12 0 0 1 2 0 2 compile-recur 8 3) 0 2 apply 8 2) 1 0 0 5 "Unknown [%@]" 0 2 compile-error 8 2) 16 compile-recur 10)
(9 2 0 (26 4 3 (1 1 0 1 0 0 2 get-var-info 4 2) 28 -2 2 1 -2 7 (3 (1 -2 0 2 var-info-flag-get 4 1) 6 -4 3 (5 97 0 1 -4 0 2 bit? 4 2) 6 -5 7 (29 . #0=(17)) 5 16 0 1 -4 0 2 bit? 8 2) 29 . #0#) 16 can-eliminate-lambda-node? 10)
(9 2 0 (26 2 1 0 6 -2 30 6 -3 5 :LAMBDA 0 1 -3 38 7 (1 -2 31 0 1 1 0 9 4 1 (12 0 0 1 0 0 2 scope-outer-scope-set! 8 2) 0 2 apply 8 2) 5 :INVOKE 0 1 -3 38 7 (1 -2 31 0 1 1 0 9 3 1 (3 (12 0 0 1 1 0 2 replace-body-scope! 4 2) 12 0 0 1 0 0 2 scope-outer-scope-set! 8 2) 0 2 apply 8 2) 5 :RECV 0 1 -3 38 7 (1 -2 31 0 1 1 0 9 4 1 (3 (12 0 0 1 2 0 2 replace-outer-scope! 4 2) 12 0 0 1 0 0 2 scope-outer-scope-set! 8 2) 0 2 apply 8 2) 5 :SET 0 1 -3 38 7 (1 -2 31 0 1 1 0 9 2 1 (12 0 0 1 1 0 2 replace-outer-scope! 8 2) 0 2 apply 8 2) 5 :DEF 0 1 -3 38 7 (1 -2 31 0 1 1 0 9 2 1 (12 0 0 1 1 0 2 replace-outer-scope! 8 2) 0 2 apply 8 2) 5 :IF 0 1 -3 38 7 (1 -2 31 0 1 1 0 9 3 1 (3 (12 0 0 1 0 0 2 replace-outer-scope! 4 2) 3 (12 0 0 1 1 0 2 replace-outer-scope! 4 2) 12 0 0 1 2 0 2 replace-outer-scope! 8 2) 0 2 apply 8 2) 5 :APPLY 0 1 -3 38 7 (1 -2 31 0 1 1 0 9 3 1 (3 (12 0 0 1 1 0 2 replace-outer-scope! 4 2) 12 0 0 1 2 0 2 replace-body-scope! 8 2) 0 2 apply 8 2) 5 :CONTI 0 1 -3 38 7 (1 -2 31 0 1 1 0 9 1 1 (12 0 0 1 0 0 2 replace-outer-scope! 8 2) 0 2 apply 8 2) 5 :CONTI-DIRECT 0 1 -3 38 7 (1 -2 31 0 1 1 0 9 2 1 (12 0 0 1 1 0 2 replace-body-scope! 8 2) 0 2 apply 8 2) 5 :VALS 0 1 -3 38 7 (1 -2 31 0 1 1 0 9 1 1 (12 0 0 1 0 0 2 replace-body-scope! 8 2) 0 2 apply 8 2) 29 17) 16 replace-outer-scope! 10)
(9 2 0 (3 (1 1 0 1 0 0 2 lambda-scope-set! 4 2) 1 1 0 3 (1 0 0 2 lambda-body-node-get 4 1) 0 2 replace-body-scope! 8 2) 16 replace-lambda-scope! 10)
(9 2 0 (26 3 29 6 -2 1 0 6 -3 . #0=(3 (1 -3 0 2 pair? 4 1) 7 (1 -3 30 6 -4 3 (1 1 0 1 -4 0 2 replace-outer-scope! 4 2) 1 -3 31 0 19 1 1 . #0#) 11 17)) 16 replace-body-scope! 10)
(9 4 0 (3 (1 3 0 3 (1 1 0 2 length 4 1) 0 1 0 0 2 list* 4 3) 0 1 2 0 1 1 0 2 compile-args 8 3) 16 compile-embed-op 10)
(9 4 0 (3 (3 (1 3 0 1 0 0 2 list* 4 2) 0 1 2 0 1 1 30 0 2 compile-recur 4 3) 0 1 2 0 1 1 31 0 2 compile-args 8 3) 16 compile-embed-op-1 10)
(3 (2 table 4 0) 16 *compiler-embed-funcs* 10)
(9 2 0 (1 1 0 1 0 0 2 *compiler-embed-funcs* 0 2 table-put! 8 3) 16 register-embed-func 10)
(9 1 0 (1 0 0 2 *compiler-embed-funcs* 0 2 table-get 8 2) 16 compiler-embed-func? 10)
(9 5 0 (26 5 3 (1 3 0 1 0 0 2 apply-func-can-be-loop? 4 2) 6 -2 7 (3 (5 16 0 1 2 0 2 bit? 4 2) 7 (3 (1 0 6 -3 31 30 0 1 3 0 2 can-eliminate-lambda-node? 4 2) 7 (1 4 0 1 3 0 1 1 0 1 0 0 1 -2 0 2 compile-apply-loop 8 5) 1 . #3=(-2 7 (3 (5 8 0 1 2 0 2 bit? 4 2) 7 (1 3 0 1 1 0 1 0 0 1 -2 0 2 compile-apply-self-recur 8 4) 1 . #2=(0 30 0 5 :REF 38 7 (3 (1 0 6 -3 31 30 0 1 3 0 2 get-var-info 4 2) 28 -3 2 1 -3 7 (3 (1 -3 0 2 var-info-flag-get 4 1) 6 -5 3 (5 128 0 1 -5 0 2 bit? 4 2) 7 (3 (5 5 0 1 -5 0 2 bit? 4 2) 6 -6 7 (29 . #1=(6 -3 7 (1 3 0 1 1 0 1 0 0 2 compile-apply-conti 8 3) 5 :REF 0 1 0 30 38 7 (1 0 6 -4 31 30 6 -4 3 (1 -4 0 1 3 0 2 scope-local-has? 4 2) 6 -5 7 (29 . #0=(6 -4 7 (1 4 0 1 3 0 1 1 0 1 -4 8 3) 1 4 0 1 3 0 1 1 0 1 0 0 2 compile-apply-normal 8 4)) 3 (1 -4 0 1 3 0 2 scope-frees-has? 4 2) 6 -5 7 (29 . #0#) 3 (1 -4 0 2 compiler-embed-func? 4 1) . #0#) 29 . #0#)) 5 t . #1#) 29 . #1#) 29 . #1#) 29 . #1#)) 1 . #2#)) 1 . #3#) 1 . #3#) 16 compile-apply 10)
(9 3 0 (26 2 3 (1 1 0 2 length 4 1) 6 -2 5 1 0 1 -2 0 41 2 7 (3 (1 0 6 -3 31 30 0 5 "Too many argument for `%@`" 0 2 compile-error 4 2) . #0=(3 (3 (5 24 0 2 list 4 1) 0 1 2 0 1 0 0 2 compile-recur 4 3) 6 -3 5 0 0 1 -2 38 7 (1 -3 0 5 0 0 5 29 0 2 list* 8 3) 1 -3 0 1 2 0 1 1 0 2 compile-args 8 3)) 11 . #0#) 16 compile-apply-conti 10)
(9 4 0 (26 3 3 (1 1 0 2 length 4 1) 6 -3 1 3 6 -2 5 17 0 1 -2 30 38 6 -2 3 (3 (1 -2 7 (3 (1 -3 0 5 8 0 2 list 4 2) . #0=(0 1 2 0 1 0 0 2 compile-recur 4 3)) 3 (1 -3 0 5 4 0 2 list 4 2) . #0#) 0 1 2 0 1 1 0 2 compile-args 4 3) 6 -4 1 -2 7 (1 -4 17) 1 3 0 1 -4 0 5 3 0 2 list* 8 3) 16 compile-apply-normal 10)
(9 5 0 (26 8 3 (1 0 0 2 lambda-scope-get 4 1) 6 -2 3 (1 -2 0 2 scope-local-infos 4 1) 6 -3 3 (1 2 0 2 length 4 1) 6 -8 1 4 6 -4 5 17 0 1 -4 30 38 6 -7 3 (1 0 0 2 lambda-body-slot-get 4 1) 6 -6 3 (1 0 0 2 lambda-varnum-get 4 1) 6 -5 3 (1 3 0 1 -3 0 2 expand-scope2 4 2) 6 -4 3 (1 -5 0 2 pair? 4 1) 7 (3 (5 "Not implemented: rest param for loop" 0 2 compile-error 4 1) . #1=(1 -5 0 1 -8 38 7 (11 . #0=(3 (1 -4 0 1 0 0 2 replace-lambda-scope! 4 2) 3 (3 (1 4 0 1 -4 0 3 (1 0 0 2 lambda-body-node-get 4 1) 0 1 -3 0 2 compile-body 4 4) 0 1 -6 0 2 copy-pair! 4 2) 3 (1 -4 0 2 calc-scope-work-size 4 1) 1 -6 0 1 -4 0 1 3 0 1 2 0 2 compile-args-for-local 8 4)) 3 (1 -8 0 1 -5 0 1 1 6 -9 31 30 0 5 "Illegal argnum, `%@` requires %@, but %@" 0 2 compile-error 4 4) . #0#)) 11 . #1#) 16 compile-apply-loop 10)
(9 4 0 (26 4 3 (1 1 6 -2 31 30 0 1 3 0 2 can-eliminate-lambda-node? 4 2) 7 (3 (3 (1 0 0 2 lambda-scope-get 4 1) 0 2 scope-upper-work-size 4 1) . #2=(6 -4 3 (1 0 0 2 lambda-varnum-get 4 1) 6 -3 3 (1 2 0 2 length 4 1) 6 -2 3 (1 -3 0 2 pair? 4 1) 7 (3 (5 "Not implemented: rest param for loop" 0 2 compile-error 4 1) . #1=(1 -3 0 1 -2 38 7 (11 . #0=(3 (3 (1 0 0 2 lambda-body-slot-get 4 1) 0 1 -2 0 1 -4 0 5 19 0 2 list* 4 4) 0 1 3 0 1 2 0 2 compile-args 8 3)) 3 (1 -2 0 1 -3 0 1 1 6 -5 31 30 0 5 "Illegal argnum, `%@` requires %@, but %@" 0 2 compile-error 4 4) . #0#)) 11 . #1#)) 5 0 . #2#) 16 compile-apply-self-recur 10)
(9 4 0 (26 3 3 (1 1 0 2 lambda-node? 4 1) 7 (3 (1 0 0 1 2 0 2 can-eliminate-lambda-node? 4 2) 7 (1 3 17) 3 . #1=((1 0 0 1 2 0 2 scope-local-has? 4 2) 6 -2 7 (1 -2 6 -3 0 5 13 0 27 2 . #0=(28 -2 2 3 (1 3 0 1 -3 0 1 -2 0 2 list* 4 3) 0 1 2 0 1 1 0 2 compile-recur 8 3)) 3 (1 0 0 1 2 0 2 scope-frees-has? 4 2) 6 -3 7 (1 -3 6 -4 0 5 14 0 27 2 . #0#) 1 0 0 5 15 0 27 2 . #0#)) 3 . #1#) 16 compile-set! 10)
(9 3 0 (26 2 1 2 6 -2 5 17 0 1 -2 30 38 6 -2 3 (3 (1 -2 7 (3 (5 1 0 5 8 0 2 list 4 2) . #0=(0 1 1 0 1 0 0 2 compile-recur 4 3)) 3 (5 1 0 5 4 0 2 list 4 2) . #0#) 0 5 0 0 1 -2 0 5 22 0 2 list* 4 4) 6 -3 1 -2 7 (1 -3 17) 1 2 0 1 -3 0 5 3 0 2 list* 8 3) 16 compile-conti 10)
(9 4 0 (26 6 3 (1 0 0 2 scope-local-infos 4 1) 6 -2 3 (1 -2 6 -3 30 30 0 1 0 0 2 get-var-info 4 2) 28 -3 2 3 (1 -3 0 2 var-info-flag-get 4 1) 6 -4 1 3 6 -3 5 17 0 1 -3 30 38 6 -3 3 (5 5 0 1 -4 0 2 bit? 4 2) 7 (3 (3 (1 -3 7 (1 3 . #0=(0 1 0 0 1 1 0 1 -2 0 2 compile-body 4 4)) 3 (5 18 0 2 list 4 1) . #0#) 0 3 (1 0 0 2 get-scope-local-offset 4 1) 0 5 6 0 1 -3 0 5 22 0 2 list* 4 5) 6 -5 1 -3 7 (1 -5 17) 1 3 0 1 -5 0 5 3 0 2 list* 8 3) 3 (5 88 0 1 -4 0 2 bit? 4 2) 7 (3 (2 gensym 4 0) 6 -5 3 (3 (3 (5 1 0 1 -5 0 2 cons 4 2) 0 3 (5 1 0 1 -5 0 2 cons 4 2) 0 3 (5 1 0 1 -5 0 2 cons 4 2) 0 2 list 4 3) 0 3 (1 0 0 2 scope-local-infos 4 1) 0 2 append 4 2) 6 -6 3 (1 2 0 1 -6 0 2 expand-scope2 4 2) 6 -7 3 (1 -7 0 1 1 0 2 replace-body-scope! 4 2) 3 (1 -7 0 2 calc-scope-work-size 4 1) 1 3 0 3 (1 3 0 1 -7 0 1 1 0 1 -2 0 2 compile-body 4 4) 0 3 (1 -7 0 2 scope-upper-work-size 4 1) 0 5 23 0 2 list* 8 4) 3 (1 2 0 1 1 0 2 replace-body-scope! 4 2) 1 3 0 1 2 0 1 1 0 1 -2 0 2 compile-body 8 4) 16 compile-conti-direct 10)
(9 4 0 (26 1 1 1 7 (29 6 -2 20 -2 1 3 0 1 2 0 1 -2 0 9 1 3 (1 0 7 (3 (1 0 31 0 12 0 21 4 1) 0 12 1 0 1 0 30 0 2 compile-recur 8 3) 12 2 17) 13 -2 3 (1 1 0 1 -2 21 4 1) 0 1 0 0 1 2 0 2 make-boxes 8 3) 1 3 0 5 11 0 2 list* 8 2) 16 compile-body 10)
(9 3 0 (26 1 29 6 -2 20 -2 1 2 0 1 -2 0 1 0 0 9 1 3 (26 3 . #0=(1 0 7 (1 0 31 6 -3 1 0 6 -2 30 30 6 -2 3 (1 -2 0 12 0 0 2 var-is-set? 4 2) 7 (3 (12 0 0 1 -2 0 2 symbol-can-be-loop? 4 2) 7 (3 (1 -2 0 12 0 0 2 can-eliminate-lambda-node? 4 2) . #1=(6 -4 7 (1 . #2=(-3 0 19 0 1 . #0#)) 3 (1 -3 0 12 1 21 4 1) 0 3 (1 -2 0 12 0 0 2 scope-local-has? 4 2) 0 5 20 0 2 list* 8 3)) 29 . #1#) 1 . #2#) 12 2 17)) 13 -2 1 1 0 1 -2 21 8 1) 16 make-boxes 10)
(9 3 0 #0=(1 0 7 (3 (3 (1 2 0 5 0 0 2 list* 4 2) 0 1 1 0 1 0 30 0 2 compile-recur 4 3) 0 1 1 0 1 0 31 0 19 0 3 . #0#) 1 2 17) 16 compile-args 10)
(9 4 0 (26 4 29 6 -2 1 3 6 -5 3 (1 2 0 2 get-scope-local-offset 4 1) 6 -4 1 0 6 -3 . #0=(7 (3 (3 (1 -5 0 1 -4 0 5 6 0 2 list* 4 3) 0 1 1 0 1 -3 30 0 2 compile-recur 4 3) 0 5 1 0 1 -4 0 33 2 0 1 -3 31 0 19 1 3 1 -3 . #0#) 1 -5 17)) 16 compile-args-for-local 10)
(9 3 0 (26 3 . #0=(1 0 7 (1 0 30 6 -2 3 (1 -2 0 1 1 0 2 scope-local-has? 4 2) 6 -3 7 (3 (1 2 0 5 0 0 1 -3 0 5 1 0 2 list* 4 4) . #1=(0 1 1 0 1 0 31 0 19 0 3 . #0#)) 3 (1 -2 0 1 1 0 2 scope-frees-has? 4 2) 6 -4 7 (3 (1 2 0 5 0 0 1 -4 0 5 12 0 2 list* 4 4) . #1#) 3 (1 1 0 1 -2 0 5 "something wrong in collect-free [%@](%@)" 0 2 compile-error 4 3) . #1#) 1 2 17)) 16 collect-free 10)
(9 2 0 (26 1 5 :REF 0 1 0 30 38 7 (1 1 0 1 0 6 -2 31 30 0 2 symbol-can-be-loop? 8 2) 29 17) 16 apply-func-can-be-loop? 10)
(9 2 0 (26 2 3 (1 0 0 1 1 0 2 var-is-set? 4 2) 6 -2 7 (3 (1 -2 0 2 single? 4 1) 7 (1 -2 30 6 -3 3 (1 -3 0 2 lambda-node? 4 1) 7 (1 -3 . #0=(17)) 29 . #0#) 29 . #0#) 11 . #0#) 16 symbol-can-be-loop? 10)
(25 declaim (0 -1) 0 (3 (1 0 0 9 1 0 (26 4 3 (1 0 0 2 pair? 4 1) 7 (1 0 30 6 -2 5 inline 0 1 -2 38 7 (29 6 -3 1 0 31 6 -4 . #0=(3 (1 -4 0 2 pair? 4 1) 7 (1 -4 30 6 -5 3 (1 -5 0 2 declaim-inline 4 1) 1 -4 31 0 19 2 1 . #0#) 11 5 (values) . #1=(17))) 29 . #1#) 11 . #1#) 0 2 map 4 2) 0 5 do 0 2 list* 8 2) 10)
(5 0 0 26 1 3 (2 table 4 0) 6 -2 0 9 1 1 (5 t 0 1 0 0 12 0 0 2 table-put! 8 3) 16 declaim-inline 1 -2 0 9 1 1 (3 (1 0 0 2 symbol? 4 1) 7 (1 0 0 12 0 0 2 table-exists? 8 2) 29 17) 16 inline-function? 1 -2 0 9 2 1 (1 1 0 1 0 0 12 0 0 2 table-put! 8 3) 16 register-inline-function 1 -2 0 9 1 1 (1 0 0 12 0 0 2 table-get 8 2) 16 get-inline-function-body 26 -2 10)
(9 1 0 (3 (1 0 0 2 pair? 4 1) 7 (5 ^ 0 1 0 30 38 . #0=(17)) 29 . #0#) 16 lambda-expression? 10)
(5 0 0 26 1 29 6 -2 20 -2 1 -2 0 9 (0 -1) 1 (12 0 21 7 (3 (1 0 0 2 *stderr* 0 2 format 0 2 apply 4 3) 3 (2 *stderr* 0 5 "\n" 0 2 display 4 2) 29 0 12 0 21 8 1) 3 (1 0 0 29 0 2 format 0 2 apply 4 3) 0 2 error 8 1) 16 compile-error 1 -2 0 9 1 1 (26 6 22 t 6 -2 14 0 3 (29 0 29 0 2 create-scope 4 2) 6 -3 3 (29 0 1 -3 0 1 0 0 2 traverse 4 3) 6 -4 3 (5 10 0 2 list 4 1) 6 -5 3 (1 -5 0 1 -3 0 1 -4 0 2 compile-recur 4 3) 6 -6 3 (1 -3 0 2 scope-work-size 4 1) 6 -7 29 14 0 5 0 0 1 -7 38 7 (1 -6 17) 3 (3 (5 10 0 1 -7 0 5 -1 0 33 2 0 5 26 0 2 list 4 3) 0 1 -5 0 2 copy-pair! 4 2) 1 -6 0 1 -7 0 5 26 0 5 0 0 5 0 0 5 5 0 2 list* 8 6) 16 compile 26 -2 10)
(9 1 0 (3 (1 0 0 2 compile 4 1) 0 2 run-binary 8 1) 16 eval 10)
(9 1 0 (1 0 0 9 3 1 (1 2 0 1 1 0 1 0 0 12 0 0 2 compile-embed-op 8 4) 17) 16 simple-embed-func 10)
(9 1 0 (1 0 0 9 3 1 (1 2 0 1 1 0 1 0 0 12 0 0 2 compile-embed-op-1 8 4) 17) 16 simple-embed-func-1 10)
(9 4 0 (1 0 0 1 2 0 1 1 0 1 3 0 9 3 4 (1 0 7 (3 (1 0 0 2 single? 4 1) 7 (12 0 7 (3 (1 2 0 12 0 0 2 list* 4 2) . #0=(0 1 1 0 1 0 30 0 2 compile-recur 8 3)) 1 2 . #0#) 1 2 0 1 1 0 1 0 0 12 1 0 2 compile-embed-op 8 4) 12 2 7 (1 2 0 12 2 0 5 5 0 2 list* 8 3) 12 3 0 5 "`%@` requires at least 1 parameter" 0 2 compile-error 8 2) 17) 16 arith-embed-func 10)
(5 0 0 26 3 29 6 -2 3 (3 (3 (5 31 0 2 simple-embed-func-1 4 1) 0 5 cdr 0 2 cons 4 2) 0 3 (3 (5 30 0 2 simple-embed-func-1 4 1) 0 5 car 0 2 cons 4 2) 0 3 (3 (5 42 0 2 simple-embed-func 4 1) 0 5 >= 0 2 cons 4 2) 0 3 (3 (5 40 0 2 simple-embed-func 4 1) 0 5 <= 0 2 cons 4 2) 0 3 (3 (5 41 0 2 simple-embed-func 4 1) 0 5 > 0 2 cons 4 2) 0 3 (3 (5 39 0 2 simple-embed-func 4 1) 0 5 < 0 2 cons 4 2) 0 3 (3 (5 38 0 2 simple-embed-func-1 4 1) 0 5 eq? 0 2 cons 4 2) 0 3 (3 (5 37 0 29 0 5 36 0 5 / 0 2 arith-embed-func 4 4) 0 5 / 0 2 cons 4 2) 0 3 (3 (29 0 5 1 0 5 35 0 5 * 0 2 arith-embed-func 4 4) 0 5 * 0 2 cons 4 2) 0 3 (3 (5 34 0 29 0 5 33 0 5 - 0 2 arith-embed-func 4 4) 0 5 - 0 2 cons 4 2) 0 3 (3 (29 0 5 0 0 5 32 0 5 + 0 2 arith-embed-func 4 4) 0 5 + 0 2 cons 4 2) 0 2 list 4 11) 6 -3 . #0=(3 (1 -3 0 2 pair? 4 1) 7 (1 -3 30 6 -4 3 (1 -4 31 0 1 -4 30 0 2 register-embed-func 4 2) 1 -3 31 0 19 1 1 . #0#) 11 26 -4 10))
(9 (0 -1) 0 (3 (2 *stderr* 0 1 0 0 2 write/ss 4 2) 2 *stderr* 0 5 "\n" 0 2 display 8 2) 16 debug/ss 10)
(5 0 0 26 1 3 (2 table 4 0) 6 -2 0 9 2 1 (1 1 0 1 0 0 12 0 0 2 table-put! 8 3) 16 register-setf-expander 1 -2 0 9 1 1 (26 1 3 (1 0 0 2 symbol? 4 1) 7 (3 (2 gensym 4 0) 6 -2 1 0 0 3 (1 -2 0 1 0 0 5 set! 0 2 list 4 3) 0 3 (1 -2 0 2 list 4 1) 0 29 0 29 0 27 5 17) 3 (1 0 0 2 pair? 4 1) 7 (3 (1 0 30 0 12 0 0 2 table-get 4 2) . #0=(6 -2 7 (1 0 0 1 -2 8 1) 1 0 0 5 "not registered setf expander for `%@`" 0 2 error 8 2)) 29 . #0#) 16 get-setf-expansion 26 -2 10)
(9 2 0 (26 1 3 (1 0 0 2 pair? 4 1) 7 (3 (1 1 0 1 0 31 0 2 replace-tree 4 2) 0 3 (1 1 0 1 0 30 0 2 replace-tree 4 2) 0 2 cons 8 2) 3 (1 1 0 1 0 0 2 assoc 4 2) 6 -2 7 (1 -2 31 . #0=(17)) 1 0 . #0#) 16 replace-tree 10)
(25 setf 2 0 (26 5 3 (1 0 0 2 get-setf-expansion 4 1) 28 -2 5 3 (3 (1 -3 0 1 -2 0 2 cons 0 2 map 4 3) 0 3 (1 1 0 1 -4 30 0 2 cons 4 2) 0 2 cons 4 2) 0 1 -5 0 2 replace-tree 8 2) 10)
(3 (9 1 0 (26 3 3 (2 gensym 4 0) 6 -3 3 (2 gensym 4 0) 6 -2 3 (1 -2 0 5 car 0 2 list 4 2) 0 3 (1 -3 0 1 -2 0 5 set-car! 0 2 list 4 3) 0 3 (1 -3 0 2 list 4 1) 0 3 (1 0 6 -4 31 30 0 2 list 4 1) 0 3 (1 -2 0 2 list 4 1) 0 27 5 17) 0 5 car 0 2 register-setf-expander 4 2) 10)
(3 (9 1 0 (26 3 3 (2 gensym 4 0) 6 -3 3 (2 gensym 4 0) 6 -2 3 (1 -2 0 5 cdr 0 2 list 4 2) 0 3 (1 -3 0 1 -2 0 5 set-cdr! 0 2 list 4 3) 0 3 (1 -3 0 2 list 4 1) 0 3 (1 0 6 -4 31 30 0 2 list 4 1) 0 3 (1 -2 0 2 list 4 1) 0 27 5 17) 0 5 cdr 0 2 register-setf-expander 4 2) 10)
(3 (9 1 0 (26 4 3 (2 gensym 4 0) 6 -4 3 (2 gensym 4 0) 6 -3 3 (2 gensym 4 0) 6 -2 3 (1 -3 0 1 -2 0 5 table-get 0 2 list 4 3) 0 3 (1 -4 0 1 -3 0 1 -2 0 5 table-put! 0 2 list 4 4) 0 3 (1 -4 0 2 list 4 1) 0 3 (1 0 6 -5 31 31 30 0 1 0 6 -5 31 30 0 2 list 4 2) 0 3 (1 -3 0 1 -2 0 2 list 4 2) 0 27 5 17) 0 5 table-get 0 2 register-setf-expander 4 2) 10)
(3 (9 1 0 (26 4 3 (2 gensym 4 0) 6 -4 3 (2 gensym 4 0) 6 -3 3 (2 gensym 4 0) 6 -2 3 (1 -3 0 1 -2 0 5 vector-get 0 2 list 4 3) 0 3 (1 -4 0 1 -3 0 1 -2 0 5 vector-set! 0 2 list 4 4) 0 3 (1 -4 0 2 list 4 1) 0 3 (1 0 6 -5 31 31 30 0 1 0 6 -5 31 30 0 2 list 4 2) 0 3 (1 -3 0 1 -2 0 2 list 4 2) 0 27 5 17) 0 5 vector-get 0 2 register-setf-expander 4 2) 10)
(25 inc! (1 -1) 0 (26 6 1 1 7 (1 1 30 . #0=(6 -2 3 (1 0 0 2 get-setf-expansion 4 1) 28 -3 5 3 (3 (3 (1 -2 0 1 -7 0 5 + 0 1 -5 30 0 2 list 4 4) 0 2 list 4 1) 0 1 -6 0 2 replace-tree 4 2) 0 3 (1 -4 0 1 -3 0 2 list 0 2 map 4 3) 0 5 let 0 2 list 8 3)) 5 1 . #0#) 10)
(25 dec! (1 -1) 0 (26 1 1 1 7 (1 1 30 . #0=(6 -2 3 (1 -2 0 5 - 0 2 list 4 2) 0 1 0 0 5 inc! 0 2 list 8 3)) 5 1 . #0#) 10)
(25 push! 2 0 (26 5 3 (1 1 0 2 get-setf-expansion 4 1) 28 -2 5 3 (3 (3 (1 -6 0 1 0 0 5 cons 0 1 -4 30 0 2 list 4 4) 0 2 list 4 1) 0 1 -5 0 2 replace-tree 4 2) 0 3 (1 -3 0 1 -2 0 2 list 0 2 map 4 3) 0 5 let 0 2 list 8 3) 10)
(25 pop! 1 0 (26 7 3 (1 0 0 2 get-setf-expansion 4 1) 28 -2 5 3 (2 gensym 4 0) 6 -8 1 -4 30 6 -7 3 (3 (1 -8 0 5 car 0 2 list 4 2) 0 3 (3 (3 (1 -8 0 5 cdr 0 1 -7 0 2 list 4 3) 0 2 list 4 1) 0 1 -5 0 2 replace-tree 4 2) 0 3 (3 (1 -6 0 1 -8 0 2 list 4 2) 0 2 list 4 1) 0 5 let 0 2 list 4 4) 0 3 (1 -3 0 1 -2 0 2 list 0 2 map 4 3) 0 5 let 0 2 list 8 3) 10)
