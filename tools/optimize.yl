;; Optimize VM code

(load "tools/code-walker.yl")
(load "tools/match.yl")

(defmacro match-cond (expr &rest clauses)
  (let-gensym val
    `(let1 ,val ,expr
       ,(alet ((clauses clauses))
          (when clauses
            (let1 clause (car clauses)
              (if (eq? (car clause) 't)
                  `(do ,@(cdr clause))
                `(if-match ,(car clause) ,val
                           (do ,@(cdr clause))
                   ,(loop (cdr clauses))))))))))

(defun replace-pair! (pair a d)
  (set-car! pair a)
  (set-cdr! pair d)
  pair)

(defun optimize! (code)
  (vm-walker code
    (^(c recur)
      (match-cond c
                  ((CONST nil . ?rest)
                   (replace-pair! c 'NIL ?rest))
                  ((GREF nil . ?rest)
                   (replace-pair! c 'NIL ?rest))
                  ((NIL TEST ?then . ?else)    ; Optimize `not` and `and` code
                   (copy-pair! c ?else))
                  ((GREF t TEST ?then . ?else) ; Optimize `not` code
                   (copy-pair! c ?then))
                  (t nil)))))

(defun main (args)
  (files-or-stdin args
                  (^(stream)
                    (awhile (read stream)
                      (optimize! it)
                      (write/ss it)
                      (display "\n")))))
